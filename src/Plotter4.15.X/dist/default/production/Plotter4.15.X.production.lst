

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Jun 11 18:05:05 2021

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	strings,global,class=STRING,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131                           
   132                           	psect	idataCOMMON
   133  0B63                     __pidataCOMMON:	
   134                           
   135                           ;initializer for _steps
   136  0B63  34C8               	retlw	200
   137                           
   138                           	psect	idataBANK0
   139  0B64                     __pidataBANK0:	
   140                           
   141                           ;initializer for _canvasX
   142  0B64  3430               	retlw	48
   143  0B65  3430               	retlw	48
   144  0B66  3430               	retlw	48
   145                           
   146                           	psect	idataBANK1
   147  0C7F                     __pidataBANK1:	
   148                           
   149                           ;initializer for modConversionFormNumberToMultiplier@F1996
   150  0C7F  3401               	retlw	1
   151  0C80  3400               	retlw	0
   152  0C81  3402               	retlw	2
   153  0C82  3400               	retlw	0
   154  0C83  3404               	retlw	4
   155  0C84  3400               	retlw	0
   156  0C85  3408               	retlw	8
   157  0C86  3400               	retlw	0
   158  0C87  3410               	retlw	16
   159  0C88  3400               	retlw	0
   160  0C89  3420               	retlw	32
   161  0C8A  3400               	retlw	0
   162  0C8B  3420               	retlw	32
   163  0C8C  3400               	retlw	0
   164  0C8D  3420               	retlw	32
   165  0C8E  3400               	retlw	0
   166                           
   167                           ;initializer for _stepX
   168  0C8F  3430               	retlw	48
   169  0C90  3430               	retlw	48
   170  0C91  3430               	retlw	48
   171  0C92  3400               	retlw	0
   172  0C93  3400               	retlw	0
   173  0C94  3400               	retlw	0
   174  0C95  3400               	retlw	0
   175                           
   176                           ;initializer for _stepY
   177  0C96  3430               	retlw	48
   178  0C97  3430               	retlw	48
   179  0C98  3430               	retlw	48
   180  0C99  3400               	retlw	0
   181  0C9A  3400               	retlw	0
   182  0C9B  3400               	retlw	0
   183  0C9C  3400               	retlw	0
   184                           
   185                           ;initializer for _stepZ
   186  0C9D  3430               	retlw	48
   187  0C9E  3430               	retlw	48
   188  0C9F  3430               	retlw	48
   189  0CA0  3400               	retlw	0
   190  0CA1  3400               	retlw	0
   191  0CA2  3400               	retlw	0
   192  0CA3  3400               	retlw	0
   193                           
   194                           ;initializer for _canvasY
   195  0CA4  3430               	retlw	48
   196  0CA5  3430               	retlw	48
   197  0CA6  3430               	retlw	48
   198                           
   199                           	psect	nvBANK0
   200  006F                     __pnvBANK0:	
   201  006F                     _defaultDirz:	
   202  006F                     	ds	1
   203                           
   204                           	psect	nvBANK1
   205  00D8                     __pnvBANK1:	
   206  00D8                     _MStepX:	
   207  00D8                     	ds	2
   208  00DA                     _MStepY:	
   209  00DA                     	ds	2
   210  00DC                     _MStepZ:	
   211  00DC                     	ds	2
   212  00DE                     _defaultDirx:	
   213  00DE                     	ds	1
   214  00DF                     _defaultDiry:	
   215  00DF                     	ds	1
   216  00E0                     _end:	
   217  00E0                     	ds	1
   218  0005                     _PORTA	set	5
   219  0005                     _PORTAbits	set	5
   220  0006                     _PORTB	set	6
   221  0006                     _PORTBbits	set	6
   222  0007                     _PORTC	set	7
   223  0007                     _PORTCbits	set	7
   224  0008                     _PORTD	set	8
   225  0008                     _PORTDbits	set	8
   226  0009                     _PORTE	set	9
   227  0009                     _PORTEbits	set	9
   228  001A                     _RCREG	set	26
   229  0018                     _RCSTAbits	set	24
   230  0019                     _TXREG	set	25
   231  00C4                     _CREN	set	196
   232  00C1                     _OERR	set	193
   233  0065                     _RCIF	set	101
   234  0064                     _TXIF	set	100
   235  0099                     _SPBRG	set	153
   236  009A                     _SPBRGH	set	154
   237  0085                     _TRISA	set	133
   238  0086                     _TRISB	set	134
   239  0087                     _TRISC	set	135
   240  0088                     _TRISD	set	136
   241  0089                     _TRISE	set	137
   242  0098                     _TXSTAbits	set	152
   243  0188                     _ANSEL	set	392
   244  0189                     _ANSELH	set	393
   245  0187                     _BAUDCTLbits	set	391
   246                           
   247                           	psect	strings
   248  0800                     __pstrings:	
   249  0800                     stringtab:	
   250  0800                     __stringtab:	
   251                           
   252                           ;	String table - string pointers are 1 byte each
   253  0800  1BFF               	btfsc	btemp+1,7
   254  0801  280A               	ljmp	stringcode
   255  0802  1383               	bcf	3,7
   256  0803  187F               	btfsc	btemp+1,0
   257  0804  1783               	bsf	3,7
   258  0805  0800               	movf	0,w
   259  0806  0A84               	incf	4,f
   260  0807  1903               	skipnz
   261  0808  0AFF               	incf	btemp+1,f
   262  0809  0008               	return
   263  080A                     stringcode:	
   264  080A                     stringdir:	
   265  080A  3008               	movlw	high stringdir
   266  080B  008A               	movwf	10
   267  080C  0804               	movf	4,w
   268  080D  0A84               	incf	4,f
   269  080E  0782               	addwf	2,f
   270  080F                     __stringbase:	
   271  080F  3400               	retlw	0
   272  0810                     __end_of__stringtab:	
   273  0810                     STR_12:	
   274  0810  3465               	retlw	101	;'e'
   275  0811  3463               	retlw	99	;'c'
   276  0812  346F               	retlw	111	;'o'
   277  0813  3420               	retlw	32	;' '
   278  0814  3472               	retlw	114	;'r'
   279  0815  3469               	retlw	105	;'i'
   280  0816  3463               	retlw	99	;'c'
   281  0817  3465               	retlw	101	;'e'
   282  0818  347A               	retlw	122	;'z'
   283  0819  3469               	retlw	105	;'i'
   284  081A  346F               	retlw	111	;'o'
   285  081B  346E               	retlw	110	;'n'
   286  081C  3465               	retlw	101	;'e'
   287  081D  343A               	retlw	58	;':'
   288  081E  3420               	retlw	32	;' '
   289  081F  3400               	retlw	0
   290  0820                     STR_7:	
   291  0820  3474               	retlw	116	;'t'
   292  0821  346F               	retlw	111	;'o'
   293  0822  3464               	retlw	100	;'d'
   294  0823  346F               	retlw	111	;'o'
   295  0824  3420               	retlw	32	;' '
   296  0825  3458               	retlw	88	;'X'
   297  0826  343A               	retlw	58	;':'
   298  0827  3420               	retlw	32	;' '
   299  0828  3400               	retlw	0
   300  0829                     STR_8:	
   301  0829  3474               	retlw	116	;'t'
   302  082A  346F               	retlw	111	;'o'
   303  082B  3464               	retlw	100	;'d'
   304  082C  346F               	retlw	111	;'o'
   305  082D  3420               	retlw	32	;' '
   306  082E  3459               	retlw	89	;'Y'
   307  082F  343A               	retlw	58	;':'
   308  0830  3420               	retlw	32	;' '
   309  0831  3400               	retlw	0
   310  0832                     STR_4:	
   311  0832  3465               	retlw	101	;'e'
   312  0833  3463               	retlw	99	;'c'
   313  0834  346F               	retlw	111	;'o'
   314  0835  3458               	retlw	88	;'X'
   315  0836  343A               	retlw	58	;':'
   316  0837  3420               	retlw	32	;' '
   317  0838  3400               	retlw	0
   318  0839                     STR_5:	
   319  0839  3465               	retlw	101	;'e'
   320  083A  3463               	retlw	99	;'c'
   321  083B  346F               	retlw	111	;'o'
   322  083C  3459               	retlw	89	;'Y'
   323  083D  343A               	retlw	58	;':'
   324  083E  3420               	retlw	32	;' '
   325  083F  3400               	retlw	0
   326  0840                     STR_6:	
   327  0840  3465               	retlw	101	;'e'
   328  0841  3463               	retlw	99	;'c'
   329  0842  346F               	retlw	111	;'o'
   330  0843  345A               	retlw	90	;'Z'
   331  0844  343A               	retlw	58	;':'
   332  0845  3420               	retlw	32	;' '
   333  0846  3400               	retlw	0
   334  0847                     STR_1:	
   335  0847  3465               	retlw	101	;'e'
   336  0848  3463               	retlw	99	;'c'
   337  0849  346F               	retlw	111	;'o'
   338  084A  343A               	retlw	58	;':'
   339  084B  3420               	retlw	32	;' '
   340  084C  3400               	retlw	0
   341  084D                     STR_9:	
   342  084D  3472               	retlw	114	;'r'
   343  084E  3465               	retlw	101	;'e'
   344  084F  3461               	retlw	97	;'a'
   345  0850  3464               	retlw	100	;'d'
   346  0851  3479               	retlw	121	;'y'
   347  0852  3400               	retlw	0
   348  0853                     STR_3:	
   349  0853  3465               	retlw	101	;'e'
   350  0854  346E               	retlw	110	;'n'
   351  0855  3464               	retlw	100	;'d'
   352  0856  3400               	retlw	0
   353  0857                     STR_2:	
   354  0857  346F               	retlw	111	;'o'
   355  0858  346B               	retlw	107	;'k'
   356  0859  3400               	retlw	0
   357  0825                     
   358                           ; #config settings
   359  0000                     
   360                           	psect	cinit
   361  07CD                     start_initialization:	
   362  07CD                     __initialization:	
   363                           
   364                           ; Clear objects allocated to BANK0
   365  07CD  1383               	bcf	3,7	;select IRP bank0
   366  07CE  3020               	movlw	low __pbssBANK0
   367  07CF  0084               	movwf	4
   368  07D0  304C               	movlw	low (__pbssBANK0+44)
   369  07D1  120A  118A  2003  120A  118A  	fcall	clear_ram0
   370                           
   371                           ; Clear objects allocated to BANK1
   372  07D6  30C8               	movlw	low __pbssBANK1
   373  07D7  0084               	movwf	4
   374  07D8  30D8               	movlw	low (__pbssBANK1+16)
   375  07D9  120A  118A  2003  120A  118A  	fcall	clear_ram0
   376                           
   377                           ; Initialize objects allocated to BANK1
   378  07DE  30C8               	movlw	low (__pdataBANK1+40)
   379  07DF  00FD               	movwf	btemp+-1
   380  07E0  300C               	movlw	high __pidataBANK1
   381  07E1  00FE               	movwf	btemp
   382  07E2  307F               	movlw	low __pidataBANK1
   383  07E3  00FF               	movwf	btemp+1
   384  07E4  30A0               	movlw	low __pdataBANK1
   385  07E5  0084               	movwf	4
   386  07E6  120A  158A  238A  120A  118A  	fcall	init_ram0
   387                           
   388                           ; Initialize objects allocated to BANK0
   389  07EB  306F               	movlw	low (__pdataBANK0+3)
   390  07EC  00FD               	movwf	btemp+-1
   391  07ED  300B               	movlw	high __pidataBANK0
   392  07EE  00FE               	movwf	btemp
   393  07EF  3064               	movlw	low __pidataBANK0
   394  07F0  00FF               	movwf	btemp+1
   395  07F1  306C               	movlw	low __pdataBANK0
   396  07F2  0084               	movwf	4
   397  07F3  120A  158A  238A  120A  118A  	fcall	init_ram0
   398                           
   399                           ; Initialize objects allocated to COMMON
   400  07F8  120A  158A  2363   	fcall	__pidataCOMMON	;fetch initializer
   401  07FB  00FD               	movwf	__pdataCOMMON& (0+127)
   402  07FC                     end_of_initialization:	
   403                           ;End of C runtime variable initialization code
   404                           
   405  07FC                     __end_of__initialization:	
   406  07FC  0183               	clrf	3
   407  07FD  120A  118A  2CF7   	ljmp	_main	;jump to C main() function
   408                           
   409                           	psect	dataCOMMON
   410  007D                     __pdataCOMMON:	
   411  007D                     _steps:	
   412  007D                     	ds	1
   413                           
   414                           	psect	bssBANK0
   415  0020                     __pbssBANK0:	
   416  0020                     _motorX:	
   417  0020                     	ds	5
   418  0025                     _motorY:	
   419  0025                     	ds	5
   420  002A                     _motorZ:	
   421  002A                     	ds	5
   422  002F                     _canvasx:	
   423  002F                     	ds	2
   424  0031                     _canvasy:	
   425  0031                     	ds	2
   426  0033                     _stepXprec:	
   427  0033                     	ds	2
   428  0035                     _stepYprec:	
   429  0035                     	ds	2
   430  0037                     _stepZprec:	
   431  0037                     	ds	2
   432  0039                     _stepx:	
   433  0039                     	ds	2
   434  003B                     _stepxTodo:	
   435  003B                     	ds	2
   436  003D                     _stepy:	
   437  003D                     	ds	2
   438  003F                     _stepyTodo:	
   439  003F                     	ds	2
   440  0041                     _stepz:	
   441  0041                     	ds	2
   442  0043                     _stepzTodo:	
   443  0043                     	ds	2
   444  0045                     _limitX0:	
   445  0045                     	ds	1
   446  0046                     _limitX1:	
   447  0046                     	ds	1
   448  0047                     _limitY0:	
   449  0047                     	ds	1
   450  0048                     _limitY1:	
   451  0048                     	ds	1
   452  0049                     _limitZ0:	
   453  0049                     	ds	1
   454  004A                     _limitZ1:	
   455  004A                     	ds	1
   456  004B                     _speed:	
   457  004B                     	ds	1
   458                           
   459                           	psect	dataBANK0
   460  006C                     __pdataBANK0:	
   461  006C                     _canvasX:	
   462  006C                     	ds	3
   463                           
   464                           	psect	bssBANK1
   465  00C8                     __pbssBANK1:	
   466  00C8                     _coords:	
   467  00C8                     	ds	9
   468  00D1                     _canvas:	
   469  00D1                     	ds	7
   470                           
   471                           	psect	dataBANK1
   472  00A0                     __pdataBANK1:	
   473  00A0                     modConversionFormNumberToMultiplier@F1996:	
   474  00A0                     	ds	16
   475  00B0                     _stepX:	
   476  00B0                     	ds	7
   477  00B7                     _stepY:	
   478  00B7                     	ds	7
   479  00BE                     _stepZ:	
   480  00BE                     	ds	7
   481  00C5                     _canvasY:	
   482  00C5                     	ds	3
   483                           
   484                           	psect	clrtext
   485  0003                     clear_ram0:	
   486                           ;	Called with FSR containing the base address, and
   487                           ;	W with the last address+1
   488                           
   489  0003  0064               	clrwdt	;clear the watchdog before getting into this loop
   490  0004                     clrloop0:	
   491  0004  0180               	clrf	0	;clear RAM location pointed to by FSR
   492  0005  0A84               	incf	4,f	;increment pointer
   493  0006  0604               	xorwf	4,w	;XOR with final address
   494  0007  1903               	btfsc	3,2	;have we reached the end yet?
   495  0008  3400               	retlw	0	;all done for this memory range, return
   496  0009  0604               	xorwf	4,w	;XOR again to restore value
   497  000A  2804               	goto	clrloop0	;do the next byte
   498                           
   499                           	psect	inittext
   500  0B86                     init_fetch0:	
   501                           ;	Called with low address in FSR and high address in W
   502                           
   503  0B86  087E               	movf	126,w
   504  0B87  008A               	movwf	10
   505  0B88  087F               	movf	127,w
   506  0B89  0082               	movwf	2
   507  0B8A                     init_ram0:	
   508                           ;Called with:
   509                           ;	high address of idata address in btemp 
   510                           ;	low address of idata address in btemp+1 
   511                           ;	low address of data in FSR
   512                           ;	high address + 1 of data in btemp-1
   513                           
   514  0B8A  2386  120A  158A   	fcall	init_fetch0
   515  0B8D  0080               	movwf	0
   516  0B8E  0A84               	incf	4,f
   517  0B8F  0804               	movf	4,w
   518  0B90  067D               	xorwf	125,w
   519  0B91  1903               	btfsc	3,2
   520  0B92  3400               	retlw	0
   521  0B93  0AFF               	incf	127,f
   522  0B94  1903               	btfsc	3,2
   523  0B95  0AFE               	incf	126,f
   524  0B96  2B8A               	goto	init_ram0
   525                           
   526                           	psect	cstackCOMMON
   527  0070                     __pcstackCOMMON:	
   528  0070                     ?_contStepX:	
   529  0070                     ??_contStepX:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_contStepY:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ??_contStepY:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_constSpeed:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_modM1:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_modM2:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_modM3:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_ms_delay:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ??_ms_delay:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_UART_Init:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ??_UART_Init:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_UART_TxChar:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ??_UART_TxChar:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_UART_RxChar:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ??_UART_RxChar:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_UART_RxString:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ??_UART_RxString:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_UART_GotoNewLine:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_main:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_getCanvasDim:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_strcmp:	
   590                           ; 2 bytes @ 0x0
   591                           
   592  0070                     ?_getCoords:	
   593                           ; 2 bytes @ 0x0
   594                           
   595  0070                     ?_strlen:	
   596                           ; 2 bytes @ 0x0
   597                           
   598  0070                     ?_maxStep:	
   599                           ; 2 bytes @ 0x0
   600                           
   601  0070                     ?_activeMotor:	
   602                           ; 2 bytes @ 0x0
   603                           
   604  0070                     ?_limitz:	
   605                           ; 2 bytes @ 0x0
   606                           
   607  0070                     ?___wmul:	
   608                           ; 2 bytes @ 0x0
   609                           
   610  0070                     UART_TxChar@ch:	
   611                           ; 2 bytes @ 0x0
   612                           
   613  0070                     strcmp@s2:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     modM1@m:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     modM2@m:	
   620                           ; 2 bytes @ 0x0
   621                           
   622  0070                     modM3@m:	
   623                           ; 2 bytes @ 0x0
   624                           
   625  0070                     maxStep@stepx:	
   626                           ; 2 bytes @ 0x0
   627                           
   628  0070                     activeMotor@i:	
   629                           ; 2 bytes @ 0x0
   630                           
   631  0070                     constSpeed@activeX:	
   632                           ; 2 bytes @ 0x0
   633                           
   634  0070                     ___wmul@multiplier:	
   635                           ; 2 bytes @ 0x0
   636                           
   637                           
   638                           ; 2 bytes @ 0x0
   639  0070                     	ds	1
   640  0071                     ?_UART_TxString:	
   641  0071                     ??_UART_GotoNewLine:	
   642                           ; 1 bytes @ 0x1
   643                           
   644  0071                     UART_TxString@str:	
   645                           ; 1 bytes @ 0x1
   646                           
   647                           
   648                           ; 2 bytes @ 0x1
   649  0071                     	ds	1
   650  0072                     ??_strcmp:	
   651  0072                     ??_strlen:	
   652                           ; 1 bytes @ 0x2
   653                           
   654  0072                     ??_modM1:	
   655                           ; 1 bytes @ 0x2
   656                           
   657  0072                     ??_modM2:	
   658                           ; 1 bytes @ 0x2
   659                           
   660  0072                     ??_modM3:	
   661                           ; 1 bytes @ 0x2
   662                           
   663  0072                     ??_limitz:	
   664                           ; 1 bytes @ 0x2
   665                           
   666  0072                     ms_delay@val:	
   667                           ; 1 bytes @ 0x2
   668                           
   669  0072                     UART_RxString@stringa:	
   670                           ; 1 bytes @ 0x2
   671                           
   672  0072                     maxStep@stepy:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0072                     activeMotor@step:	
   676                           ; 2 bytes @ 0x2
   677                           
   678  0072                     constSpeed@activeY:	
   679                           ; 2 bytes @ 0x2
   680                           
   681  0072                     ___wmul@multiplicand:	
   682                           ; 2 bytes @ 0x2
   683                           
   684                           
   685                           ; 2 bytes @ 0x2
   686  0072                     	ds	1
   687  0073                     ??_UART_TxString:	
   688  0073                     ms_delay@i:	
   689                           ; 1 bytes @ 0x3
   690                           
   691  0073                     UART_RxString@len:	
   692                           ; 1 bytes @ 0x3
   693                           
   694                           
   695                           ; 1 bytes @ 0x3
   696  0073                     	ds	1
   697  0074                     ?_stepMotorX:	
   698  0074                     ?_stepMotorY:	
   699                           ; 1 bytes @ 0x4
   700                           
   701  0074                     ?_stepMotorZ:	
   702                           ; 1 bytes @ 0x4
   703                           
   704  0074                     ??_activeMotor:	
   705                           ; 1 bytes @ 0x4
   706                           
   707  0074                     ??___wmul:	
   708                           ; 1 bytes @ 0x4
   709                           
   710  0074                     stepMotorX@speed:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  0074                     stepMotorY@speed:	
   714                           ; 1 bytes @ 0x4
   715                           
   716  0074                     stepMotorZ@speed:	
   717                           ; 1 bytes @ 0x4
   718                           
   719  0074                     UART_RxString@ch:	
   720                           ; 1 bytes @ 0x4
   721                           
   722  0074                     strcmp@r:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0074                     maxStep@stepz:	
   726                           ; 1 bytes @ 0x4
   727                           
   728  0074                     constSpeed@activeZ:	
   729                           ; 2 bytes @ 0x4
   730                           
   731  0074                     ___wmul@product:	
   732                           ; 2 bytes @ 0x4
   733                           
   734                           
   735                           ; 2 bytes @ 0x4
   736  0074                     	ds	1
   737  0075                     ??_getCanvasDim:	
   738  0075                     ??_getCoords:	
   739                           ; 1 bytes @ 0x5
   740                           
   741  0075                     strcmp@s1:	
   742                           ; 1 bytes @ 0x5
   743                           
   744  0075                     stepMotorX@mod:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  0075                     stepMotorY@mod:	
   748                           ; 2 bytes @ 0x5
   749                           
   750  0075                     stepMotorZ@mod:	
   751                           ; 2 bytes @ 0x5
   752                           
   753                           
   754                           ; 2 bytes @ 0x5
   755  0075                     	ds	1
   756  0076                     ??_constSpeed:	
   757  0076                     ??_maxStep:	
   758                           ; 1 bytes @ 0x6
   759                           
   760  0076                     ?_UART_TxInt:	
   761                           ; 1 bytes @ 0x6
   762                           
   763  0076                     ?___awdiv:	
   764                           ; 1 bytes @ 0x6
   765                           
   766  0076                     strlen@s:	
   767                           ; 2 bytes @ 0x6
   768                           
   769  0076                     UART_TxInt@val:	
   770                           ; 1 bytes @ 0x6
   771                           
   772  0076                     ___awdiv@divisor:	
   773                           ; 2 bytes @ 0x6
   774                           
   775                           
   776                           ; 2 bytes @ 0x6
   777  0076                     	ds	1
   778  0077                     ??_stepMotorX:	
   779  0077                     ??_stepMotorY:	
   780                           ; 1 bytes @ 0x7
   781                           
   782  0077                     ??_stepMotorZ:	
   783                           ; 1 bytes @ 0x7
   784                           
   785  0077                     stepMotorX@dir:	
   786                           ; 1 bytes @ 0x7
   787                           
   788  0077                     stepMotorY@dir:	
   789                           ; 1 bytes @ 0x7
   790                           
   791  0077                     stepMotorZ@dir:	
   792                           ; 1 bytes @ 0x7
   793                           
   794  0077                     getCanvasDim@canvas:	
   795                           ; 1 bytes @ 0x7
   796                           
   797  0077                     strlen@cp:	
   798                           ; 1 bytes @ 0x7
   799                           
   800  0077                     _maxStep$394:	
   801                           ; 1 bytes @ 0x7
   802                           
   803  0077                     constSpeed@nMotor:	
   804                           ; 2 bytes @ 0x7
   805                           
   806                           
   807                           ; 2 bytes @ 0x7
   808  0077                     	ds	1
   809  0078                     ??_UART_TxInt:	
   810  0078                     ?_motorXInit:	
   811                           ; 1 bytes @ 0x8
   812                           
   813  0078                     ?_motorYInit:	
   814                           ; 2 bytes @ 0x8
   815                           
   816  0078                     ?_motorZInit:	
   817                           ; 2 bytes @ 0x8
   818                           
   819  0078                     ?_toint:	
   820                           ; 2 bytes @ 0x8
   821                           
   822  0078                     getCoords@coords:	
   823                           ; 2 bytes @ 0x8
   824                           
   825  0078                     getCanvasDim@j:	
   826                           ; 1 bytes @ 0x8
   827                           
   828  0078                     ___awdiv@dividend:	
   829                           ; 2 bytes @ 0x8
   830                           
   831                           
   832                           ; 2 bytes @ 0x8
   833  0078                     	ds	1
   834  0079                     UART_TxInt@sig:	
   835  0079                     _maxStep$395:	
   836                           ; 1 bytes @ 0x9
   837                           
   838  0079                     getCoords@i:	
   839                           ; 2 bytes @ 0x9
   840                           
   841                           
   842                           ; 2 bytes @ 0x9
   843  0079                     	ds	1
   844  007A                     ??_motorXInit:	
   845  007A                     ??_motorYInit:	
   846                           ; 1 bytes @ 0xA
   847                           
   848  007A                     ??_motorZInit:	
   849                           ; 1 bytes @ 0xA
   850                           
   851  007A                     ??_toint:	
   852                           ; 1 bytes @ 0xA
   853                           
   854  007A                     ??___awdiv:	
   855                           ; 1 bytes @ 0xA
   856                           
   857  007A                     UART_TxInt@uni:	
   858                           ; 1 bytes @ 0xA
   859                           
   860                           
   861                           ; 1 bytes @ 0xA
   862  007A                     	ds	1
   863  007B                     ??_equivVal:	
   864  007B                     UART_TxInt@dec:	
   865                           ; 1 bytes @ 0xB
   866                           
   867  007B                     maxStep@l:	
   868                           ; 1 bytes @ 0xB
   869                           
   870                           
   871                           ; 2 bytes @ 0xB
   872  007B                     	ds	1
   873  007C                     UART_TxInt@cent:	
   874                           
   875                           ; 1 bytes @ 0xC
   876  007C                     	ds	1
   877                           
   878                           	psect	cstackBANK0
   879  004C                     __pcstackBANK0:	
   880  004C                     ___awdiv@counter:	
   881  004C                     toint@r:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  004C                     motorXInit@i:	
   885                           ; 2 bytes @ 0x0
   886                           
   887  004C                     motorYInit@i:	
   888                           ; 2 bytes @ 0x0
   889                           
   890  004C                     motorZInit@i:	
   891                           ; 2 bytes @ 0x0
   892                           
   893                           
   894                           ; 2 bytes @ 0x0
   895  004C                     	ds	1
   896  004D                     ___awdiv@sign:	
   897                           
   898                           ; 1 bytes @ 0x1
   899  004D                     	ds	1
   900  004E                     toint@flag:	
   901  004E                     motorXInit@j:	
   902                           ; 2 bytes @ 0x2
   903                           
   904  004E                     motorYInit@j:	
   905                           ; 2 bytes @ 0x2
   906                           
   907  004E                     motorZInit@j:	
   908                           ; 2 bytes @ 0x2
   909                           
   910  004E                     ___awdiv@quotient:	
   911                           ; 2 bytes @ 0x2
   912                           
   913                           
   914                           ; 2 bytes @ 0x2
   915  004E                     	ds	2
   916  0050                     toint@value:	
   917  0050                     motorXInit@k:	
   918                           ; 2 bytes @ 0x4
   919                           
   920  0050                     motorYInit@k:	
   921                           ; 2 bytes @ 0x4
   922                           
   923  0050                     motorZInit@k:	
   924                           ; 2 bytes @ 0x4
   925                           
   926                           
   927                           ; 2 bytes @ 0x4
   928  0050                     	ds	2
   929  0052                     toint@i:	
   930  0052                     motorXInit@j_561:	
   931                           ; 2 bytes @ 0x6
   932                           
   933  0052                     motorYInit@j_568:	
   934                           ; 2 bytes @ 0x6
   935                           
   936  0052                     motorZInit@j_575:	
   937                           ; 2 bytes @ 0x6
   938                           
   939                           
   940                           ; 2 bytes @ 0x6
   941  0052                     	ds	2
   942  0054                     toint@c:	
   943  0054                     motorXInit@m:	
   944                           ; 1 bytes @ 0x8
   945                           
   946  0054                     motorYInit@m:	
   947                           ; 2 bytes @ 0x8
   948                           
   949  0054                     motorZInit@m:	
   950                           ; 2 bytes @ 0x8
   951                           
   952                           
   953                           ; 2 bytes @ 0x8
   954  0054                     	ds	1
   955  0055                     ?_equivVal:	
   956  0055                     equivVal@Mcanvas:	
   957                           ; 2 bytes @ 0x9
   958                           
   959                           
   960                           ; 2 bytes @ 0x9
   961  0055                     	ds	1
   962  0056                     motorXInit@status:	
   963  0056                     motorYInit@status:	
   964                           ; 2 bytes @ 0xA
   965                           
   966  0056                     motorZInit@status:	
   967                           ; 2 bytes @ 0xA
   968                           
   969                           
   970                           ; 2 bytes @ 0xA
   971  0056                     	ds	1
   972  0057                     equivVal@Mstep:	
   973                           
   974                           ; 2 bytes @ 0xB
   975  0057                     	ds	2
   976  0059                     equivVal@canvas:	
   977                           
   978                           ; 2 bytes @ 0xD
   979  0059                     	ds	2
   980  005B                     ??_main:	
   981                           
   982                           ; 1 bytes @ 0xF
   983  005B                     	ds	3
   984  005E                     main@largest:	
   985                           
   986                           ; 2 bytes @ 0x12
   987  005E                     	ds	2
   988  0060                     main@activeZ:	
   989                           
   990                           ; 2 bytes @ 0x14
   991  0060                     	ds	2
   992  0062                     main@i_523:	
   993                           
   994                           ; 2 bytes @ 0x16
   995  0062                     	ds	2
   996  0064                     main@i_525:	
   997                           
   998                           ; 2 bytes @ 0x18
   999  0064                     	ds	2
  1000  0066                     main@activeX:	
  1001                           
  1002                           ; 2 bytes @ 0x1A
  1003  0066                     	ds	2
  1004  0068                     main@activeY:	
  1005                           
  1006                           ; 2 bytes @ 0x1C
  1007  0068                     	ds	2
  1008  006A                     main@i:	
  1009                           
  1010                           ; 2 bytes @ 0x1E
  1011  006A                     	ds	2
  1012                           
  1013                           	psect	maintext
  1014  04F7                     __pmaintext:	
  1015 ;;
  1016 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1017 ;;
  1018 ;; *************** function _main *****************
  1019 ;; Defined at:
  1020 ;;		line 85 in file "main.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  i               2   24[BANK0 ] int 
  1025 ;;  i               2   22[BANK0 ] int 
  1026 ;;  i               2   30[BANK0 ] int 
  1027 ;;  activeY         2   28[BANK0 ] int 
  1028 ;;  activeX         2   26[BANK0 ] int 
  1029 ;;  activeZ         2   20[BANK0 ] int 
  1030 ;;  largest         2   18[BANK0 ] int 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : B00/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1040 ;;      Params:         0       0       0       0       0
  1041 ;;      Locals:         0      14       0       0       0
  1042 ;;      Temps:          0       3       0       0       0
  1043 ;;      Totals:         0      17       0       0       0
  1044 ;;Total ram usage:       17 bytes
  1045 ;; Hardware stack levels required when called:    3
  1046 ;; This function calls:
  1047 ;;		_UART_GotoNewLine
  1048 ;;		_UART_Init
  1049 ;;		_UART_RxString
  1050 ;;		_UART_TxInt
  1051 ;;		_UART_TxString
  1052 ;;		_activeMotor
  1053 ;;		_constSpeed
  1054 ;;		_contStepX
  1055 ;;		_contStepY
  1056 ;;		_equivVal
  1057 ;;		_getCanvasDim
  1058 ;;		_getCoords
  1059 ;;		_maxStep
  1060 ;;		_motorXInit
  1061 ;;		_motorYInit
  1062 ;;		_motorZInit
  1063 ;;		_stepMotorX
  1064 ;;		_stepMotorY
  1065 ;;		_stepMotorZ
  1066 ;;		_strcmp
  1067 ;;		_toint
  1068 ;; This function is called by:
  1069 ;;		Startup code after reset
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           
  1074                           ;psect for function _main
  1075  04F7                     _main:	
  1076                           
  1077                           ;main.c: 86: PORTA = 0x00;
  1078                           
  1079                           ;incstack = 0
  1080                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1081  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1082  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1083  04F9  0185               	clrf	5	;volatile
  1084                           
  1085                           ;main.c: 87: PORTB = 0x00;
  1086  04FA  0186               	clrf	6	;volatile
  1087                           
  1088                           ;main.c: 88: PORTC = 0x00;
  1089  04FB  0187               	clrf	7	;volatile
  1090                           
  1091                           ;main.c: 89: PORTD = 0x00;
  1092  04FC  0188               	clrf	8	;volatile
  1093                           
  1094                           ;main.c: 90: PORTE = 0x00;
  1095  04FD  0189               	clrf	9	;volatile
  1096                           
  1097                           ;main.c: 92: TRISA = 0b00000000;
  1098  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  1099  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  1100  0500  0185               	clrf	5	;volatile
  1101                           
  1102                           ;main.c: 93: TRISB = 0b01100111;
  1103  0501  3067               	movlw	103
  1104  0502  0086               	movwf	6	;volatile
  1105                           
  1106                           ;main.c: 94: TRISC = 0b10000000;
  1107  0503  3080               	movlw	128
  1108  0504  0087               	movwf	7	;volatile
  1109                           
  1110                           ;main.c: 95: TRISD = 0b00000000;
  1111  0505  0188               	clrf	8	;volatile
  1112                           
  1113                           ;main.c: 96: TRISE = 0b00000000;
  1114  0506  0189               	clrf	9	;volatile
  1115                           
  1116                           ;main.c: 98: ANSEL = 0x00;
  1117  0507  1683               	bsf	3,5	;RP0=1, select bank3
  1118  0508  1703               	bsf	3,6	;RP1=1, select bank3
  1119  0509  0188               	clrf	8	;volatile
  1120                           
  1121                           ;main.c: 99: ANSELH = 0x00;
  1122  050A  0189               	clrf	9	;volatile
  1123                           
  1124                           ;main.c: 102: UART_Init();
  1125  050B  120A  118A  200B  120A  118A  	fcall	_UART_Init
  1126                           
  1127                           ;main.c: 104: motorX.dir = 1;
  1128  0510  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0511  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0512  01A0               	clrf	_motorX
  1131  0513  0AA0               	incf	_motorX,f
  1132                           
  1133                           ;main.c: 105: motorX.speed = 1;
  1134  0514  01A1               	clrf	_motorX+1
  1135  0515  0AA1               	incf	_motorX+1,f
  1136                           
  1137                           ;main.c: 106: motorX.mod = 1;
  1138  0516  01A2               	clrf	_motorX+2
  1139  0517  0AA2               	incf	_motorX+2,f
  1140                           
  1141                           ;main.c: 108: motorY.dir = 1;
  1142  0518  01A5               	clrf	_motorY
  1143  0519  0AA5               	incf	_motorY,f
  1144                           
  1145                           ;main.c: 109: motorY.speed = 1;
  1146  051A  01A6               	clrf	_motorY+1
  1147  051B  0AA6               	incf	_motorY+1,f
  1148                           
  1149                           ;main.c: 110: motorY.mod = 1;
  1150  051C  01A7               	clrf	_motorY+2
  1151  051D  0AA7               	incf	_motorY+2,f
  1152                           
  1153                           ;main.c: 112: motorZ.dir = 1;
  1154  051E  01AA               	clrf	_motorZ
  1155  051F  0AAA               	incf	_motorZ,f
  1156                           
  1157                           ;main.c: 113: motorZ.speed = 1;
  1158  0520  01AB               	clrf	_motorZ+1
  1159  0521  0AAB               	incf	_motorZ+1,f
  1160                           
  1161                           ;main.c: 114: motorZ.mod = 1;
  1162  0522  01AC               	clrf	_motorZ+2
  1163  0523  0AAC               	incf	_motorZ+2,f
  1164                           
  1165                           ;main.c: 120: MStepX = motorXInit();
  1166  0524  120A  118A  21FA  120A  118A  	fcall	_motorXInit
  1167  0529  0879               	movf	?_motorXInit+1,w
  1168  052A  1683               	bsf	3,5	;RP0=1, select bank1
  1169  052B  1303               	bcf	3,6	;RP1=0, select bank1
  1170  052C  00D9               	movwf	(_MStepX+1)^(0+128)
  1171  052D  0878               	movf	?_motorXInit,w
  1172  052E  00D8               	movwf	_MStepX^(0+128)
  1173                           
  1174                           ;main.c: 121: defaultDirx = motorX.dir;
  1175  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0531  0820               	movf	_motorX,w
  1178  0532  00DB               	movwf	??_main
  1179  0533  085B               	movf	??_main,w
  1180  0534  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0535  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0536  00DE               	movwf	_defaultDirx^(0+128)
  1183                           
  1184                           ;main.c: 123: MStepY = motorYInit();
  1185  0537  120A  118A  22F9  120A  118A  	fcall	_motorYInit
  1186  053C  0879               	movf	?_motorYInit+1,w
  1187  053D  1683               	bsf	3,5	;RP0=1, select bank1
  1188  053E  1303               	bcf	3,6	;RP1=0, select bank1
  1189  053F  00DB               	movwf	(_MStepY+1)^(0+128)
  1190  0540  0878               	movf	?_motorYInit,w
  1191  0541  00DA               	movwf	_MStepY^(0+128)
  1192                           
  1193                           ;main.c: 124: defaultDiry = motorY.dir;
  1194  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0544  0825               	movf	_motorY,w
  1197  0545  00DB               	movwf	??_main
  1198  0546  085B               	movf	??_main,w
  1199  0547  1683               	bsf	3,5	;RP0=1, select bank1
  1200  0548  1303               	bcf	3,6	;RP1=0, select bank1
  1201  0549  00DF               	movwf	_defaultDiry^(0+128)
  1202                           
  1203                           ;main.c: 127: MStepZ = motorZInit();
  1204  054A  120A  118A  23F8  120A  118A  	fcall	_motorZInit
  1205  054F  0879               	movf	?_motorZInit+1,w
  1206  0550  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0551  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0552  00DD               	movwf	(_MStepZ+1)^(0+128)
  1209  0553  0878               	movf	?_motorZInit,w
  1210  0554  00DC               	movwf	_MStepZ^(0+128)
  1211                           
  1212                           ;main.c: 128: defaultDirz = motorZ.dir;
  1213  0555  1283               	bcf	3,5	;RP0=0, select bank0
  1214  0556  1303               	bcf	3,6	;RP1=0, select bank0
  1215  0557  082A               	movf	_motorZ,w
  1216  0558  00DB               	movwf	??_main
  1217  0559  085B               	movf	??_main,w
  1218  055A  00EF               	movwf	_defaultDirz
  1219  055B                     l2985:	
  1220                           ;main.c: 131: while(1){
  1221                           
  1222                           
  1223                           ;main.c: 133: end = 0;
  1224  055B  1683               	bsf	3,5	;RP0=1, select bank1
  1225  055C  1303               	bcf	3,6	;RP1=0, select bank1
  1226  055D  01E0               	clrf	_end^(0+128)
  1227                           
  1228                           ;main.c: 136: getCanvasDim(canvas);
  1229  055E  30D1               	movlw	(low (_canvas| 0))& (0+255)
  1230  055F  120A  158A  2795  120A  118A  	fcall	_getCanvasDim
  1231                           
  1232                           ;main.c: 137: canvasx = toint(canvasX);
  1233  0564  306C               	movlw	(low (_canvasX| 0))& (0+255)
  1234  0565  120A  118A  2100  120A  118A  	fcall	_toint
  1235  056A  0879               	movf	?_toint+1,w
  1236  056B  1283               	bcf	3,5	;RP0=0, select bank0
  1237  056C  1303               	bcf	3,6	;RP1=0, select bank0
  1238  056D  00B0               	movwf	_canvasx+1
  1239  056E  0878               	movf	?_toint,w
  1240  056F  00AF               	movwf	_canvasx
  1241                           
  1242                           ;main.c: 138: UART_TxInt(canvasx);
  1243  0570  0830               	movf	_canvasx+1,w
  1244  0571  00F7               	movwf	UART_TxInt@val+1
  1245  0572  082F               	movf	_canvasx,w
  1246  0573  00F6               	movwf	UART_TxInt@val
  1247  0574  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1248                           
  1249                           ;main.c: 139: canvasy = toint(canvasY);
  1250  0579  30C5               	movlw	(low (_canvasY| 0))& (0+255)
  1251  057A  120A  118A  2100  120A  118A  	fcall	_toint
  1252  057F  0879               	movf	?_toint+1,w
  1253  0580  1283               	bcf	3,5	;RP0=0, select bank0
  1254  0581  1303               	bcf	3,6	;RP1=0, select bank0
  1255  0582  00B2               	movwf	_canvasy+1
  1256  0583  0878               	movf	?_toint,w
  1257  0584  00B1               	movwf	_canvasy
  1258                           
  1259                           ;main.c: 140: UART_TxInt(canvasy);
  1260  0585  0832               	movf	_canvasy+1,w
  1261  0586  00F7               	movwf	UART_TxInt@val+1
  1262  0587  0831               	movf	_canvasy,w
  1263  0588  00F6               	movwf	UART_TxInt@val
  1264  0589  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1265  058E                     l2997:	
  1266                           ;main.c: 142: do{
  1267                           
  1268                           
  1269                           ;main.c: 143: UART_RxString(coords);
  1270  058E  30C8               	movlw	(low (_coords| 0))& (0+255)
  1271  058F  120A  158A  24D1  120A  118A  	fcall	_UART_RxString
  1272                           
  1273                           ;main.c: 144: UART_TxString("eco: ");
  1274  0594  3038               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1275  0595  00F1               	movwf	UART_TxString@str
  1276  0596  3080               	movlw	128
  1277  0597  00F2               	movwf	UART_TxString@str+1
  1278  0598  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1279                           
  1280                           ;main.c: 145: UART_TxString(coords);
  1281  059D  30C8               	movlw	(low (_coords| 0))& (0+255)
  1282  059E  00F1               	movwf	UART_TxString@str
  1283  059F  3000               	movlw	0
  1284  05A0  00F2               	movwf	UART_TxString@str+1
  1285  05A1  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1286                           
  1287                           ;main.c: 148: if(!strcmp(coords,"ok"))
  1288  05A6  3048               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1289  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  1290  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  1291  05A9  00DB               	movwf	??_main
  1292  05AA  085B               	movf	??_main,w
  1293  05AB  00F0               	movwf	strcmp@s2
  1294  05AC  30C8               	movlw	(low (_coords| 0))& (0+255)
  1295  05AD  120A  158A  24A7  120A  118A  	fcall	_strcmp
  1296  05B2  0870               	movf	?_strcmp,w
  1297  05B3  0471               	iorwf	?_strcmp+1,w
  1298  05B4  1D03               	btfss	3,2
  1299  05B5  2DBC               	goto	l3007
  1300                           
  1301                           ;main.c: 149: getCoords(coords);
  1302  05B6  30C8               	movlw	(low (_coords| 0))& (0+255)
  1303  05B7  120A  158A  2734  120A  118A  	fcall	_getCoords
  1304  05BC                     l3007:	
  1305                           
  1306                           ;main.c: 152: if(!strcmp(coords,"end"))
  1307  05BC  3044               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1308  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1309  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1310  05BF  00DB               	movwf	??_main
  1311  05C0  085B               	movf	??_main,w
  1312  05C1  00F0               	movwf	strcmp@s2
  1313  05C2  30C8               	movlw	(low (_coords| 0))& (0+255)
  1314  05C3  120A  158A  24A7  120A  118A  	fcall	_strcmp
  1315  05C8  0870               	movf	?_strcmp,w
  1316  05C9  0471               	iorwf	?_strcmp+1,w
  1317  05CA  1D03               	btfss	3,2
  1318  05CB  2DD0               	goto	l3011
  1319                           
  1320                           ;main.c: 153: end = 1;
  1321  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  1322  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  1323  05CE  01E0               	clrf	_end^(0+128)
  1324  05CF  0AE0               	incf	_end^(0+128),f
  1325  05D0                     l3011:	
  1326                           
  1327                           ;main.c: 155: if(end != 1){
  1328  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1329  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  1330  05D2  0360               	decf	_end^(0+128),w
  1331  05D3  1903               	btfsc	3,2
  1332  05D4  2FC4               	goto	l3093
  1333                           
  1334                           ;main.c: 157: stepx = equivVal(canvasX, MStepX,toint(stepX));
  1335  05D5  306C               	movlw	low (_canvasX| 0)
  1336  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1337  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1338  05D8  00D5               	movwf	equivVal@Mcanvas
  1339  05D9  3000               	movlw	high (_canvasX| 0)
  1340  05DA  00D6               	movwf	equivVal@Mcanvas+1
  1341  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  1342  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  1343  05DD  0859               	movf	(_MStepX+1)^(0+128),w
  1344  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1345  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1346  05E0  00D8               	movwf	equivVal@Mstep+1
  1347  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1348  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1349  05E3  0858               	movf	_MStepX^(0+128),w
  1350  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1351  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1352  05E6  00D7               	movwf	equivVal@Mstep
  1353  05E7  30B0               	movlw	(low (_stepX| 0))& (0+255)
  1354  05E8  120A  118A  2100  120A  118A  	fcall	_toint
  1355  05ED  0879               	movf	?_toint+1,w
  1356  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1357  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1358  05F0  00DA               	movwf	equivVal@canvas+1
  1359  05F1  0878               	movf	?_toint,w
  1360  05F2  00D9               	movwf	equivVal@canvas
  1361  05F3  120A  158A  23F3  120A  118A  	fcall	_equivVal
  1362  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  1363  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  1364  05FA  0856               	movf	?_equivVal+1,w
  1365  05FB  00BA               	movwf	_stepx+1
  1366  05FC  0855               	movf	?_equivVal,w
  1367  05FD  00B9               	movwf	_stepx
  1368                           
  1369                           ;main.c: 158: UART_GotoNewLine();
  1370  05FE  120A  158A  2370  120A  118A  	fcall	_UART_GotoNewLine
  1371                           
  1372                           ;main.c: 159: UART_TxString("ecoX: ");
  1373  0603  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1374  0604  00F1               	movwf	UART_TxString@str
  1375  0605  3080               	movlw	128
  1376  0606  00F2               	movwf	UART_TxString@str+1
  1377  0607  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1378                           
  1379                           ;main.c: 160: UART_TxInt(stepx);
  1380  060C  1283               	bcf	3,5	;RP0=0, select bank0
  1381  060D  1303               	bcf	3,6	;RP1=0, select bank0
  1382  060E  083A               	movf	_stepx+1,w
  1383  060F  00F7               	movwf	UART_TxInt@val+1
  1384  0610  0839               	movf	_stepx,w
  1385  0611  00F6               	movwf	UART_TxInt@val
  1386  0612  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1387                           
  1388                           ;main.c: 162: stepy = equivVal(canvasY, MStepY,toint(stepY));
  1389  0617  30C5               	movlw	low (_canvasY| 0)
  1390  0618  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0619  1303               	bcf	3,6	;RP1=0, select bank0
  1392  061A  00D5               	movwf	equivVal@Mcanvas
  1393  061B  3000               	movlw	high (_canvasY| 0)
  1394  061C  00D6               	movwf	equivVal@Mcanvas+1
  1395  061D  1683               	bsf	3,5	;RP0=1, select bank1
  1396  061E  1303               	bcf	3,6	;RP1=0, select bank1
  1397  061F  085B               	movf	(_MStepY+1)^(0+128),w
  1398  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0622  00D8               	movwf	equivVal@Mstep+1
  1401  0623  1683               	bsf	3,5	;RP0=1, select bank1
  1402  0624  1303               	bcf	3,6	;RP1=0, select bank1
  1403  0625  085A               	movf	_MStepY^(0+128),w
  1404  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1405  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1406  0628  00D7               	movwf	equivVal@Mstep
  1407  0629  30B7               	movlw	(low (_stepY| 0))& (0+255)
  1408  062A  120A  118A  2100  120A  118A  	fcall	_toint
  1409  062F  0879               	movf	?_toint+1,w
  1410  0630  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0631  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0632  00DA               	movwf	equivVal@canvas+1
  1413  0633  0878               	movf	?_toint,w
  1414  0634  00D9               	movwf	equivVal@canvas
  1415  0635  120A  158A  23F3  120A  118A  	fcall	_equivVal
  1416  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1417  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1418  063C  0856               	movf	?_equivVal+1,w
  1419  063D  00BE               	movwf	_stepy+1
  1420  063E  0855               	movf	?_equivVal,w
  1421  063F  00BD               	movwf	_stepy
  1422                           
  1423                           ;main.c: 163: UART_GotoNewLine();
  1424  0640  120A  158A  2370  120A  118A  	fcall	_UART_GotoNewLine
  1425                           
  1426                           ;main.c: 164: UART_TxString("ecoY: ");
  1427  0645  302A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1428  0646  00F1               	movwf	UART_TxString@str
  1429  0647  3080               	movlw	128
  1430  0648  00F2               	movwf	UART_TxString@str+1
  1431  0649  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1432                           
  1433                           ;main.c: 165: UART_TxInt(stepy);
  1434  064E  1283               	bcf	3,5	;RP0=0, select bank0
  1435  064F  1303               	bcf	3,6	;RP1=0, select bank0
  1436  0650  083E               	movf	_stepy+1,w
  1437  0651  00F7               	movwf	UART_TxInt@val+1
  1438  0652  083D               	movf	_stepy,w
  1439  0653  00F6               	movwf	UART_TxInt@val
  1440  0654  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1441                           
  1442                           ;main.c: 168: stepz = toint(stepZ);
  1443  0659  30BE               	movlw	(low (_stepZ| 0))& (0+255)
  1444  065A  120A  118A  2100  120A  118A  	fcall	_toint
  1445  065F  0879               	movf	?_toint+1,w
  1446  0660  1283               	bcf	3,5	;RP0=0, select bank0
  1447  0661  1303               	bcf	3,6	;RP1=0, select bank0
  1448  0662  00C2               	movwf	_stepz+1
  1449  0663  0878               	movf	?_toint,w
  1450  0664  00C1               	movwf	_stepz
  1451                           
  1452                           ;main.c: 169: UART_GotoNewLine();
  1453  0665  120A  158A  2370  120A  118A  	fcall	_UART_GotoNewLine
  1454                           
  1455                           ;main.c: 170: UART_TxString("ecoZ: ");
  1456  066A  3031               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1457  066B  00F1               	movwf	UART_TxString@str
  1458  066C  3080               	movlw	128
  1459  066D  00F2               	movwf	UART_TxString@str+1
  1460  066E  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1461                           
  1462                           ;main.c: 171: UART_TxInt(stepz);
  1463  0673  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0674  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0675  0842               	movf	_stepz+1,w
  1466  0676  00F7               	movwf	UART_TxInt@val+1
  1467  0677  0841               	movf	_stepz,w
  1468  0678  00F6               	movwf	UART_TxInt@val
  1469  0679  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1470                           
  1471                           ;main.c: 175: contStepX();
  1472  067E  120A  118A  2020  120A  118A  	fcall	_contStepX
  1473                           
  1474                           ;main.c: 176: UART_GotoNewLine();
  1475  0683  120A  158A  2370  120A  118A  	fcall	_UART_GotoNewLine
  1476                           
  1477                           ;main.c: 177: UART_TxString("todo X: ");
  1478  0688  3011               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1479  0689  00F1               	movwf	UART_TxString@str
  1480  068A  3080               	movlw	128
  1481  068B  00F2               	movwf	UART_TxString@str+1
  1482  068C  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1483                           
  1484                           ;main.c: 178: UART_TxInt(stepxTodo);
  1485  0691  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0692  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0693  083C               	movf	_stepxTodo+1,w
  1488  0694  00F7               	movwf	UART_TxInt@val+1
  1489  0695  083B               	movf	_stepxTodo,w
  1490  0696  00F6               	movwf	UART_TxInt@val
  1491  0697  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1492                           
  1493                           ;main.c: 179: contStepY();
  1494  069C  120A  118A  2090  120A  118A  	fcall	_contStepY
  1495                           
  1496                           ;main.c: 180: UART_GotoNewLine();
  1497  06A1  120A  158A  2370  120A  118A  	fcall	_UART_GotoNewLine
  1498                           
  1499                           ;main.c: 181: UART_TxString("todo Y: ");
  1500  06A6  301A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1501  06A7  00F1               	movwf	UART_TxString@str
  1502  06A8  3080               	movlw	128
  1503  06A9  00F2               	movwf	UART_TxString@str+1
  1504  06AA  120A  158A  2436  120A  118A  	fcall	_UART_TxString
  1505                           
  1506                           ;main.c: 182: UART_TxInt(stepyTodo);
  1507  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1508  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  1509  06B1  0840               	movf	_stepyTodo+1,w
  1510  06B2  00F7               	movwf	UART_TxInt@val+1
  1511  06B3  083F               	movf	_stepyTodo,w
  1512  06B4  00F6               	movwf	UART_TxInt@val
  1513  06B5  120A  118A  2171  120A  118A  	fcall	_UART_TxInt
  1514                           
  1515                           ;main.c: 187: int largest = maxStep(stepxTodo, stepyTodo, stepzTodo);
  1516  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1517  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1518  06BC  083C               	movf	_stepxTodo+1,w
  1519  06BD  00F1               	movwf	maxStep@stepx+1
  1520  06BE  083B               	movf	_stepxTodo,w
  1521  06BF  00F0               	movwf	maxStep@stepx
  1522  06C0  0840               	movf	_stepyTodo+1,w
  1523  06C1  00F3               	movwf	maxStep@stepy+1
  1524  06C2  083F               	movf	_stepyTodo,w
  1525  06C3  00F2               	movwf	maxStep@stepy
  1526  06C4  0844               	movf	_stepzTodo+1,w
  1527  06C5  00F5               	movwf	maxStep@stepz+1
  1528  06C6  0843               	movf	_stepzTodo,w
  1529  06C7  00F4               	movwf	maxStep@stepz
  1530  06C8  120A  158A  25A6  120A  118A  	fcall	_maxStep
  1531  06CD  0871               	movf	?_maxStep+1,w
  1532  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  1533  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  1534  06D0  00DF               	movwf	main@largest+1
  1535  06D1  0870               	movf	?_maxStep,w
  1536  06D2  00DE               	movwf	main@largest
  1537                           
  1538                           ;main.c: 188: int activeX = 0, activeY = 0, activeZ = 0;
  1539  06D3  01E6               	clrf	main@activeX
  1540  06D4  01E7               	clrf	main@activeX+1
  1541  06D5  01E8               	clrf	main@activeY
  1542  06D6  01E9               	clrf	main@activeY+1
  1543  06D7  01E0               	clrf	main@activeZ
  1544  06D8  01E1               	clrf	main@activeZ+1
  1545                           
  1546                           ;main.c: 191: for(int i = 0; i<= largest ; i++){
  1547  06D9  01EA               	clrf	main@i
  1548  06DA  01EB               	clrf	main@i+1
  1549  06DB                     l3067:	
  1550  06DB  085F               	movf	main@largest+1,w
  1551  06DC  3A80               	xorlw	128
  1552  06DD  00DB               	movwf	??_main
  1553  06DE  086B               	movf	main@i+1,w
  1554  06DF  3A80               	xorlw	128
  1555  06E0  025B               	subwf	??_main,w
  1556  06E1  1D03               	skipz
  1557  06E2  2EE5               	goto	u3165
  1558  06E3  086A               	movf	main@i,w
  1559  06E4  025E               	subwf	main@largest,w
  1560  06E5                     u3165:	
  1561  06E5  1C03               	btfss	3,0
  1562  06E6  2F57               	goto	l3069
  1563                           
  1564                           ;main.c: 192: activeX = activeMotor(i, stepxTodo);
  1565  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1566  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1567  06E9  086B               	movf	main@i+1,w
  1568  06EA  00F1               	movwf	activeMotor@i+1
  1569  06EB  086A               	movf	main@i,w
  1570  06EC  00F0               	movwf	activeMotor@i
  1571  06ED  083C               	movf	_stepxTodo+1,w
  1572  06EE  00F3               	movwf	activeMotor@step+1
  1573  06EF  083B               	movf	_stepxTodo,w
  1574  06F0  00F2               	movwf	activeMotor@step
  1575  06F1  120A  158A  23AA  120A  118A  	fcall	_activeMotor
  1576  06F6  0871               	movf	?_activeMotor+1,w
  1577  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1578  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1579  06F9  00E7               	movwf	main@activeX+1
  1580  06FA  0870               	movf	?_activeMotor,w
  1581  06FB  00E6               	movwf	main@activeX
  1582                           
  1583                           ;main.c: 193: activeY = activeMotor(i, stepyTodo);
  1584  06FC  086B               	movf	main@i+1,w
  1585  06FD  00F1               	movwf	activeMotor@i+1
  1586  06FE  086A               	movf	main@i,w
  1587  06FF  00F0               	movwf	activeMotor@i
  1588  0700  0840               	movf	_stepyTodo+1,w
  1589  0701  00F3               	movwf	activeMotor@step+1
  1590  0702  083F               	movf	_stepyTodo,w
  1591  0703  00F2               	movwf	activeMotor@step
  1592  0704  120A  158A  23AA  120A  118A  	fcall	_activeMotor
  1593  0709  0871               	movf	?_activeMotor+1,w
  1594  070A  1283               	bcf	3,5	;RP0=0, select bank0
  1595  070B  1303               	bcf	3,6	;RP1=0, select bank0
  1596  070C  00E9               	movwf	main@activeY+1
  1597  070D  0870               	movf	?_activeMotor,w
  1598  070E  00E8               	movwf	main@activeY
  1599                           
  1600                           ;main.c: 195: constSpeed(activeX, activeY, activeZ);
  1601  070F  0867               	movf	main@activeX+1,w
  1602  0710  00F1               	movwf	constSpeed@activeX+1
  1603  0711  0866               	movf	main@activeX,w
  1604  0712  00F0               	movwf	constSpeed@activeX
  1605  0713  0869               	movf	main@activeY+1,w
  1606  0714  00F3               	movwf	constSpeed@activeY+1
  1607  0715  0868               	movf	main@activeY,w
  1608  0716  00F2               	movwf	constSpeed@activeY
  1609  0717  0861               	movf	main@activeZ+1,w
  1610  0718  00F5               	movwf	constSpeed@activeZ+1
  1611  0719  0860               	movf	main@activeZ,w
  1612  071A  00F4               	movwf	constSpeed@activeZ
  1613  071B  120A  158A  2414  120A  118A  	fcall	_constSpeed
  1614                           
  1615                           ;main.c: 197: if(activeX == 1)
  1616  0720  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0721  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0722  0366               	decf	main@activeX,w
  1619  0723  0467               	iorwf	main@activeX+1,w
  1620  0724  1D03               	btfss	3,2
  1621  0725  2F37               	goto	l3061
  1622                           
  1623                           ;main.c: 198: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  1624  0726  0821               	movf	_motorX+1,w
  1625  0727  00DB               	movwf	??_main
  1626  0728  085B               	movf	??_main,w
  1627  0729  00F4               	movwf	stepMotorX@speed
  1628  072A  0822               	movf	_motorX+2,w
  1629  072B  00DC               	movwf	??_main+1
  1630  072C  01DD               	clrf	??_main+2
  1631  072D  085C               	movf	??_main+1,w
  1632  072E  00F5               	movwf	stepMotorX@mod
  1633  072F  085D               	movf	??_main+2,w
  1634  0730  00F6               	movwf	stepMotorX@mod+1
  1635  0731  0820               	movf	_motorX,w
  1636  0732  120A  158A  2504  120A  118A  	fcall	_stepMotorX
  1637  0737                     l3061:	
  1638                           
  1639                           ;main.c: 200: if(activeY == 1)
  1640  0737  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0738  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0739  0368               	decf	main@activeY,w
  1643  073A  0469               	iorwf	main@activeY+1,w
  1644  073B  1D03               	btfss	3,2
  1645  073C  2F4E               	goto	l3065
  1646                           
  1647                           ;main.c: 201: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  1648  073D  0826               	movf	_motorY+1,w
  1649  073E  00DB               	movwf	??_main
  1650  073F  085B               	movf	??_main,w
  1651  0740  00F4               	movwf	stepMotorY@speed
  1652  0741  0827               	movf	_motorY+2,w
  1653  0742  00DC               	movwf	??_main+1
  1654  0743  01DD               	clrf	??_main+2
  1655  0744  085C               	movf	??_main+1,w
  1656  0745  00F5               	movwf	stepMotorY@mod
  1657  0746  085D               	movf	??_main+2,w
  1658  0747  00F6               	movwf	stepMotorY@mod+1
  1659  0748  0825               	movf	_motorY,w
  1660  0749  120A  158A  253A  120A  118A  	fcall	_stepMotorY
  1661  074E                     l3065:	
  1662  074E  3001               	movlw	1
  1663  074F  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0750  1303               	bcf	3,6	;RP1=0, select bank0
  1665  0751  07EA               	addwf	main@i,f
  1666  0752  1803               	skipnc
  1667  0753  0AEB               	incf	main@i+1,f
  1668  0754  3000               	movlw	0
  1669  0755  07EB               	addwf	main@i+1,f
  1670  0756  2EDB               	goto	l3067
  1671  0757                     l3069:	
  1672                           
  1673                           ;main.c: 202: }
  1674                           ;main.c: 205: for(int i = 0; i<= stepz; i++){
  1675  0757  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0758  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0759  01E2               	clrf	main@i_523
  1678  075A  01E3               	clrf	main@i_523+1
  1679  075B                     l3077:	
  1680  075B  0842               	movf	_stepz+1,w
  1681  075C  3A80               	xorlw	128
  1682  075D  00DB               	movwf	??_main
  1683  075E  0863               	movf	main@i_523+1,w
  1684  075F  3A80               	xorlw	128
  1685  0760  025B               	subwf	??_main,w
  1686  0761  1D03               	skipz
  1687  0762  2F65               	goto	u3175
  1688  0763  0862               	movf	main@i_523,w
  1689  0764  0241               	subwf	_stepz,w
  1690  0765                     u3175:	
  1691  0765  1C03               	btfss	3,0
  1692  0766  2F87               	goto	l3079
  1693                           
  1694                           ;main.c: 206: motorZ.dir = defaultDirz;
  1695  0767  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0768  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0769  086F               	movf	_defaultDirz,w
  1698  076A  00DB               	movwf	??_main
  1699  076B  085B               	movf	??_main,w
  1700  076C  00AA               	movwf	_motorZ
  1701                           
  1702                           ;main.c: 207: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  1703  076D  082B               	movf	_motorZ+1,w
  1704  076E  00DB               	movwf	??_main
  1705  076F  085B               	movf	??_main,w
  1706  0770  00F4               	movwf	stepMotorZ@speed
  1707  0771  082C               	movf	_motorZ+2,w
  1708  0772  00DC               	movwf	??_main+1
  1709  0773  01DD               	clrf	??_main+2
  1710  0774  085C               	movf	??_main+1,w
  1711  0775  00F5               	movwf	stepMotorZ@mod
  1712  0776  085D               	movf	??_main+2,w
  1713  0777  00F6               	movwf	stepMotorZ@mod+1
  1714  0778  082A               	movf	_motorZ,w
  1715  0779  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  1716  077E  3001               	movlw	1
  1717  077F  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0780  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0781  07E2               	addwf	main@i_523,f
  1720  0782  1803               	skipnc
  1721  0783  0AE3               	incf	main@i_523+1,f
  1722  0784  3000               	movlw	0
  1723  0785  07E3               	addwf	main@i_523+1,f
  1724  0786  2F5B               	goto	l3077
  1725  0787                     l3079:	
  1726                           
  1727                           ;main.c: 208: }
  1728                           ;main.c: 209: for(int i = 0; i<= stepz; i++){
  1729  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1730  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0789  01E4               	clrf	main@i_525
  1732  078A  01E5               	clrf	main@i_525+1
  1733  078B                     l3089:	
  1734  078B  0842               	movf	_stepz+1,w
  1735  078C  3A80               	xorlw	128
  1736  078D  00DB               	movwf	??_main
  1737  078E  0865               	movf	main@i_525+1,w
  1738  078F  3A80               	xorlw	128
  1739  0790  025B               	subwf	??_main,w
  1740  0791  1D03               	skipz
  1741  0792  2F95               	goto	u3195
  1742  0793  0864               	movf	main@i_525,w
  1743  0794  0241               	subwf	_stepz,w
  1744  0795                     u3195:	
  1745  0795  1C03               	btfss	3,0
  1746  0796  2FBA               	goto	l3091
  1747                           
  1748                           ;main.c: 210: if(motorZ.dir == 1) motorZ.dir = 0;
  1749  0797  1283               	bcf	3,5	;RP0=0, select bank0
  1750  0798  1303               	bcf	3,6	;RP1=0, select bank0
  1751  0799  032A               	decf	_motorZ,w
  1752  079A  1D03               	btfss	3,2
  1753  079B  2F9E               	goto	l373
  1754  079C  01AA               	clrf	_motorZ
  1755  079D  2FA0               	goto	l3085
  1756  079E                     l373:	
  1757                           
  1758                           ;main.c: 211: else motorZ.dir = 1;
  1759  079E  01AA               	clrf	_motorZ
  1760  079F  0AAA               	incf	_motorZ,f
  1761  07A0                     l3085:	
  1762                           
  1763                           ;main.c: 212: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  1764  07A0  082B               	movf	_motorZ+1,w
  1765  07A1  00DB               	movwf	??_main
  1766  07A2  085B               	movf	??_main,w
  1767  07A3  00F4               	movwf	stepMotorZ@speed
  1768  07A4  082C               	movf	_motorZ+2,w
  1769  07A5  00DC               	movwf	??_main+1
  1770  07A6  01DD               	clrf	??_main+2
  1771  07A7  085C               	movf	??_main+1,w
  1772  07A8  00F5               	movwf	stepMotorZ@mod
  1773  07A9  085D               	movf	??_main+2,w
  1774  07AA  00F6               	movwf	stepMotorZ@mod+1
  1775  07AB  082A               	movf	_motorZ,w
  1776  07AC  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  1777  07B1  3001               	movlw	1
  1778  07B2  1283               	bcf	3,5	;RP0=0, select bank0
  1779  07B3  1303               	bcf	3,6	;RP1=0, select bank0
  1780  07B4  07E4               	addwf	main@i_525,f
  1781  07B5  1803               	skipnc
  1782  07B6  0AE5               	incf	main@i_525+1,f
  1783  07B7  3000               	movlw	0
  1784  07B8  07E5               	addwf	main@i_525+1,f
  1785  07B9  2F8B               	goto	l3089
  1786  07BA                     l3091:	
  1787                           
  1788                           ;main.c: 213: }
  1789                           ;main.c: 218: stepXprec = stepx;
  1790  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1791  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1792  07BC  083A               	movf	_stepx+1,w
  1793  07BD  00B4               	movwf	_stepXprec+1
  1794  07BE  0839               	movf	_stepx,w
  1795  07BF  00B3               	movwf	_stepXprec
  1796                           
  1797                           ;main.c: 219: stepYprec = stepy;
  1798  07C0  083E               	movf	_stepy+1,w
  1799  07C1  00B6               	movwf	_stepYprec+1
  1800  07C2  083D               	movf	_stepy,w
  1801  07C3  00B5               	movwf	_stepYprec
  1802  07C4                     l3093:	
  1803                           
  1804                           ;main.c: 222: }
  1805                           ;main.c: 225: }while(end!=1);
  1806  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  1807  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  1808  07C6  0360               	decf	_end^(0+128),w
  1809  07C7  1D03               	btfss	3,2
  1810  07C8  2D8E               	goto	l2997
  1811                           
  1812                           ;main.c: 227: PORTBbits.RB3 = 0;
  1813  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  1814  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  1815  07CB  1186               	bcf	6,3	;volatile
  1816  07CC  2D5B               	goto	l2985
  1817  07CD                     __end_of_main:	
  1818                           
  1819                           	psect	text1
  1820  0100                     __ptext1:	
  1821 ;; *************** function _toint *****************
  1822 ;; Defined at:
  1823 ;;		line 276 in file "main.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  c               1    wreg     PTR unsigned char 
  1826 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1827 ;;		 -> canvasX(3), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  c               1    8[BANK0 ] PTR unsigned char 
  1830 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1831 ;;		 -> canvasX(3), 
  1832 ;;  i               2    6[BANK0 ] int 
  1833 ;;  value           2    4[BANK0 ] int 
  1834 ;;  flag            2    2[BANK0 ] int 
  1835 ;;  r               2    0[BANK0 ] int 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  2    8[COMMON] int 
  1838 ;; Registers used:
  1839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1845 ;;      Params:         2       0       0       0       0
  1846 ;;      Locals:         0       9       0       0       0
  1847 ;;      Temps:          1       0       0       0       0
  1848 ;;      Totals:         3       9       0       0       0
  1849 ;;Total ram usage:       12 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    1
  1852 ;; This function calls:
  1853 ;;		___wmul
  1854 ;;		_strlen
  1855 ;; This function is called by:
  1856 ;;		_main
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function _toint
  1862  0100                     _toint:	
  1863                           
  1864                           ;incstack = 0
  1865                           ; Regs used in _toint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1866                           ;toint@c stored from wreg
  1867  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0102  00D4               	movwf	toint@c
  1870                           
  1871                           ;main.c: 277: int i, value, r, flag;
  1872                           ;main.c: 279: flag = 1;
  1873  0103  3001               	movlw	1
  1874  0104  00CE               	movwf	toint@flag
  1875  0105  3000               	movlw	0
  1876  0106  00CF               	movwf	toint@flag+1
  1877                           
  1878                           ;main.c: 280: i = value = 0;
  1879  0107  01D0               	clrf	toint@value
  1880  0108  01D1               	clrf	toint@value+1
  1881  0109  01D2               	clrf	toint@i
  1882  010A  01D3               	clrf	toint@i+1
  1883                           
  1884                           ;main.c: 282: for( i = 0 ; i<strlen(c) ; ++i){
  1885  010B  01D2               	clrf	toint@i
  1886  010C  01D3               	clrf	toint@i+1
  1887  010D                     l2765:	
  1888  010D  0854               	movf	toint@c,w
  1889  010E  120A  158A  2459  120A  118A  	fcall	_strlen
  1890  0113  0871               	movf	?_strlen+1,w
  1891  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0116  0253               	subwf	toint@i+1,w
  1894  0117  1D03               	skipz
  1895  0118  291B               	goto	u2835
  1896  0119  0870               	movf	?_strlen,w
  1897  011A  0252               	subwf	toint@i,w
  1898  011B                     u2835:	
  1899  011B  1803               	btfsc	3,0
  1900  011C  295B               	goto	l2767
  1901                           
  1902                           ;main.c: 285: if( i==0 && c[i]=='-' ){
  1903  011D  0852               	movf	toint@i,w
  1904  011E  0453               	iorwf	toint@i+1,w
  1905  011F  1D03               	btfss	3,2
  1906  0120  2930               	goto	l2759
  1907  0121  0852               	movf	toint@i,w
  1908  0122  0754               	addwf	toint@c,w
  1909  0123  00FA               	movwf	??_toint
  1910  0124  087A               	movf	??_toint,w
  1911  0125  0084               	movwf	4
  1912  0126  302D               	movlw	45
  1913  0127  1383               	bcf	3,7	;select IRP bank0
  1914  0128  0600               	xorwf	0,w
  1915  0129  1D03               	btfss	3,2
  1916  012A  2930               	goto	l2759
  1917                           
  1918                           ;main.c: 286: flag = -1;
  1919  012B  30FF               	movlw	255
  1920  012C  00CE               	movwf	toint@flag
  1921  012D  30FF               	movlw	255
  1922  012E  00CF               	movwf	toint@flag+1
  1923                           
  1924                           ;main.c: 287: continue;
  1925  012F  2954               	goto	l2763
  1926  0130                     l2759:	
  1927                           
  1928                           ;main.c: 288: }
  1929                           ;main.c: 290: r = c[i] - '0';
  1930  0130  0852               	movf	toint@i,w
  1931  0131  0754               	addwf	toint@c,w
  1932  0132  00FA               	movwf	??_toint
  1933  0133  087A               	movf	??_toint,w
  1934  0134  0084               	movwf	4
  1935  0135  1383               	bcf	3,7	;select IRP bank0
  1936  0136  0800               	movf	0,w
  1937  0137  3ED0               	addlw	208
  1938  0138  00CC               	movwf	toint@r
  1939  0139  30FF               	movlw	255
  1940  013A  1803               	skipnc
  1941  013B  3000               	movlw	0
  1942  013C  00CD               	movwf	toint@r+1
  1943                           
  1944                           ;main.c: 291: value = value * 10 + r;
  1945  013D  0851               	movf	toint@value+1,w
  1946  013E  00F1               	movwf	___wmul@multiplier+1
  1947  013F  0850               	movf	toint@value,w
  1948  0140  00F0               	movwf	___wmul@multiplier
  1949  0141  300A               	movlw	10
  1950  0142  00F2               	movwf	___wmul@multiplicand
  1951  0143  3000               	movlw	0
  1952  0144  00F3               	movwf	___wmul@multiplicand+1
  1953  0145  120A  158A  23D2  120A  118A  	fcall	___wmul
  1954  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1955  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1956  014C  084C               	movf	toint@r,w
  1957  014D  0770               	addwf	?___wmul,w
  1958  014E  00D0               	movwf	toint@value
  1959  014F  084D               	movf	toint@r+1,w
  1960  0150  1803               	skipnc
  1961  0151  0A4D               	incf	toint@r+1,w
  1962  0152  0771               	addwf	?___wmul+1,w
  1963  0153  00D1               	movwf	toint@value+1
  1964  0154                     l2763:	
  1965  0154  3001               	movlw	1
  1966  0155  07D2               	addwf	toint@i,f
  1967  0156  1803               	skipnc
  1968  0157  0AD3               	incf	toint@i+1,f
  1969  0158  3000               	movlw	0
  1970  0159  07D3               	addwf	toint@i+1,f
  1971  015A  290D               	goto	l2765
  1972  015B                     l2767:	
  1973                           
  1974                           ;main.c: 292: }
  1975                           ;main.c: 294: value = value * flag;
  1976  015B  0851               	movf	toint@value+1,w
  1977  015C  00F1               	movwf	___wmul@multiplier+1
  1978  015D  0850               	movf	toint@value,w
  1979  015E  00F0               	movwf	___wmul@multiplier
  1980  015F  084F               	movf	toint@flag+1,w
  1981  0160  00F3               	movwf	___wmul@multiplicand+1
  1982  0161  084E               	movf	toint@flag,w
  1983  0162  00F2               	movwf	___wmul@multiplicand
  1984  0163  120A  158A  23D2   	fcall	___wmul
  1985  0166  0871               	movf	?___wmul+1,w
  1986  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1987  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1988  0169  00D1               	movwf	toint@value+1
  1989  016A  0870               	movf	?___wmul,w
  1990  016B  00D0               	movwf	toint@value
  1991                           
  1992                           ;main.c: 296: return value;
  1993  016C  0851               	movf	toint@value+1,w
  1994  016D  00F9               	movwf	?_toint+1
  1995  016E  0850               	movf	toint@value,w
  1996  016F  00F8               	movwf	?_toint
  1997  0170  0008               	return
  1998  0171                     __end_of_toint:	
  1999                           
  2000                           	psect	text2
  2001  0C59                     __ptext2:	
  2002 ;; *************** function _strlen *****************
  2003 ;; Defined at:
  2004 ;;		line 4 in file "/opt/microchip/xc8/v1.36/sources/common/strlen.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  s               1    wreg     PTR const unsigned char 
  2007 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  2008 ;;		 -> canvasX(3), 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  s               1    6[COMMON] PTR const unsigned char 
  2011 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  2012 ;;		 -> canvasX(3), 
  2013 ;;  cp              1    7[COMMON] PTR const unsigned char 
  2014 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  2015 ;;		 -> canvasX(3), 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  2    0[COMMON] unsigned int 
  2018 ;; Registers used:
  2019 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2025 ;;      Params:         2       0       0       0       0
  2026 ;;      Locals:         2       0       0       0       0
  2027 ;;      Temps:          4       0       0       0       0
  2028 ;;      Totals:         8       0       0       0       0
  2029 ;;Total ram usage:        8 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_toint
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           
  2039                           ;psect for function _strlen
  2040  0C59                     _strlen:	
  2041                           
  2042                           ;incstack = 0
  2043                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2044                           ;strlen@s stored from wreg
  2045  0C59  00F6               	movwf	strlen@s
  2046  0C5A  0876               	movf	strlen@s,w
  2047  0C5B  00F2               	movwf	??_strlen
  2048  0C5C  0872               	movf	??_strlen,w
  2049  0C5D  00F7               	movwf	strlen@cp
  2050  0C5E                     l2313:	
  2051  0C5E  0877               	movf	strlen@cp,w
  2052  0C5F  0084               	movwf	4
  2053  0C60  1383               	bcf	3,7	;select IRP bank0
  2054  0C61  0800               	movf	0,w
  2055  0C62  1903               	btfsc	3,2
  2056  0C63  2C69               	goto	l2315
  2057  0C64  3001               	movlw	1
  2058  0C65  00F2               	movwf	??_strlen
  2059  0C66  0872               	movf	??_strlen,w
  2060  0C67  07F7               	addwf	strlen@cp,f
  2061  0C68  2C5E               	goto	l2313
  2062  0C69                     l2315:	
  2063  0C69  0876               	movf	strlen@s,w
  2064  0C6A  00F2               	movwf	??_strlen
  2065  0C6B  3000               	movlw	0
  2066  0C6C  00F3               	movwf	??_strlen+1
  2067  0C6D  09F2               	comf	??_strlen,f
  2068  0C6E  09F3               	comf	??_strlen+1,f
  2069  0C6F  0AF2               	incf	??_strlen,f
  2070  0C70  1903               	skipnz
  2071  0C71  0AF3               	incf	??_strlen+1,f
  2072  0C72  0877               	movf	strlen@cp,w
  2073  0C73  00F4               	movwf	??_strlen+2
  2074  0C74  3000               	movlw	0
  2075  0C75  00F5               	movwf	??_strlen+3
  2076  0C76  0872               	movf	??_strlen,w
  2077  0C77  0774               	addwf	??_strlen+2,w
  2078  0C78  00F0               	movwf	?_strlen
  2079  0C79  0873               	movf	??_strlen+1,w
  2080  0C7A  1803               	skipnc
  2081  0C7B  0A73               	incf	??_strlen+1,w
  2082  0C7C  0775               	addwf	??_strlen+3,w
  2083  0C7D  00F1               	movwf	?_strlen+1
  2084  0C7E  0008               	return
  2085  0C7F                     __end_of_strlen:	
  2086                           
  2087                           	psect	text3
  2088  0CA7                     __ptext3:	
  2089 ;; *************** function _strcmp *****************
  2090 ;; Defined at:
  2091 ;;		line 33 in file "/opt/microchip/xc8/v1.36/sources/common/strcmp.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  s1              1    wreg     PTR const unsigned char 
  2094 ;;		 -> coords(9), 
  2095 ;;  s2              1    0[COMMON] PTR const unsigned char 
  2096 ;;		 -> STR_3(4), STR_2(3), 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  s1              1    5[COMMON] PTR const unsigned char 
  2099 ;;		 -> coords(9), 
  2100 ;;  r               1    4[COMMON] char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  2    0[COMMON] int 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         2       0       0       0       0
  2111 ;;      Locals:         2       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0
  2113 ;;      Totals:         6       0       0       0       0
  2114 ;;Total ram usage:        6 bytes
  2115 ;; Hardware stack levels used:    2
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _strcmp
  2125  0CA7                     _strcmp:	
  2126                           
  2127                           ;incstack = 0
  2128                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2129                           ;strcmp@s1 stored from wreg
  2130  0CA7  00F5               	movwf	strcmp@s1
  2131  0CA8  2CB1               	goto	l2779
  2132  0CA9                     l2775:	
  2133  0CA9  3001               	movlw	1
  2134  0CAA  00F2               	movwf	??_strcmp
  2135  0CAB  0872               	movf	??_strcmp,w
  2136  0CAC  07F5               	addwf	strcmp@s1,f
  2137  0CAD  3001               	movlw	1
  2138  0CAE  00F2               	movwf	??_strcmp
  2139  0CAF  0872               	movf	??_strcmp,w
  2140  0CB0  07F0               	addwf	strcmp@s2,f
  2141  0CB1                     l2779:	
  2142  0CB1  0875               	movf	strcmp@s1,w
  2143  0CB2  0084               	movwf	4
  2144  0CB3  1383               	bcf	3,7	;select IRP bank0
  2145  0CB4  0800               	movf	0,w
  2146  0CB5  00F2               	movwf	??_strcmp
  2147  0CB6  0870               	movf	strcmp@s2,w
  2148  0CB7  0084               	movwf	4
  2149  0CB8  120A  158A  200A  120A  158A  	fcall	stringdir
  2150  0CBD  3AFF               	xorlw	255
  2151  0CBE  3E01               	addlw	1
  2152  0CBF  0772               	addwf	??_strcmp,w
  2153  0CC0  00F3               	movwf	??_strcmp+1
  2154  0CC1  0873               	movf	??_strcmp+1,w
  2155  0CC2  00F4               	movwf	strcmp@r
  2156  0CC3  0874               	movf	strcmp@r,w
  2157  0CC4  1D03               	btfss	3,2
  2158  0CC5  2CCB               	goto	l2783
  2159  0CC6  0875               	movf	strcmp@s1,w
  2160  0CC7  0084               	movwf	4
  2161  0CC8  0800               	movf	0,w
  2162  0CC9  1D03               	btfss	3,2
  2163  0CCA  2CA9               	goto	l2775
  2164  0CCB                     l2783:	
  2165  0CCB  0874               	movf	strcmp@r,w
  2166  0CCC  00F0               	movwf	?_strcmp
  2167  0CCD  01F1               	clrf	?_strcmp+1
  2168  0CCE  1BF0               	btfsc	?_strcmp,7
  2169  0CCF  03F1               	decf	?_strcmp+1,f
  2170  0CD0  0008               	return
  2171  0CD1                     __end_of_strcmp:	
  2172                           
  2173                           	psect	text4
  2174  03F8                     __ptext4:	
  2175 ;; *************** function _motorZInit *****************
  2176 ;; Defined at:
  2177 ;;		line 458 in file "main.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  j               2    6[BANK0 ] int 
  2182 ;;  k               2    4[BANK0 ] int 
  2183 ;;  j               2    2[BANK0 ] int 
  2184 ;;  i               2    0[BANK0 ] int 
  2185 ;;  status          2   10[BANK0 ] int 
  2186 ;;  m               2    8[BANK0 ] int 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  2    8[COMMON] int 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0, pclath, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         2       0       0       0       0
  2197 ;;      Locals:         0      12       0       0       0
  2198 ;;      Temps:          3       0       0       0       0
  2199 ;;      Totals:         5      12       0       0       0
  2200 ;;Total ram usage:       17 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    2
  2203 ;; This function calls:
  2204 ;;		_limitz
  2205 ;;		_stepMotorZ
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _motorZInit
  2213  03F8                     _motorZInit:	
  2214                           
  2215                           ;main.c: 459: int m = 0;
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _motorZInit: [wreg+status,2+status,0+pclath+cstack]
  2219  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2220  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2221  03FA  01D4               	clrf	motorZInit@m
  2222  03FB  01D5               	clrf	motorZInit@m+1
  2223                           
  2224                           ;main.c: 460: int status = 0;
  2225  03FC  01D6               	clrf	motorZInit@status
  2226  03FD  01D7               	clrf	motorZInit@status+1
  2227                           
  2228                           ;main.c: 461: for(int i = 0; status != 1; i++){
  2229  03FE  01CC               	clrf	motorZInit@i
  2230  03FF  01CD               	clrf	motorZInit@i+1
  2231  0400  0356               	decf	motorZInit@status,w
  2232  0401  0457               	iorwf	motorZInit@status+1,w
  2233  0402  1903               	btfsc	3,2
  2234  0403  2CF2               	goto	l2727
  2235  0404                     l483:	
  2236                           
  2237                           ;main.c: 462: motorZ.dir = 1;
  2238  0404  01AA               	clrf	_motorZ
  2239  0405  0AAA               	incf	_motorZ,f
  2240                           
  2241                           ;main.c: 464: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.speed);
  2242  0406  082B               	movf	_motorZ+1,w
  2243  0407  00FA               	movwf	??_motorZInit
  2244  0408  087A               	movf	??_motorZInit,w
  2245  0409  00F4               	movwf	stepMotorZ@speed
  2246  040A  082B               	movf	_motorZ+1,w
  2247  040B  00FB               	movwf	??_motorZInit+1
  2248  040C  01FC               	clrf	??_motorZInit+2
  2249  040D  087B               	movf	??_motorZInit+1,w
  2250  040E  00F5               	movwf	stepMotorZ@mod
  2251  040F  087C               	movf	??_motorZInit+2,w
  2252  0410  00F6               	movwf	stepMotorZ@mod+1
  2253  0411  082A               	movf	_motorZ,w
  2254  0412  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  2255                           
  2256                           ;main.c: 466: if(limitz() == 1){
  2257  0417  120A  158A  2397  120A  118A  	fcall	_limitz
  2258  041C  0370               	decf	?_limitz,w
  2259  041D  0471               	iorwf	?_limitz+1,w
  2260  041E  1D03               	btfss	3,2
  2261  041F  2C96               	goto	l2707
  2262                           
  2263                           ;main.c: 468: for(int j = 0; limitZ1 != 1; j++){
  2264  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2265  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0422  01CE               	clrf	motorZInit@j
  2267  0423  01CF               	clrf	motorZInit@j+1
  2268  0424                     l2691:	
  2269  0424  034A               	decf	_limitZ1,w
  2270  0425  1903               	btfsc	3,2
  2271  0426  2C54               	goto	l2693
  2272                           
  2273                           ;main.c: 469: motorZ.dir = 0;
  2274  0427  01AA               	clrf	_motorZ
  2275                           
  2276                           ;main.c: 470: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  2277  0428  082B               	movf	_motorZ+1,w
  2278  0429  00FA               	movwf	??_motorZInit
  2279  042A  087A               	movf	??_motorZInit,w
  2280  042B  00F4               	movwf	stepMotorZ@speed
  2281  042C  082C               	movf	_motorZ+2,w
  2282  042D  00FB               	movwf	??_motorZInit+1
  2283  042E  01FC               	clrf	??_motorZInit+2
  2284  042F  087B               	movf	??_motorZInit+1,w
  2285  0430  00F5               	movwf	stepMotorZ@mod
  2286  0431  087C               	movf	??_motorZInit+2,w
  2287  0432  00F6               	movwf	stepMotorZ@mod+1
  2288  0433  082A               	movf	_motorZ,w
  2289  0434  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  2290                           
  2291                           ;main.c: 471: if(limitz() == 2){
  2292  0439  120A  158A  2397  120A  118A  	fcall	_limitz
  2293  043E  3002               	movlw	2
  2294  043F  0670               	xorwf	?_limitz,w
  2295  0440  0471               	iorwf	?_limitz+1,w
  2296  0441  1D03               	btfss	3,2
  2297  0442  2C4B               	goto	l488
  2298                           
  2299                           ;main.c: 472: limitZ1 = 1;
  2300  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0445  01CA               	clrf	_limitZ1
  2303  0446  0ACA               	incf	_limitZ1,f
  2304                           
  2305                           ;main.c: 473: m = j;
  2306  0447  084F               	movf	motorZInit@j+1,w
  2307  0448  00D5               	movwf	motorZInit@m+1
  2308  0449  084E               	movf	motorZInit@j,w
  2309  044A  00D4               	movwf	motorZInit@m
  2310  044B                     l488:	
  2311  044B  3001               	movlw	1
  2312  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2313  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2314  044E  07CE               	addwf	motorZInit@j,f
  2315  044F  1803               	skipnc
  2316  0450  0ACF               	incf	motorZInit@j+1,f
  2317  0451  3000               	movlw	0
  2318  0452  07CF               	addwf	motorZInit@j+1,f
  2319  0453  2C24               	goto	l2691
  2320  0454                     l2693:	
  2321                           
  2322                           ;main.c: 474: }
  2323                           ;main.c: 475: }
  2324                           ;main.c: 476: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2325  0454  300B               	movlw	11
  2326  0455  00FC               	movwf	??_motorZInit+2
  2327  0456  3026               	movlw	38
  2328  0457  00FB               	movwf	??_motorZInit+1
  2329  0458  3066               	movlw	102
  2330  0459  00FA               	movwf	??_motorZInit
  2331  045A                     u3387:	
  2332  045A  0BFA               	decfsz	??_motorZInit,f
  2333  045B  2C5A               	goto	u3387
  2334  045C  0BFB               	decfsz	??_motorZInit+1,f
  2335  045D  2C5A               	goto	u3387
  2336  045E  0BFC               	decfsz	??_motorZInit+2,f
  2337  045F  2C5A               	goto	u3387
  2338  0460  2C61               	nop2
  2339                           
  2340                           ;main.c: 477: for(int k = 0; k<m; k++){
  2341  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0463  01D0               	clrf	motorZInit@k
  2344  0464  01D1               	clrf	motorZInit@k+1
  2345  0465                     l2701:	
  2346  0465  0851               	movf	motorZInit@k+1,w
  2347  0466  3A80               	xorlw	128
  2348  0467  00FA               	movwf	??_motorZInit
  2349  0468  0855               	movf	motorZInit@m+1,w
  2350  0469  3A80               	xorlw	128
  2351  046A  027A               	subwf	??_motorZInit,w
  2352  046B  1D03               	skipz
  2353  046C  2C6F               	goto	u2745
  2354  046D  0854               	movf	motorZInit@m,w
  2355  046E  0250               	subwf	motorZInit@k,w
  2356  046F                     u2745:	
  2357  046F  1803               	btfsc	3,0
  2358  0470  2C8F               	goto	l2703
  2359                           
  2360                           ;main.c: 478: motorZ.dir = 1;
  2361  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2363  0473  01AA               	clrf	_motorZ
  2364  0474  0AAA               	incf	_motorZ,f
  2365                           
  2366                           ;main.c: 479: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  2367  0475  082B               	movf	_motorZ+1,w
  2368  0476  00FA               	movwf	??_motorZInit
  2369  0477  087A               	movf	??_motorZInit,w
  2370  0478  00F4               	movwf	stepMotorZ@speed
  2371  0479  082C               	movf	_motorZ+2,w
  2372  047A  00FB               	movwf	??_motorZInit+1
  2373  047B  01FC               	clrf	??_motorZInit+2
  2374  047C  087B               	movf	??_motorZInit+1,w
  2375  047D  00F5               	movwf	stepMotorZ@mod
  2376  047E  087C               	movf	??_motorZInit+2,w
  2377  047F  00F6               	movwf	stepMotorZ@mod+1
  2378  0480  082A               	movf	_motorZ,w
  2379  0481  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  2380  0486  3001               	movlw	1
  2381  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2383  0489  07D0               	addwf	motorZInit@k,f
  2384  048A  1803               	skipnc
  2385  048B  0AD1               	incf	motorZInit@k+1,f
  2386  048C  3000               	movlw	0
  2387  048D  07D1               	addwf	motorZInit@k+1,f
  2388  048E  2C65               	goto	l2701
  2389  048F                     l2703:	
  2390                           
  2391                           ;main.c: 480: }
  2392                           ;main.c: 481: motorZ.dir = 0;
  2393  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2394  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2395  0491  01AA               	clrf	_motorZ
  2396                           
  2397                           ;main.c: 482: status = 1;
  2398  0492  3001               	movlw	1
  2399  0493  00D6               	movwf	motorZInit@status
  2400  0494  3000               	movlw	0
  2401  0495  00D7               	movwf	motorZInit@status+1
  2402  0496                     l2707:	
  2403                           
  2404                           ;main.c: 484: }
  2405                           ;main.c: 486: if(limitz() == 2){
  2406  0496  120A  158A  2397  120A  118A  	fcall	_limitz
  2407  049B  3002               	movlw	2
  2408  049C  0670               	xorwf	?_limitz,w
  2409  049D  0471               	iorwf	?_limitz+1,w
  2410  049E  1D03               	btfss	3,2
  2411  049F  2CE6               	goto	l493
  2412                           
  2413                           ;main.c: 487: for(int j = 0; limitZ0 != 1; j++){
  2414  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  2415  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  2416  04A2  01D2               	clrf	motorZInit@j_575
  2417  04A3  01D3               	clrf	motorZInit@j_575+1
  2418  04A4                     l2721:	
  2419  04A4  0349               	decf	_limitZ0,w
  2420  04A5  1903               	btfsc	3,2
  2421  04A6  2CD3               	goto	l497
  2422                           
  2423                           ;main.c: 488: motorZ.dir = 0;
  2424  04A7  01AA               	clrf	_motorZ
  2425                           
  2426                           ;main.c: 489: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  2427  04A8  082B               	movf	_motorZ+1,w
  2428  04A9  00FA               	movwf	??_motorZInit
  2429  04AA  087A               	movf	??_motorZInit,w
  2430  04AB  00F4               	movwf	stepMotorZ@speed
  2431  04AC  082C               	movf	_motorZ+2,w
  2432  04AD  00FB               	movwf	??_motorZInit+1
  2433  04AE  01FC               	clrf	??_motorZInit+2
  2434  04AF  087B               	movf	??_motorZInit+1,w
  2435  04B0  00F5               	movwf	stepMotorZ@mod
  2436  04B1  087C               	movf	??_motorZInit+2,w
  2437  04B2  00F6               	movwf	stepMotorZ@mod+1
  2438  04B3  082A               	movf	_motorZ,w
  2439  04B4  120A  158A  2570  120A  118A  	fcall	_stepMotorZ
  2440                           
  2441                           ;main.c: 490: if(limitz() == 1){
  2442  04B9  120A  158A  2397  120A  118A  	fcall	_limitz
  2443  04BE  0370               	decf	?_limitz,w
  2444  04BF  0471               	iorwf	?_limitz+1,w
  2445  04C0  1D03               	btfss	3,2
  2446  04C1  2CCA               	goto	l496
  2447                           
  2448                           ;main.c: 491: limitZ0 = 1;
  2449  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2450  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2451  04C4  01C9               	clrf	_limitZ0
  2452  04C5  0AC9               	incf	_limitZ0,f
  2453                           
  2454                           ;main.c: 492: m = j;
  2455  04C6  0853               	movf	motorZInit@j_575+1,w
  2456  04C7  00D5               	movwf	motorZInit@m+1
  2457  04C8  0852               	movf	motorZInit@j_575,w
  2458  04C9  00D4               	movwf	motorZInit@m
  2459  04CA                     l496:	
  2460  04CA  3001               	movlw	1
  2461  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2462  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2463  04CD  07D2               	addwf	motorZInit@j_575,f
  2464  04CE  1803               	skipnc
  2465  04CF  0AD3               	incf	motorZInit@j_575+1,f
  2466  04D0  3000               	movlw	0
  2467  04D1  07D3               	addwf	motorZInit@j_575+1,f
  2468  04D2  2CA4               	goto	l2721
  2469  04D3                     l497:	
  2470                           
  2471                           ;main.c: 493: }
  2472                           ;main.c: 494: }
  2473                           ;main.c: 495: motorZ.dir = 1;
  2474  04D3  01AA               	clrf	_motorZ
  2475  04D4  0AAA               	incf	_motorZ,f
  2476                           
  2477                           ;main.c: 496: status = 1;
  2478  04D5  3001               	movlw	1
  2479  04D6  00D6               	movwf	motorZInit@status
  2480  04D7  3000               	movlw	0
  2481  04D8  00D7               	movwf	motorZInit@status+1
  2482                           
  2483                           ;main.c: 497: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2484  04D9  300B               	movlw	11
  2485  04DA  00FC               	movwf	??_motorZInit+2
  2486  04DB  3026               	movlw	38
  2487  04DC  00FB               	movwf	??_motorZInit+1
  2488  04DD  3066               	movlw	102
  2489  04DE  00FA               	movwf	??_motorZInit
  2490  04DF                     u3397:	
  2491  04DF  0BFA               	decfsz	??_motorZInit,f
  2492  04E0  2CDF               	goto	u3397
  2493  04E1  0BFB               	decfsz	??_motorZInit+1,f
  2494  04E2  2CDF               	goto	u3397
  2495  04E3  0BFC               	decfsz	??_motorZInit+2,f
  2496  04E4  2CDF               	goto	u3397
  2497  04E5  2CE6               	nop2
  2498  04E6                     l493:	
  2499  04E6  3001               	movlw	1
  2500  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2501  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2502  04E9  07CC               	addwf	motorZInit@i,f
  2503  04EA  1803               	skipnc
  2504  04EB  0ACD               	incf	motorZInit@i+1,f
  2505  04EC  3000               	movlw	0
  2506  04ED  07CD               	addwf	motorZInit@i+1,f
  2507  04EE  0356               	decf	motorZInit@status,w
  2508  04EF  0457               	iorwf	motorZInit@status+1,w
  2509  04F0  1D03               	btfss	3,2
  2510  04F1  2C04               	goto	l483
  2511  04F2                     l2727:	
  2512                           
  2513                           ;main.c: 498: }
  2514                           ;main.c: 499: }
  2515                           ;main.c: 500: return m;
  2516  04F2  0855               	movf	motorZInit@m+1,w
  2517  04F3  00F9               	movwf	?_motorZInit+1
  2518  04F4  0854               	movf	motorZInit@m,w
  2519  04F5  00F8               	movwf	?_motorZInit
  2520  04F6  0008               	return
  2521  04F7                     __end_of_motorZInit:	
  2522                           
  2523                           	psect	text5
  2524  0D70                     __ptext5:	
  2525 ;; *************** function _stepMotorZ *****************
  2526 ;; Defined at:
  2527 ;;		line 202 in file "stepMotor.h"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  dir             1    wreg     unsigned char 
  2530 ;;  speed           1    4[COMMON] unsigned char 
  2531 ;;  mod             2    5[COMMON] int 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  dir             1    7[COMMON] unsigned char 
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, status,2, status,0, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2543 ;;      Params:         3       0       0       0       0
  2544 ;;      Locals:         1       0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0
  2546 ;;      Totals:         4       0       0       0       0
  2547 ;;Total ram usage:        4 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    1
  2550 ;; This function calls:
  2551 ;;		_modM3
  2552 ;;		_ms_delay
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;;		_motorZInit
  2556 ;;		_reset
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _stepMotorZ
  2562  0D70                     _stepMotorZ:	
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _stepMotorZ: [wreg+status,2+status,0+pclath+cstack]
  2566                           ;stepMotorZ@dir stored from wreg
  2567  0D70  00F7               	movwf	stepMotorZ@dir
  2568                           
  2569                           ;stepMotor.h: 203: modM3(mod);
  2570  0D71  0876               	movf	stepMotorZ@mod+1,w
  2571  0D72  00F1               	movwf	modM3@m+1
  2572  0D73  0875               	movf	stepMotorZ@mod,w
  2573  0D74  00F0               	movwf	modM3@m
  2574  0D75  120A  158A  2689  120A  158A  	fcall	_modM3
  2575                           
  2576                           ;stepMotor.h: 205: if (dir == 1) {
  2577  0D7A  0377               	decf	stepMotorZ@dir,w
  2578  0D7B  1D03               	btfss	3,2
  2579  0D7C  2D90               	goto	l2253
  2580                           
  2581                           ;stepMotor.h: 207: PORTCbits.RC2 = 1;
  2582  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  2584  0D7F  1507               	bsf	7,2	;volatile
  2585                           
  2586                           ;stepMotor.h: 208: PORTCbits.RC1 = 1;
  2587  0D80  1487               	bsf	7,1	;volatile
  2588                           
  2589                           ;stepMotor.h: 209: ms_delay(speed);
  2590  0D81  0874               	movf	stepMotorZ@speed,w
  2591  0D82  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  2592                           
  2593                           ;stepMotor.h: 211: PORTCbits.RC2= 0;
  2594  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0D89  1107               	bcf	7,2	;volatile
  2597                           
  2598                           ;stepMotor.h: 212: PORTCbits.RC1 = 1;
  2599  0D8A  1487               	bsf	7,1	;volatile
  2600                           
  2601                           ;stepMotor.h: 213: ms_delay(speed);
  2602  0D8B  0874               	movf	stepMotorZ@speed,w
  2603  0D8C  120A  158A  23BE   	fcall	_ms_delay
  2604                           
  2605                           ;stepMotor.h: 214: }
  2606  0D8F  0008               	return
  2607  0D90                     l2253:	
  2608                           
  2609                           ;stepMotor.h: 215: else if(dir == 0){
  2610  0D90  0877               	movf	stepMotorZ@dir,w
  2611  0D91  1D03               	btfss	3,2
  2612  0D92  0008               	return
  2613                           
  2614                           ;stepMotor.h: 217: PORTCbits.RC2 = 1;
  2615  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  2616  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  2617  0D95  1507               	bsf	7,2	;volatile
  2618                           
  2619                           ;stepMotor.h: 218: PORTCbits.RC1 = 0;
  2620  0D96  1087               	bcf	7,1	;volatile
  2621                           
  2622                           ;stepMotor.h: 219: ms_delay(speed);
  2623  0D97  0874               	movf	stepMotorZ@speed,w
  2624  0D98  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  2625                           
  2626                           ;stepMotor.h: 221: PORTCbits.RC2 = 0;
  2627  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0D9F  1107               	bcf	7,2	;volatile
  2630                           
  2631                           ;stepMotor.h: 222: PORTCbits.RC1 = 0;
  2632  0DA0  1087               	bcf	7,1	;volatile
  2633                           
  2634                           ;stepMotor.h: 223: ms_delay(speed);
  2635  0DA1  0874               	movf	stepMotorZ@speed,w
  2636  0DA2  120A  158A  23BE   	fcall	_ms_delay
  2637  0DA5  0008               	return
  2638  0DA6                     __end_of_stepMotorZ:	
  2639                           
  2640                           	psect	text6
  2641  0E89                     __ptext6:	
  2642 ;; *************** function _modM3 *****************
  2643 ;; Defined at:
  2644 ;;		line 95 in file "motor_mode.h"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  m               2    0[COMMON] int 
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2, status,0
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2658 ;;      Params:         2       0       0       0       0
  2659 ;;      Locals:         0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0
  2661 ;;      Totals:         2       0       0       0       0
  2662 ;;Total ram usage:        2 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_stepMotorZ
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function _modM3
  2673  0E89                     _modM3:	
  2674                           
  2675                           ;motor_mode.h: 97: if(m == 1){
  2676                           
  2677                           ;incstack = 0
  2678                           ; Regs used in _modM3: [wreg+status,2+status,0]
  2679  0E89  0370               	decf	modM3@m,w
  2680  0E8A  0471               	iorwf	modM3@m+1,w
  2681  0E8B  1D03               	btfss	3,2
  2682  0E8C  2E92               	goto	l2149
  2683                           
  2684                           ;motor_mode.h: 98: PORTDbits.RD1 = 0;
  2685  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  2686  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  2687  0E8F  1088               	bcf	8,1	;volatile
  2688                           
  2689                           ;motor_mode.h: 99: PORTDbits.RD0 = 0;
  2690  0E90  1008               	bcf	8,0	;volatile
  2691                           
  2692                           ;motor_mode.h: 100: PORTCbits.RC3 = 0;
  2693  0E91  1187               	bcf	7,3	;volatile
  2694  0E92                     l2149:	
  2695                           
  2696                           ;motor_mode.h: 101: }
  2697                           ;motor_mode.h: 103: if(m == 2){
  2698  0E92  3002               	movlw	2
  2699  0E93  0670               	xorwf	modM3@m,w
  2700  0E94  0471               	iorwf	modM3@m+1,w
  2701  0E95  1D03               	btfss	3,2
  2702  0E96  2E9C               	goto	l2153
  2703                           
  2704                           ;motor_mode.h: 104: PORTDbits.RD1 = 1;
  2705  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  2707  0E99  1488               	bsf	8,1	;volatile
  2708                           
  2709                           ;motor_mode.h: 105: PORTDbits.RD0 = 0;
  2710  0E9A  1008               	bcf	8,0	;volatile
  2711                           
  2712                           ;motor_mode.h: 106: PORTCbits.RC3 = 0;
  2713  0E9B  1187               	bcf	7,3	;volatile
  2714  0E9C                     l2153:	
  2715                           
  2716                           ;motor_mode.h: 107: }
  2717                           ;motor_mode.h: 108: if(m == 3){
  2718  0E9C  3003               	movlw	3
  2719  0E9D  0670               	xorwf	modM3@m,w
  2720  0E9E  0471               	iorwf	modM3@m+1,w
  2721  0E9F  1D03               	btfss	3,2
  2722  0EA0  2EA6               	goto	l2157
  2723                           
  2724                           ;motor_mode.h: 109: PORTDbits.RD1 = 0;
  2725  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0EA3  1088               	bcf	8,1	;volatile
  2728                           
  2729                           ;motor_mode.h: 110: PORTDbits.RD0 = 1;
  2730  0EA4  1408               	bsf	8,0	;volatile
  2731                           
  2732                           ;motor_mode.h: 111: PORTCbits.RC3 = 0;
  2733  0EA5  1187               	bcf	7,3	;volatile
  2734  0EA6                     l2157:	
  2735                           
  2736                           ;motor_mode.h: 112: }
  2737                           ;motor_mode.h: 113: if(m == 4){
  2738  0EA6  3004               	movlw	4
  2739  0EA7  0670               	xorwf	modM3@m,w
  2740  0EA8  0471               	iorwf	modM3@m+1,w
  2741  0EA9  1D03               	btfss	3,2
  2742  0EAA  2EB0               	goto	l2161
  2743                           
  2744                           ;motor_mode.h: 114: PORTDbits.RD1 = 1;
  2745  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0EAD  1488               	bsf	8,1	;volatile
  2748                           
  2749                           ;motor_mode.h: 115: PORTDbits.RD0 = 1;
  2750  0EAE  1408               	bsf	8,0	;volatile
  2751                           
  2752                           ;motor_mode.h: 116: PORTCbits.RC3 = 0;
  2753  0EAF  1187               	bcf	7,3	;volatile
  2754  0EB0                     l2161:	
  2755                           
  2756                           ;motor_mode.h: 117: }
  2757                           ;motor_mode.h: 118: if(m == 5){
  2758  0EB0  3005               	movlw	5
  2759  0EB1  0670               	xorwf	modM3@m,w
  2760  0EB2  0471               	iorwf	modM3@m+1,w
  2761  0EB3  1D03               	btfss	3,2
  2762  0EB4  2EBA               	goto	l2165
  2763                           
  2764                           ;motor_mode.h: 119: PORTDbits.RD1 = 0;
  2765  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  2766  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  2767  0EB7  1088               	bcf	8,1	;volatile
  2768                           
  2769                           ;motor_mode.h: 120: PORTDbits.RD0 = 0;
  2770  0EB8  1008               	bcf	8,0	;volatile
  2771                           
  2772                           ;motor_mode.h: 121: PORTCbits.RC3 = 1;
  2773  0EB9  1587               	bsf	7,3	;volatile
  2774  0EBA                     l2165:	
  2775                           
  2776                           ;motor_mode.h: 122: }
  2777                           ;motor_mode.h: 123: if(m == 6){
  2778  0EBA  3006               	movlw	6
  2779  0EBB  0670               	xorwf	modM3@m,w
  2780  0EBC  0471               	iorwf	modM3@m+1,w
  2781  0EBD  1D03               	btfss	3,2
  2782  0EBE  2EC4               	goto	l2169
  2783                           
  2784                           ;motor_mode.h: 124: PORTDbits.RD1 = 1;
  2785  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  2787  0EC1  1488               	bsf	8,1	;volatile
  2788                           
  2789                           ;motor_mode.h: 125: PORTDbits.RD0 = 0;
  2790  0EC2  1008               	bcf	8,0	;volatile
  2791                           
  2792                           ;motor_mode.h: 126: PORTCbits.RC3 = 1;
  2793  0EC3  1587               	bsf	7,3	;volatile
  2794  0EC4                     l2169:	
  2795                           
  2796                           ;motor_mode.h: 127: }
  2797                           ;motor_mode.h: 128: if(m == 7){
  2798  0EC4  3007               	movlw	7
  2799  0EC5  0670               	xorwf	modM3@m,w
  2800  0EC6  0471               	iorwf	modM3@m+1,w
  2801  0EC7  1D03               	btfss	3,2
  2802  0EC8  2ECE               	goto	l2173
  2803                           
  2804                           ;motor_mode.h: 129: PORTDbits.RD1 = 0;
  2805  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  2806  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  2807  0ECB  1088               	bcf	8,1	;volatile
  2808                           
  2809                           ;motor_mode.h: 130: PORTDbits.RD0 = 1;
  2810  0ECC  1408               	bsf	8,0	;volatile
  2811                           
  2812                           ;motor_mode.h: 131: PORTCbits.RC3 = 1;
  2813  0ECD  1587               	bsf	7,3	;volatile
  2814  0ECE                     l2173:	
  2815                           
  2816                           ;motor_mode.h: 132: }
  2817                           ;motor_mode.h: 133: if(m == 8){
  2818  0ECE  3008               	movlw	8
  2819  0ECF  0670               	xorwf	modM3@m,w
  2820  0ED0  0471               	iorwf	modM3@m+1,w
  2821  0ED1  1D03               	btfss	3,2
  2822  0ED2  0008               	return
  2823                           
  2824                           ;motor_mode.h: 134: PORTDbits.RD1 = 1;
  2825  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  2827  0ED5  1488               	bsf	8,1	;volatile
  2828                           
  2829                           ;motor_mode.h: 135: PORTDbits.RD0 = 1;
  2830  0ED6  1408               	bsf	8,0	;volatile
  2831                           
  2832                           ;motor_mode.h: 136: PORTCbits.RC3 = 1;
  2833  0ED7  1587               	bsf	7,3	;volatile
  2834  0ED8  0008               	return
  2835  0ED9                     __end_of_modM3:	
  2836                           
  2837                           	psect	text7
  2838  02F9                     __ptext7:	
  2839 ;; *************** function _motorYInit *****************
  2840 ;; Defined at:
  2841 ;;		line 416 in file "main.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  j               2    6[BANK0 ] int 
  2846 ;;  k               2    4[BANK0 ] int 
  2847 ;;  j               2    2[BANK0 ] int 
  2848 ;;  i               2    0[BANK0 ] int 
  2849 ;;  status          2   10[BANK0 ] int 
  2850 ;;  m               2    8[BANK0 ] int 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  2    8[COMMON] int 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2860 ;;      Params:         2       0       0       0       0
  2861 ;;      Locals:         0      12       0       0       0
  2862 ;;      Temps:          3       0       0       0       0
  2863 ;;      Totals:         5      12       0       0       0
  2864 ;;Total ram usage:       17 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    2
  2867 ;; This function calls:
  2868 ;;		_limitz
  2869 ;;		_stepMotorY
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           
  2876                           ;psect for function _motorYInit
  2877  02F9                     _motorYInit:	
  2878                           
  2879                           ;main.c: 417: int m = 0;
  2880                           
  2881                           ;incstack = 0
  2882                           ; Regs used in _motorYInit: [wreg+status,2+status,0+pclath+cstack]
  2883  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2884  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2885  02FB  01D4               	clrf	motorYInit@m
  2886  02FC  01D5               	clrf	motorYInit@m+1
  2887                           
  2888                           ;main.c: 418: int status = 0;
  2889  02FD  01D6               	clrf	motorYInit@status
  2890  02FE  01D7               	clrf	motorYInit@status+1
  2891                           
  2892                           ;main.c: 419: for(int i = 0; status != 1; i++){
  2893  02FF  01CC               	clrf	motorYInit@i
  2894  0300  01CD               	clrf	motorYInit@i+1
  2895  0301  0356               	decf	motorYInit@status,w
  2896  0302  0457               	iorwf	motorYInit@status+1,w
  2897  0303  1903               	btfsc	3,2
  2898  0304  2BF3               	goto	l2667
  2899  0305                     l465:	
  2900                           
  2901                           ;main.c: 420: motorY.dir = 1;
  2902  0305  01A5               	clrf	_motorY
  2903  0306  0AA5               	incf	_motorY,f
  2904                           
  2905                           ;main.c: 421: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  2906  0307  0826               	movf	_motorY+1,w
  2907  0308  00FA               	movwf	??_motorYInit
  2908  0309  087A               	movf	??_motorYInit,w
  2909  030A  00F4               	movwf	stepMotorY@speed
  2910  030B  0827               	movf	_motorY+2,w
  2911  030C  00FB               	movwf	??_motorYInit+1
  2912  030D  01FC               	clrf	??_motorYInit+2
  2913  030E  087B               	movf	??_motorYInit+1,w
  2914  030F  00F5               	movwf	stepMotorY@mod
  2915  0310  087C               	movf	??_motorYInit+2,w
  2916  0311  00F6               	movwf	stepMotorY@mod+1
  2917  0312  0825               	movf	_motorY,w
  2918  0313  120A  158A  253A  120A  118A  	fcall	_stepMotorY
  2919                           
  2920                           ;main.c: 423: if(limitz() == 1){
  2921  0318  120A  158A  2397  120A  118A  	fcall	_limitz
  2922  031D  0370               	decf	?_limitz,w
  2923  031E  0471               	iorwf	?_limitz+1,w
  2924  031F  1D03               	btfss	3,2
  2925  0320  2B97               	goto	l2647
  2926                           
  2927                           ;main.c: 424: for(int j = 0; limitY1 != 1; j++){
  2928  0321  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0322  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0323  01CE               	clrf	motorYInit@j
  2931  0324  01CF               	clrf	motorYInit@j+1
  2932  0325                     l2631:	
  2933  0325  0348               	decf	_limitY1,w
  2934  0326  1903               	btfsc	3,2
  2935  0327  2B55               	goto	l2633
  2936                           
  2937                           ;main.c: 425: motorY.dir = 0;
  2938  0328  01A5               	clrf	_motorY
  2939                           
  2940                           ;main.c: 426: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  2941  0329  0826               	movf	_motorY+1,w
  2942  032A  00FA               	movwf	??_motorYInit
  2943  032B  087A               	movf	??_motorYInit,w
  2944  032C  00F4               	movwf	stepMotorY@speed
  2945  032D  0827               	movf	_motorY+2,w
  2946  032E  00FB               	movwf	??_motorYInit+1
  2947  032F  01FC               	clrf	??_motorYInit+2
  2948  0330  087B               	movf	??_motorYInit+1,w
  2949  0331  00F5               	movwf	stepMotorY@mod
  2950  0332  087C               	movf	??_motorYInit+2,w
  2951  0333  00F6               	movwf	stepMotorY@mod+1
  2952  0334  0825               	movf	_motorY,w
  2953  0335  120A  158A  253A  120A  118A  	fcall	_stepMotorY
  2954                           
  2955                           ;main.c: 427: if(limitz() == 2){
  2956  033A  120A  158A  2397  120A  118A  	fcall	_limitz
  2957  033F  3002               	movlw	2
  2958  0340  0670               	xorwf	?_limitz,w
  2959  0341  0471               	iorwf	?_limitz+1,w
  2960  0342  1D03               	btfss	3,2
  2961  0343  2B4C               	goto	l470
  2962                           
  2963                           ;main.c: 428: limitY1 = 1;
  2964  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0346  01C8               	clrf	_limitY1
  2967  0347  0AC8               	incf	_limitY1,f
  2968                           
  2969                           ;main.c: 429: m = j;
  2970  0348  084F               	movf	motorYInit@j+1,w
  2971  0349  00D5               	movwf	motorYInit@m+1
  2972  034A  084E               	movf	motorYInit@j,w
  2973  034B  00D4               	movwf	motorYInit@m
  2974  034C                     l470:	
  2975  034C  3001               	movlw	1
  2976  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2977  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2978  034F  07CE               	addwf	motorYInit@j,f
  2979  0350  1803               	skipnc
  2980  0351  0ACF               	incf	motorYInit@j+1,f
  2981  0352  3000               	movlw	0
  2982  0353  07CF               	addwf	motorYInit@j+1,f
  2983  0354  2B25               	goto	l2631
  2984  0355                     l2633:	
  2985                           
  2986                           ;main.c: 430: }
  2987                           ;main.c: 431: }
  2988                           ;main.c: 432: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2989  0355  300B               	movlw	11
  2990  0356  00FC               	movwf	??_motorYInit+2
  2991  0357  3026               	movlw	38
  2992  0358  00FB               	movwf	??_motorYInit+1
  2993  0359  3066               	movlw	102
  2994  035A  00FA               	movwf	??_motorYInit
  2995  035B                     u3407:	
  2996  035B  0BFA               	decfsz	??_motorYInit,f
  2997  035C  2B5B               	goto	u3407
  2998  035D  0BFB               	decfsz	??_motorYInit+1,f
  2999  035E  2B5B               	goto	u3407
  3000  035F  0BFC               	decfsz	??_motorYInit+2,f
  3001  0360  2B5B               	goto	u3407
  3002  0361  2B62               	nop2
  3003                           
  3004                           ;main.c: 433: for(int k = 0; k<m; k++){
  3005  0362  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0363  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0364  01D0               	clrf	motorYInit@k
  3008  0365  01D1               	clrf	motorYInit@k+1
  3009  0366                     l2641:	
  3010  0366  0851               	movf	motorYInit@k+1,w
  3011  0367  3A80               	xorlw	128
  3012  0368  00FA               	movwf	??_motorYInit
  3013  0369  0855               	movf	motorYInit@m+1,w
  3014  036A  3A80               	xorlw	128
  3015  036B  027A               	subwf	??_motorYInit,w
  3016  036C  1D03               	skipz
  3017  036D  2B70               	goto	u2655
  3018  036E  0854               	movf	motorYInit@m,w
  3019  036F  0250               	subwf	motorYInit@k,w
  3020  0370                     u2655:	
  3021  0370  1803               	btfsc	3,0
  3022  0371  2B90               	goto	l2643
  3023                           
  3024                           ;main.c: 434: motorY.dir = 1;
  3025  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3026  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3027  0374  01A5               	clrf	_motorY
  3028  0375  0AA5               	incf	_motorY,f
  3029                           
  3030                           ;main.c: 435: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  3031  0376  0826               	movf	_motorY+1,w
  3032  0377  00FA               	movwf	??_motorYInit
  3033  0378  087A               	movf	??_motorYInit,w
  3034  0379  00F4               	movwf	stepMotorY@speed
  3035  037A  0827               	movf	_motorY+2,w
  3036  037B  00FB               	movwf	??_motorYInit+1
  3037  037C  01FC               	clrf	??_motorYInit+2
  3038  037D  087B               	movf	??_motorYInit+1,w
  3039  037E  00F5               	movwf	stepMotorY@mod
  3040  037F  087C               	movf	??_motorYInit+2,w
  3041  0380  00F6               	movwf	stepMotorY@mod+1
  3042  0381  0825               	movf	_motorY,w
  3043  0382  120A  158A  253A  120A  118A  	fcall	_stepMotorY
  3044  0387  3001               	movlw	1
  3045  0388  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0389  1303               	bcf	3,6	;RP1=0, select bank0
  3047  038A  07D0               	addwf	motorYInit@k,f
  3048  038B  1803               	skipnc
  3049  038C  0AD1               	incf	motorYInit@k+1,f
  3050  038D  3000               	movlw	0
  3051  038E  07D1               	addwf	motorYInit@k+1,f
  3052  038F  2B66               	goto	l2641
  3053  0390                     l2643:	
  3054                           
  3055                           ;main.c: 436: }
  3056                           ;main.c: 437: motorY.dir = 0;
  3057  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0392  01A5               	clrf	_motorY
  3060                           
  3061                           ;main.c: 438: status = 1;
  3062  0393  3001               	movlw	1
  3063  0394  00D6               	movwf	motorYInit@status
  3064  0395  3000               	movlw	0
  3065  0396  00D7               	movwf	motorYInit@status+1
  3066  0397                     l2647:	
  3067                           
  3068                           ;main.c: 439: }
  3069                           ;main.c: 441: if(limitz() == 2){
  3070  0397  120A  158A  2397  120A  118A  	fcall	_limitz
  3071  039C  3002               	movlw	2
  3072  039D  0670               	xorwf	?_limitz,w
  3073  039E  0471               	iorwf	?_limitz+1,w
  3074  039F  1D03               	btfss	3,2
  3075  03A0  2BE7               	goto	l475
  3076                           
  3077                           ;main.c: 442: for(int j = 0; limitY0 != 1; j++){
  3078  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  3079  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  3080  03A3  01D2               	clrf	motorYInit@j_568
  3081  03A4  01D3               	clrf	motorYInit@j_568+1
  3082  03A5                     l2661:	
  3083  03A5  0347               	decf	_limitY0,w
  3084  03A6  1903               	btfsc	3,2
  3085  03A7  2BD4               	goto	l479
  3086                           
  3087                           ;main.c: 443: motorY.dir = 0;
  3088  03A8  01A5               	clrf	_motorY
  3089                           
  3090                           ;main.c: 444: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  3091  03A9  0826               	movf	_motorY+1,w
  3092  03AA  00FA               	movwf	??_motorYInit
  3093  03AB  087A               	movf	??_motorYInit,w
  3094  03AC  00F4               	movwf	stepMotorY@speed
  3095  03AD  0827               	movf	_motorY+2,w
  3096  03AE  00FB               	movwf	??_motorYInit+1
  3097  03AF  01FC               	clrf	??_motorYInit+2
  3098  03B0  087B               	movf	??_motorYInit+1,w
  3099  03B1  00F5               	movwf	stepMotorY@mod
  3100  03B2  087C               	movf	??_motorYInit+2,w
  3101  03B3  00F6               	movwf	stepMotorY@mod+1
  3102  03B4  0825               	movf	_motorY,w
  3103  03B5  120A  158A  253A  120A  118A  	fcall	_stepMotorY
  3104                           
  3105                           ;main.c: 445: if(limitz() == 1){
  3106  03BA  120A  158A  2397  120A  118A  	fcall	_limitz
  3107  03BF  0370               	decf	?_limitz,w
  3108  03C0  0471               	iorwf	?_limitz+1,w
  3109  03C1  1D03               	btfss	3,2
  3110  03C2  2BCB               	goto	l478
  3111                           
  3112                           ;main.c: 446: limitY0 = 1;
  3113  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  3114  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  3115  03C5  01C7               	clrf	_limitY0
  3116  03C6  0AC7               	incf	_limitY0,f
  3117                           
  3118                           ;main.c: 447: m = j;
  3119  03C7  0853               	movf	motorYInit@j_568+1,w
  3120  03C8  00D5               	movwf	motorYInit@m+1
  3121  03C9  0852               	movf	motorYInit@j_568,w
  3122  03CA  00D4               	movwf	motorYInit@m
  3123  03CB                     l478:	
  3124  03CB  3001               	movlw	1
  3125  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  3126  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  3127  03CE  07D2               	addwf	motorYInit@j_568,f
  3128  03CF  1803               	skipnc
  3129  03D0  0AD3               	incf	motorYInit@j_568+1,f
  3130  03D1  3000               	movlw	0
  3131  03D2  07D3               	addwf	motorYInit@j_568+1,f
  3132  03D3  2BA5               	goto	l2661
  3133  03D4                     l479:	
  3134                           
  3135                           ;main.c: 448: }
  3136                           ;main.c: 449: }
  3137                           ;main.c: 450: motorY.dir = 1;
  3138  03D4  01A5               	clrf	_motorY
  3139  03D5  0AA5               	incf	_motorY,f
  3140                           
  3141                           ;main.c: 451: status = 1;
  3142  03D6  3001               	movlw	1
  3143  03D7  00D6               	movwf	motorYInit@status
  3144  03D8  3000               	movlw	0
  3145  03D9  00D7               	movwf	motorYInit@status+1
  3146                           
  3147                           ;main.c: 452: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3148  03DA  300B               	movlw	11
  3149  03DB  00FC               	movwf	??_motorYInit+2
  3150  03DC  3026               	movlw	38
  3151  03DD  00FB               	movwf	??_motorYInit+1
  3152  03DE  3066               	movlw	102
  3153  03DF  00FA               	movwf	??_motorYInit
  3154  03E0                     u3417:	
  3155  03E0  0BFA               	decfsz	??_motorYInit,f
  3156  03E1  2BE0               	goto	u3417
  3157  03E2  0BFB               	decfsz	??_motorYInit+1,f
  3158  03E3  2BE0               	goto	u3417
  3159  03E4  0BFC               	decfsz	??_motorYInit+2,f
  3160  03E5  2BE0               	goto	u3417
  3161  03E6  2BE7               	nop2
  3162  03E7                     l475:	
  3163  03E7  3001               	movlw	1
  3164  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3165  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  3166  03EA  07CC               	addwf	motorYInit@i,f
  3167  03EB  1803               	skipnc
  3168  03EC  0ACD               	incf	motorYInit@i+1,f
  3169  03ED  3000               	movlw	0
  3170  03EE  07CD               	addwf	motorYInit@i+1,f
  3171  03EF  0356               	decf	motorYInit@status,w
  3172  03F0  0457               	iorwf	motorYInit@status+1,w
  3173  03F1  1D03               	btfss	3,2
  3174  03F2  2B05               	goto	l465
  3175  03F3                     l2667:	
  3176                           
  3177                           ;main.c: 453: }
  3178                           ;main.c: 454: }
  3179                           ;main.c: 455: return m;
  3180  03F3  0855               	movf	motorYInit@m+1,w
  3181  03F4  00F9               	movwf	?_motorYInit+1
  3182  03F5  0854               	movf	motorYInit@m,w
  3183  03F6  00F8               	movwf	?_motorYInit
  3184  03F7  0008               	return
  3185  03F8                     __end_of_motorYInit:	
  3186                           
  3187                           	psect	text8
  3188  0D3A                     __ptext8:	
  3189 ;; *************** function _stepMotorY *****************
  3190 ;; Defined at:
  3191 ;;		line 181 in file "stepMotor.h"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  dir             1    wreg     unsigned char 
  3194 ;;  speed           1    4[COMMON] unsigned char 
  3195 ;;  mod             2    5[COMMON] int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  dir             1    7[COMMON] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3207 ;;      Params:         3       0       0       0       0
  3208 ;;      Locals:         1       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0
  3210 ;;      Totals:         4       0       0       0       0
  3211 ;;Total ram usage:        4 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    1
  3214 ;; This function calls:
  3215 ;;		_modM2
  3216 ;;		_ms_delay
  3217 ;; This function is called by:
  3218 ;;		_main
  3219 ;;		_motorYInit
  3220 ;;		_reset
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _stepMotorY
  3226  0D3A                     _stepMotorY:	
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _stepMotorY: [wreg+status,2+status,0+pclath+cstack]
  3230                           ;stepMotorY@dir stored from wreg
  3231  0D3A  00F7               	movwf	stepMotorY@dir
  3232                           
  3233                           ;stepMotor.h: 182: modM2(mod);
  3234  0D3B  0876               	movf	stepMotorY@mod+1,w
  3235  0D3C  00F1               	movwf	modM2@m+1
  3236  0D3D  0875               	movf	stepMotorY@mod,w
  3237  0D3E  00F0               	movwf	modM2@m
  3238  0D3F  120A  158A  2639  120A  158A  	fcall	_modM2
  3239                           
  3240                           ;stepMotor.h: 184: if (dir == 1) {
  3241  0D44  0377               	decf	stepMotorY@dir,w
  3242  0D45  1D03               	btfss	3,2
  3243  0D46  2D5A               	goto	l2231
  3244                           
  3245                           ;stepMotor.h: 185: PORTEbits.RE0 = 1;
  3246  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0D49  1409               	bsf	9,0	;volatile
  3249                           
  3250                           ;stepMotor.h: 186: PORTAbits.RA5 = 1;
  3251  0D4A  1685               	bsf	5,5	;volatile
  3252                           
  3253                           ;stepMotor.h: 187: ms_delay(speed);
  3254  0D4B  0874               	movf	stepMotorY@speed,w
  3255  0D4C  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  3256                           
  3257                           ;stepMotor.h: 188: PORTEbits.RE0 = 0;
  3258  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  3260  0D53  1009               	bcf	9,0	;volatile
  3261                           
  3262                           ;stepMotor.h: 189: PORTAbits.RA5= 1;
  3263  0D54  1685               	bsf	5,5	;volatile
  3264                           
  3265                           ;stepMotor.h: 190: ms_delay(speed);
  3266  0D55  0874               	movf	stepMotorY@speed,w
  3267  0D56  120A  158A  23BE   	fcall	_ms_delay
  3268                           
  3269                           ;stepMotor.h: 191: }
  3270  0D59  0008               	return
  3271  0D5A                     l2231:	
  3272                           
  3273                           ;stepMotor.h: 192: else if(dir == 0){
  3274  0D5A  0877               	movf	stepMotorY@dir,w
  3275  0D5B  1D03               	btfss	3,2
  3276  0D5C  0008               	return
  3277                           
  3278                           ;stepMotor.h: 193: PORTEbits.RE0 = 1;
  3279  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0D5F  1409               	bsf	9,0	;volatile
  3282                           
  3283                           ;stepMotor.h: 194: PORTAbits.RA5 = 0;
  3284  0D60  1285               	bcf	5,5	;volatile
  3285                           
  3286                           ;stepMotor.h: 195: ms_delay(speed);
  3287  0D61  0874               	movf	stepMotorY@speed,w
  3288  0D62  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  3289                           
  3290                           ;stepMotor.h: 196: PORTEbits.RE0 = 0;
  3291  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  3292  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  3293  0D69  1009               	bcf	9,0	;volatile
  3294                           
  3295                           ;stepMotor.h: 197: PORTAbits.RA5 = 0;
  3296  0D6A  1285               	bcf	5,5	;volatile
  3297                           
  3298                           ;stepMotor.h: 198: ms_delay(speed);
  3299  0D6B  0874               	movf	stepMotorY@speed,w
  3300  0D6C  120A  158A  23BE   	fcall	_ms_delay
  3301  0D6F  0008               	return
  3302  0D70                     __end_of_stepMotorY:	
  3303                           
  3304                           	psect	text9
  3305  0E39                     __ptext9:	
  3306 ;; *************** function _modM2 *****************
  3307 ;; Defined at:
  3308 ;;		line 47 in file "motor_mode.h"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  m               2    0[COMMON] int 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3322 ;;      Params:         2       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0
  3325 ;;      Totals:         2       0       0       0       0
  3326 ;;Total ram usage:        2 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_stepMotorY
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _modM2
  3337  0E39                     _modM2:	
  3338                           
  3339                           ;motor_mode.h: 49: if(m == 1){
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _modM2: [wreg+status,2+status,0]
  3343  0E39  0370               	decf	modM2@m,w
  3344  0E3A  0471               	iorwf	modM2@m+1,w
  3345  0E3B  1D03               	btfss	3,2
  3346  0E3C  2E42               	goto	l2117
  3347                           
  3348                           ;motor_mode.h: 50: PORTCbits.RC0 = 0;
  3349  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0E3F  1007               	bcf	7,0	;volatile
  3352                           
  3353                           ;motor_mode.h: 51: PORTEbits.RE2 = 0;
  3354  0E40  1109               	bcf	9,2	;volatile
  3355                           
  3356                           ;motor_mode.h: 52: PORTEbits.RE1 = 0;
  3357  0E41  1089               	bcf	9,1	;volatile
  3358  0E42                     l2117:	
  3359                           
  3360                           ;motor_mode.h: 53: }
  3361                           ;motor_mode.h: 55: if(m == 2){
  3362  0E42  3002               	movlw	2
  3363  0E43  0670               	xorwf	modM2@m,w
  3364  0E44  0471               	iorwf	modM2@m+1,w
  3365  0E45  1D03               	btfss	3,2
  3366  0E46  2E4C               	goto	l2121
  3367                           
  3368                           ;motor_mode.h: 56: PORTCbits.RC0 = 1;
  3369  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  3370  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  3371  0E49  1407               	bsf	7,0	;volatile
  3372                           
  3373                           ;motor_mode.h: 57: PORTEbits.RE2 = 0;
  3374  0E4A  1109               	bcf	9,2	;volatile
  3375                           
  3376                           ;motor_mode.h: 58: PORTEbits.RE1 = 0;
  3377  0E4B  1089               	bcf	9,1	;volatile
  3378  0E4C                     l2121:	
  3379                           
  3380                           ;motor_mode.h: 59: }
  3381                           ;motor_mode.h: 60: if(m == 3){
  3382  0E4C  3003               	movlw	3
  3383  0E4D  0670               	xorwf	modM2@m,w
  3384  0E4E  0471               	iorwf	modM2@m+1,w
  3385  0E4F  1D03               	btfss	3,2
  3386  0E50  2E56               	goto	l2125
  3387                           
  3388                           ;motor_mode.h: 61: PORTCbits.RC0 = 0;
  3389  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0E52  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0E53  1007               	bcf	7,0	;volatile
  3392                           
  3393                           ;motor_mode.h: 62: PORTEbits.RE2 = 1;
  3394  0E54  1509               	bsf	9,2	;volatile
  3395                           
  3396                           ;motor_mode.h: 63: PORTEbits.RE1 = 0;
  3397  0E55  1089               	bcf	9,1	;volatile
  3398  0E56                     l2125:	
  3399                           
  3400                           ;motor_mode.h: 64: }
  3401                           ;motor_mode.h: 65: if(m == 4){
  3402  0E56  3004               	movlw	4
  3403  0E57  0670               	xorwf	modM2@m,w
  3404  0E58  0471               	iorwf	modM2@m+1,w
  3405  0E59  1D03               	btfss	3,2
  3406  0E5A  2E60               	goto	l2129
  3407                           
  3408                           ;motor_mode.h: 66: PORTCbits.RC0 = 1;
  3409  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  3410  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  3411  0E5D  1407               	bsf	7,0	;volatile
  3412                           
  3413                           ;motor_mode.h: 67: PORTEbits.RE2 = 1;
  3414  0E5E  1509               	bsf	9,2	;volatile
  3415                           
  3416                           ;motor_mode.h: 68: PORTEbits.RE1 = 0;
  3417  0E5F  1089               	bcf	9,1	;volatile
  3418  0E60                     l2129:	
  3419                           
  3420                           ;motor_mode.h: 69: }
  3421                           ;motor_mode.h: 70: if(m == 5){
  3422  0E60  3005               	movlw	5
  3423  0E61  0670               	xorwf	modM2@m,w
  3424  0E62  0471               	iorwf	modM2@m+1,w
  3425  0E63  1D03               	btfss	3,2
  3426  0E64  2E6A               	goto	l2133
  3427                           
  3428                           ;motor_mode.h: 71: PORTCbits.RC0 = 0;
  3429  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0E67  1007               	bcf	7,0	;volatile
  3432                           
  3433                           ;motor_mode.h: 72: PORTEbits.RE2 = 0;
  3434  0E68  1109               	bcf	9,2	;volatile
  3435                           
  3436                           ;motor_mode.h: 73: PORTEbits.RE1 = 1;
  3437  0E69  1489               	bsf	9,1	;volatile
  3438  0E6A                     l2133:	
  3439                           
  3440                           ;motor_mode.h: 74: }
  3441                           ;motor_mode.h: 75: if(m == 6){
  3442  0E6A  3006               	movlw	6
  3443  0E6B  0670               	xorwf	modM2@m,w
  3444  0E6C  0471               	iorwf	modM2@m+1,w
  3445  0E6D  1D03               	btfss	3,2
  3446  0E6E  2E74               	goto	l2137
  3447                           
  3448                           ;motor_mode.h: 76: PORTCbits.RC0 = 1;
  3449  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0E71  1407               	bsf	7,0	;volatile
  3452                           
  3453                           ;motor_mode.h: 77: PORTEbits.RE2 = 0;
  3454  0E72  1109               	bcf	9,2	;volatile
  3455                           
  3456                           ;motor_mode.h: 78: PORTEbits.RE1 = 1;
  3457  0E73  1489               	bsf	9,1	;volatile
  3458  0E74                     l2137:	
  3459                           
  3460                           ;motor_mode.h: 79: }
  3461                           ;motor_mode.h: 80: if(m == 7){
  3462  0E74  3007               	movlw	7
  3463  0E75  0670               	xorwf	modM2@m,w
  3464  0E76  0471               	iorwf	modM2@m+1,w
  3465  0E77  1D03               	btfss	3,2
  3466  0E78  2E7E               	goto	l2141
  3467                           
  3468                           ;motor_mode.h: 81: PORTCbits.RC0 = 0;
  3469  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0E7B  1007               	bcf	7,0	;volatile
  3472                           
  3473                           ;motor_mode.h: 82: PORTEbits.RE2 = 1;
  3474  0E7C  1509               	bsf	9,2	;volatile
  3475                           
  3476                           ;motor_mode.h: 83: PORTEbits.RE1 = 1;
  3477  0E7D  1489               	bsf	9,1	;volatile
  3478  0E7E                     l2141:	
  3479                           
  3480                           ;motor_mode.h: 84: }
  3481                           ;motor_mode.h: 85: if(m == 8){
  3482  0E7E  3008               	movlw	8
  3483  0E7F  0670               	xorwf	modM2@m,w
  3484  0E80  0471               	iorwf	modM2@m+1,w
  3485  0E81  1D03               	btfss	3,2
  3486  0E82  0008               	return
  3487                           
  3488                           ;motor_mode.h: 86: PORTCbits.RC0 = 1;
  3489  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0E85  1407               	bsf	7,0	;volatile
  3492                           
  3493                           ;motor_mode.h: 87: PORTEbits.RE2 = 1;
  3494  0E86  1509               	bsf	9,2	;volatile
  3495                           
  3496                           ;motor_mode.h: 88: PORTEbits.RE1 = 1;
  3497  0E87  1489               	bsf	9,1	;volatile
  3498  0E88  0008               	return
  3499  0E89                     __end_of_modM2:	
  3500                           
  3501                           	psect	text10
  3502  01FA                     __ptext10:	
  3503 ;; *************** function _motorXInit *****************
  3504 ;; Defined at:
  3505 ;;		line 374 in file "main.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  j               2    6[BANK0 ] int 
  3510 ;;  k               2    4[BANK0 ] int 
  3511 ;;  j               2    2[BANK0 ] int 
  3512 ;;  i               2    0[BANK0 ] int 
  3513 ;;  status          2   10[BANK0 ] int 
  3514 ;;  m               2    8[BANK0 ] int 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  2    8[COMMON] int 
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0, pclath, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3524 ;;      Params:         2       0       0       0       0
  3525 ;;      Locals:         0      12       0       0       0
  3526 ;;      Temps:          3       0       0       0       0
  3527 ;;      Totals:         5      12       0       0       0
  3528 ;;Total ram usage:       17 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    2
  3531 ;; This function calls:
  3532 ;;		_limitz
  3533 ;;		_stepMotorX
  3534 ;; This function is called by:
  3535 ;;		_main
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _motorXInit
  3541  01FA                     _motorXInit:	
  3542                           
  3543                           ;main.c: 375: int m = 0;
  3544                           
  3545                           ;incstack = 0
  3546                           ; Regs used in _motorXInit: [wreg+status,2+status,0+pclath+cstack]
  3547  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3548  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3549  01FC  01D4               	clrf	motorXInit@m
  3550  01FD  01D5               	clrf	motorXInit@m+1
  3551                           
  3552                           ;main.c: 376: int status = 0;
  3553  01FE  01D6               	clrf	motorXInit@status
  3554  01FF  01D7               	clrf	motorXInit@status+1
  3555                           
  3556                           ;main.c: 377: for(int i = 0; status != 1; i++){
  3557  0200  01CC               	clrf	motorXInit@i
  3558  0201  01CD               	clrf	motorXInit@i+1
  3559  0202  0356               	decf	motorXInit@status,w
  3560  0203  0457               	iorwf	motorXInit@status+1,w
  3561  0204  1903               	btfsc	3,2
  3562  0205  2AF4               	goto	l2607
  3563  0206                     l447:	
  3564                           
  3565                           ;main.c: 378: motorX.dir = 1;
  3566  0206  01A0               	clrf	_motorX
  3567  0207  0AA0               	incf	_motorX,f
  3568                           
  3569                           ;main.c: 379: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  3570  0208  0821               	movf	_motorX+1,w
  3571  0209  00FA               	movwf	??_motorXInit
  3572  020A  087A               	movf	??_motorXInit,w
  3573  020B  00F4               	movwf	stepMotorX@speed
  3574  020C  0822               	movf	_motorX+2,w
  3575  020D  00FB               	movwf	??_motorXInit+1
  3576  020E  01FC               	clrf	??_motorXInit+2
  3577  020F  087B               	movf	??_motorXInit+1,w
  3578  0210  00F5               	movwf	stepMotorX@mod
  3579  0211  087C               	movf	??_motorXInit+2,w
  3580  0212  00F6               	movwf	stepMotorX@mod+1
  3581  0213  0820               	movf	_motorX,w
  3582  0214  120A  158A  2504  120A  118A  	fcall	_stepMotorX
  3583                           
  3584                           ;main.c: 381: if(limitz() == 1){
  3585  0219  120A  158A  2397  120A  118A  	fcall	_limitz
  3586  021E  0370               	decf	?_limitz,w
  3587  021F  0471               	iorwf	?_limitz+1,w
  3588  0220  1D03               	btfss	3,2
  3589  0221  2A98               	goto	l2587
  3590                           
  3591                           ;main.c: 382: for(int j = 0; limitX1 != 1; j++){
  3592  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0223  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0224  01CE               	clrf	motorXInit@j
  3595  0225  01CF               	clrf	motorXInit@j+1
  3596  0226                     l2571:	
  3597  0226  0346               	decf	_limitX1,w
  3598  0227  1903               	btfsc	3,2
  3599  0228  2A56               	goto	l2573
  3600                           
  3601                           ;main.c: 383: motorX.dir = 0;
  3602  0229  01A0               	clrf	_motorX
  3603                           
  3604                           ;main.c: 384: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  3605  022A  0821               	movf	_motorX+1,w
  3606  022B  00FA               	movwf	??_motorXInit
  3607  022C  087A               	movf	??_motorXInit,w
  3608  022D  00F4               	movwf	stepMotorX@speed
  3609  022E  0822               	movf	_motorX+2,w
  3610  022F  00FB               	movwf	??_motorXInit+1
  3611  0230  01FC               	clrf	??_motorXInit+2
  3612  0231  087B               	movf	??_motorXInit+1,w
  3613  0232  00F5               	movwf	stepMotorX@mod
  3614  0233  087C               	movf	??_motorXInit+2,w
  3615  0234  00F6               	movwf	stepMotorX@mod+1
  3616  0235  0820               	movf	_motorX,w
  3617  0236  120A  158A  2504  120A  118A  	fcall	_stepMotorX
  3618                           
  3619                           ;main.c: 385: if(limitz() == 2){
  3620  023B  120A  158A  2397  120A  118A  	fcall	_limitz
  3621  0240  3002               	movlw	2
  3622  0241  0670               	xorwf	?_limitz,w
  3623  0242  0471               	iorwf	?_limitz+1,w
  3624  0243  1D03               	btfss	3,2
  3625  0244  2A4D               	goto	l452
  3626                           
  3627                           ;main.c: 386: limitX1 = 1;
  3628  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0246  1303               	bcf	3,6	;RP1=0, select bank0
  3630  0247  01C6               	clrf	_limitX1
  3631  0248  0AC6               	incf	_limitX1,f
  3632                           
  3633                           ;main.c: 387: m = j;
  3634  0249  084F               	movf	motorXInit@j+1,w
  3635  024A  00D5               	movwf	motorXInit@m+1
  3636  024B  084E               	movf	motorXInit@j,w
  3637  024C  00D4               	movwf	motorXInit@m
  3638  024D                     l452:	
  3639  024D  3001               	movlw	1
  3640  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3641  024F  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0250  07CE               	addwf	motorXInit@j,f
  3643  0251  1803               	skipnc
  3644  0252  0ACF               	incf	motorXInit@j+1,f
  3645  0253  3000               	movlw	0
  3646  0254  07CF               	addwf	motorXInit@j+1,f
  3647  0255  2A26               	goto	l2571
  3648  0256                     l2573:	
  3649                           
  3650                           ;main.c: 388: }
  3651                           ;main.c: 389: }
  3652                           ;main.c: 390: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3653  0256  300B               	movlw	11
  3654  0257  00FC               	movwf	??_motorXInit+2
  3655  0258  3026               	movlw	38
  3656  0259  00FB               	movwf	??_motorXInit+1
  3657  025A  3066               	movlw	102
  3658  025B  00FA               	movwf	??_motorXInit
  3659  025C                     u3427:	
  3660  025C  0BFA               	decfsz	??_motorXInit,f
  3661  025D  2A5C               	goto	u3427
  3662  025E  0BFB               	decfsz	??_motorXInit+1,f
  3663  025F  2A5C               	goto	u3427
  3664  0260  0BFC               	decfsz	??_motorXInit+2,f
  3665  0261  2A5C               	goto	u3427
  3666  0262  2A63               	nop2
  3667                           
  3668                           ;main.c: 391: for(int k = 0; k<m; k++){
  3669  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3671  0265  01D0               	clrf	motorXInit@k
  3672  0266  01D1               	clrf	motorXInit@k+1
  3673  0267                     l2581:	
  3674  0267  0851               	movf	motorXInit@k+1,w
  3675  0268  3A80               	xorlw	128
  3676  0269  00FA               	movwf	??_motorXInit
  3677  026A  0855               	movf	motorXInit@m+1,w
  3678  026B  3A80               	xorlw	128
  3679  026C  027A               	subwf	??_motorXInit,w
  3680  026D  1D03               	skipz
  3681  026E  2A71               	goto	u2565
  3682  026F  0854               	movf	motorXInit@m,w
  3683  0270  0250               	subwf	motorXInit@k,w
  3684  0271                     u2565:	
  3685  0271  1803               	btfsc	3,0
  3686  0272  2A91               	goto	l2583
  3687                           
  3688                           ;main.c: 392: motorX.dir = 1;
  3689  0273  1283               	bcf	3,5	;RP0=0, select bank0
  3690  0274  1303               	bcf	3,6	;RP1=0, select bank0
  3691  0275  01A0               	clrf	_motorX
  3692  0276  0AA0               	incf	_motorX,f
  3693                           
  3694                           ;main.c: 393: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  3695  0277  0821               	movf	_motorX+1,w
  3696  0278  00FA               	movwf	??_motorXInit
  3697  0279  087A               	movf	??_motorXInit,w
  3698  027A  00F4               	movwf	stepMotorX@speed
  3699  027B  0822               	movf	_motorX+2,w
  3700  027C  00FB               	movwf	??_motorXInit+1
  3701  027D  01FC               	clrf	??_motorXInit+2
  3702  027E  087B               	movf	??_motorXInit+1,w
  3703  027F  00F5               	movwf	stepMotorX@mod
  3704  0280  087C               	movf	??_motorXInit+2,w
  3705  0281  00F6               	movwf	stepMotorX@mod+1
  3706  0282  0820               	movf	_motorX,w
  3707  0283  120A  158A  2504  120A  118A  	fcall	_stepMotorX
  3708  0288  3001               	movlw	1
  3709  0289  1283               	bcf	3,5	;RP0=0, select bank0
  3710  028A  1303               	bcf	3,6	;RP1=0, select bank0
  3711  028B  07D0               	addwf	motorXInit@k,f
  3712  028C  1803               	skipnc
  3713  028D  0AD1               	incf	motorXInit@k+1,f
  3714  028E  3000               	movlw	0
  3715  028F  07D1               	addwf	motorXInit@k+1,f
  3716  0290  2A67               	goto	l2581
  3717  0291                     l2583:	
  3718                           
  3719                           ;main.c: 394: }
  3720                           ;main.c: 395: motorX.dir = 0;
  3721  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3722  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0293  01A0               	clrf	_motorX
  3724                           
  3725                           ;main.c: 396: status = 1;
  3726  0294  3001               	movlw	1
  3727  0295  00D6               	movwf	motorXInit@status
  3728  0296  3000               	movlw	0
  3729  0297  00D7               	movwf	motorXInit@status+1
  3730  0298                     l2587:	
  3731                           
  3732                           ;main.c: 397: }
  3733                           ;main.c: 399: if(limitz() == 2){
  3734  0298  120A  158A  2397  120A  118A  	fcall	_limitz
  3735  029D  3002               	movlw	2
  3736  029E  0670               	xorwf	?_limitz,w
  3737  029F  0471               	iorwf	?_limitz+1,w
  3738  02A0  1D03               	btfss	3,2
  3739  02A1  2AE8               	goto	l457
  3740                           
  3741                           ;main.c: 400: for(int j = 0; limitX0 != 1; j++){
  3742  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  3743  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  3744  02A4  01D2               	clrf	motorXInit@j_561
  3745  02A5  01D3               	clrf	motorXInit@j_561+1
  3746  02A6                     l2601:	
  3747  02A6  0345               	decf	_limitX0,w
  3748  02A7  1903               	btfsc	3,2
  3749  02A8  2AD5               	goto	l461
  3750                           
  3751                           ;main.c: 401: motorX.dir = 0;
  3752  02A9  01A0               	clrf	_motorX
  3753                           
  3754                           ;main.c: 402: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  3755  02AA  0821               	movf	_motorX+1,w
  3756  02AB  00FA               	movwf	??_motorXInit
  3757  02AC  087A               	movf	??_motorXInit,w
  3758  02AD  00F4               	movwf	stepMotorX@speed
  3759  02AE  0822               	movf	_motorX+2,w
  3760  02AF  00FB               	movwf	??_motorXInit+1
  3761  02B0  01FC               	clrf	??_motorXInit+2
  3762  02B1  087B               	movf	??_motorXInit+1,w
  3763  02B2  00F5               	movwf	stepMotorX@mod
  3764  02B3  087C               	movf	??_motorXInit+2,w
  3765  02B4  00F6               	movwf	stepMotorX@mod+1
  3766  02B5  0820               	movf	_motorX,w
  3767  02B6  120A  158A  2504  120A  118A  	fcall	_stepMotorX
  3768                           
  3769                           ;main.c: 403: if(limitz() == 1){
  3770  02BB  120A  158A  2397  120A  118A  	fcall	_limitz
  3771  02C0  0370               	decf	?_limitz,w
  3772  02C1  0471               	iorwf	?_limitz+1,w
  3773  02C2  1D03               	btfss	3,2
  3774  02C3  2ACC               	goto	l460
  3775                           
  3776                           ;main.c: 404: limitX0 = 1;
  3777  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  3778  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  3779  02C6  01C5               	clrf	_limitX0
  3780  02C7  0AC5               	incf	_limitX0,f
  3781                           
  3782                           ;main.c: 405: m = j;
  3783  02C8  0853               	movf	motorXInit@j_561+1,w
  3784  02C9  00D5               	movwf	motorXInit@m+1
  3785  02CA  0852               	movf	motorXInit@j_561,w
  3786  02CB  00D4               	movwf	motorXInit@m
  3787  02CC                     l460:	
  3788  02CC  3001               	movlw	1
  3789  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  3790  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  3791  02CF  07D2               	addwf	motorXInit@j_561,f
  3792  02D0  1803               	skipnc
  3793  02D1  0AD3               	incf	motorXInit@j_561+1,f
  3794  02D2  3000               	movlw	0
  3795  02D3  07D3               	addwf	motorXInit@j_561+1,f
  3796  02D4  2AA6               	goto	l2601
  3797  02D5                     l461:	
  3798                           
  3799                           ;main.c: 406: }
  3800                           ;main.c: 407: }
  3801                           ;main.c: 408: motorX.dir = 1;
  3802  02D5  01A0               	clrf	_motorX
  3803  02D6  0AA0               	incf	_motorX,f
  3804                           
  3805                           ;main.c: 409: status = 1;
  3806  02D7  3001               	movlw	1
  3807  02D8  00D6               	movwf	motorXInit@status
  3808  02D9  3000               	movlw	0
  3809  02DA  00D7               	movwf	motorXInit@status+1
  3810                           
  3811                           ;main.c: 410: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3812  02DB  300B               	movlw	11
  3813  02DC  00FC               	movwf	??_motorXInit+2
  3814  02DD  3026               	movlw	38
  3815  02DE  00FB               	movwf	??_motorXInit+1
  3816  02DF  3066               	movlw	102
  3817  02E0  00FA               	movwf	??_motorXInit
  3818  02E1                     u3437:	
  3819  02E1  0BFA               	decfsz	??_motorXInit,f
  3820  02E2  2AE1               	goto	u3437
  3821  02E3  0BFB               	decfsz	??_motorXInit+1,f
  3822  02E4  2AE1               	goto	u3437
  3823  02E5  0BFC               	decfsz	??_motorXInit+2,f
  3824  02E6  2AE1               	goto	u3437
  3825  02E7  2AE8               	nop2
  3826  02E8                     l457:	
  3827  02E8  3001               	movlw	1
  3828  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  3829  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  3830  02EB  07CC               	addwf	motorXInit@i,f
  3831  02EC  1803               	skipnc
  3832  02ED  0ACD               	incf	motorXInit@i+1,f
  3833  02EE  3000               	movlw	0
  3834  02EF  07CD               	addwf	motorXInit@i+1,f
  3835  02F0  0356               	decf	motorXInit@status,w
  3836  02F1  0457               	iorwf	motorXInit@status+1,w
  3837  02F2  1D03               	btfss	3,2
  3838  02F3  2A06               	goto	l447
  3839  02F4                     l2607:	
  3840                           
  3841                           ;main.c: 411: }
  3842                           ;main.c: 412: }
  3843                           ;main.c: 413: return m;
  3844  02F4  0855               	movf	motorXInit@m+1,w
  3845  02F5  00F9               	movwf	?_motorXInit+1
  3846  02F6  0854               	movf	motorXInit@m,w
  3847  02F7  00F8               	movwf	?_motorXInit
  3848  02F8  0008               	return
  3849  02F9                     __end_of_motorXInit:	
  3850                           
  3851                           	psect	text11
  3852  0D04                     __ptext11:	
  3853 ;; *************** function _stepMotorX *****************
  3854 ;; Defined at:
  3855 ;;		line 159 in file "stepMotor.h"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;  dir             1    wreg     unsigned char 
  3858 ;;  speed           1    4[COMMON] unsigned char 
  3859 ;;  mod             2    5[COMMON] int 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  dir             1    7[COMMON] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3871 ;;      Params:         3       0       0       0       0
  3872 ;;      Locals:         1       0       0       0       0
  3873 ;;      Temps:          0       0       0       0       0
  3874 ;;      Totals:         4       0       0       0       0
  3875 ;;Total ram usage:        4 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    1
  3878 ;; This function calls:
  3879 ;;		_modM1
  3880 ;;		_ms_delay
  3881 ;; This function is called by:
  3882 ;;		_main
  3883 ;;		_motorXInit
  3884 ;;		_reset
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _stepMotorX
  3890  0D04                     _stepMotorX:	
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _stepMotorX: [wreg+status,2+status,0+pclath+cstack]
  3894                           ;stepMotorX@dir stored from wreg
  3895  0D04  00F7               	movwf	stepMotorX@dir
  3896                           
  3897                           ;stepMotor.h: 160: modM1(mod);
  3898  0D05  0876               	movf	stepMotorX@mod+1,w
  3899  0D06  00F1               	movwf	modM1@m+1
  3900  0D07  0875               	movf	stepMotorX@mod,w
  3901  0D08  00F0               	movwf	modM1@m
  3902  0D09  120A  158A  25E9  120A  158A  	fcall	_modM1
  3903                           
  3904                           ;stepMotor.h: 162: if (dir == 1) {
  3905  0D0E  0377               	decf	stepMotorX@dir,w
  3906  0D0F  1D03               	btfss	3,2
  3907  0D10  2D24               	goto	l2209
  3908                           
  3909                           ;stepMotor.h: 163: PORTAbits.RA1 = 1;
  3910  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0D12  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0D13  1485               	bsf	5,1	;volatile
  3913                           
  3914                           ;stepMotor.h: 164: PORTAbits.RA0 = 1;
  3915  0D14  1405               	bsf	5,0	;volatile
  3916                           
  3917                           ;stepMotor.h: 165: ms_delay(speed);
  3918  0D15  0874               	movf	stepMotorX@speed,w
  3919  0D16  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  3920                           
  3921                           ;stepMotor.h: 166: PORTAbits.RA1 = 0;
  3922  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  3923  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  3924  0D1D  1085               	bcf	5,1	;volatile
  3925                           
  3926                           ;stepMotor.h: 167: PORTAbits.RA0 = 1;
  3927  0D1E  1405               	bsf	5,0	;volatile
  3928                           
  3929                           ;stepMotor.h: 168: ms_delay(speed);
  3930  0D1F  0874               	movf	stepMotorX@speed,w
  3931  0D20  120A  158A  23BE   	fcall	_ms_delay
  3932                           
  3933                           ;stepMotor.h: 169: }
  3934  0D23  0008               	return
  3935  0D24                     l2209:	
  3936                           
  3937                           ;stepMotor.h: 170: else if(dir == 0){
  3938  0D24  0877               	movf	stepMotorX@dir,w
  3939  0D25  1D03               	btfss	3,2
  3940  0D26  0008               	return
  3941                           
  3942                           ;stepMotor.h: 171: PORTAbits.RA1 = 1;
  3943  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0D29  1485               	bsf	5,1	;volatile
  3946                           
  3947                           ;stepMotor.h: 172: PORTAbits.RA0 = 0;
  3948  0D2A  1005               	bcf	5,0	;volatile
  3949                           
  3950                           ;stepMotor.h: 173: ms_delay(speed);
  3951  0D2B  0874               	movf	stepMotorX@speed,w
  3952  0D2C  120A  158A  23BE  120A  158A  	fcall	_ms_delay
  3953                           
  3954                           ;stepMotor.h: 174: PORTAbits.RA1 = 0;
  3955  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  3956  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  3957  0D33  1085               	bcf	5,1	;volatile
  3958                           
  3959                           ;stepMotor.h: 175: PORTAbits.RA0 = 0;
  3960  0D34  1005               	bcf	5,0	;volatile
  3961                           
  3962                           ;stepMotor.h: 176: ms_delay(speed);
  3963  0D35  0874               	movf	stepMotorX@speed,w
  3964  0D36  120A  158A  23BE   	fcall	_ms_delay
  3965  0D39  0008               	return
  3966  0D3A                     __end_of_stepMotorX:	
  3967                           
  3968                           	psect	text12
  3969  0BBE                     __ptext12:	
  3970 ;; *************** function _ms_delay *****************
  3971 ;; Defined at:
  3972 ;;		line 67 in file "stepMotor.h"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  val             1    wreg     unsigned char 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  val             1    2[COMMON] unsigned char 
  3977 ;;  i               1    3[COMMON] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3987 ;;      Params:         0       0       0       0       0
  3988 ;;      Locals:         2       0       0       0       0
  3989 ;;      Temps:          2       0       0       0       0
  3990 ;;      Totals:         4       0       0       0       0
  3991 ;;Total ram usage:        4 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_stepMotorX
  3997 ;;		_stepMotorY
  3998 ;;		_stepMotorZ
  3999 ;;		_full_drive
  4000 ;;		_half_drive
  4001 ;;		_microstep8
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _ms_delay
  4007  0BBE                     _ms_delay:	
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in _ms_delay: [wreg+status,2+status,0]
  4011                           ;ms_delay@val stored from wreg
  4012  0BBE  00F2               	movwf	ms_delay@val
  4013                           
  4014                           ;stepMotor.h: 68: unsigned char i;
  4015                           ;stepMotor.h: 69: for (i = 0; i < val; i++)
  4016  0BBF  01F3               	clrf	ms_delay@i
  4017  0BC0                     l2183:	
  4018  0BC0  0872               	movf	ms_delay@val,w
  4019  0BC1  0273               	subwf	ms_delay@i,w
  4020  0BC2  1803               	btfsc	3,0
  4021  0BC3  0008               	return
  4022                           
  4023                           ;stepMotor.h: 70: _delay((unsigned long)((1)*(8000000/4000.0)));
  4024  0BC4  3003               	movlw	3
  4025  0BC5  00F1               	movwf	??_ms_delay+1
  4026  0BC6  3097               	movlw	151
  4027  0BC7  00F0               	movwf	??_ms_delay
  4028  0BC8                     u3447:	
  4029  0BC8  0BF0               	decfsz	??_ms_delay,f
  4030  0BC9  2BC8               	goto	u3447
  4031  0BCA  0BF1               	decfsz	??_ms_delay+1,f
  4032  0BCB  2BC8               	goto	u3447
  4033  0BCC  2BCD               	nop2
  4034  0BCD  3001               	movlw	1
  4035  0BCE  00F0               	movwf	??_ms_delay
  4036  0BCF  0870               	movf	??_ms_delay,w
  4037  0BD0  07F3               	addwf	ms_delay@i,f
  4038  0BD1  2BC0               	goto	l2183
  4039  0BD2                     __end_of_ms_delay:	
  4040                           
  4041                           	psect	text13
  4042  0DE9                     __ptext13:	
  4043 ;; *************** function _modM1 *****************
  4044 ;; Defined at:
  4045 ;;		line 1 in file "motor_mode.h"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  m               2    0[COMMON] int 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4059 ;;      Params:         2       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0
  4062 ;;      Totals:         2       0       0       0       0
  4063 ;;Total ram usage:        2 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_stepMotorX
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function _modM1
  4074  0DE9                     _modM1:	
  4075                           
  4076                           ;motor_mode.h: 3: if(m == 1){
  4077                           
  4078                           ;incstack = 0
  4079                           ; Regs used in _modM1: [wreg+status,2+status,0]
  4080  0DE9  0370               	decf	modM1@m,w
  4081  0DEA  0471               	iorwf	modM1@m+1,w
  4082  0DEB  1D03               	btfss	3,2
  4083  0DEC  2DF2               	goto	l2085
  4084                           
  4085                           ;motor_mode.h: 4: PORTAbits.RA4 = 0;
  4086  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0DEF  1205               	bcf	5,4	;volatile
  4089                           
  4090                           ;motor_mode.h: 5: PORTAbits.RA3 = 0;
  4091  0DF0  1185               	bcf	5,3	;volatile
  4092                           
  4093                           ;motor_mode.h: 6: PORTAbits.RA2 = 0;
  4094  0DF1  1105               	bcf	5,2	;volatile
  4095  0DF2                     l2085:	
  4096                           
  4097                           ;motor_mode.h: 7: }
  4098                           ;motor_mode.h: 9: if(m == 2){
  4099  0DF2  3002               	movlw	2
  4100  0DF3  0670               	xorwf	modM1@m,w
  4101  0DF4  0471               	iorwf	modM1@m+1,w
  4102  0DF5  1D03               	btfss	3,2
  4103  0DF6  2DFC               	goto	l2089
  4104                           
  4105                           ;motor_mode.h: 10: PORTAbits.RA4 = 1;
  4106  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0DF9  1605               	bsf	5,4	;volatile
  4109                           
  4110                           ;motor_mode.h: 11: PORTAbits.RA3 = 0;
  4111  0DFA  1185               	bcf	5,3	;volatile
  4112                           
  4113                           ;motor_mode.h: 12: PORTAbits.RA2 = 0;
  4114  0DFB  1105               	bcf	5,2	;volatile
  4115  0DFC                     l2089:	
  4116                           
  4117                           ;motor_mode.h: 13: }
  4118                           ;motor_mode.h: 14: if(m == 3){
  4119  0DFC  3003               	movlw	3
  4120  0DFD  0670               	xorwf	modM1@m,w
  4121  0DFE  0471               	iorwf	modM1@m+1,w
  4122  0DFF  1D03               	btfss	3,2
  4123  0E00  2E06               	goto	l2093
  4124                           
  4125                           ;motor_mode.h: 15: PORTAbits.RA4 = 0;
  4126  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  4127  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  4128  0E03  1205               	bcf	5,4	;volatile
  4129                           
  4130                           ;motor_mode.h: 16: PORTAbits.RA3 = 1;
  4131  0E04  1585               	bsf	5,3	;volatile
  4132                           
  4133                           ;motor_mode.h: 17: PORTAbits.RA2 = 0;
  4134  0E05  1105               	bcf	5,2	;volatile
  4135  0E06                     l2093:	
  4136                           
  4137                           ;motor_mode.h: 18: }
  4138                           ;motor_mode.h: 19: if(m == 4){
  4139  0E06  3004               	movlw	4
  4140  0E07  0670               	xorwf	modM1@m,w
  4141  0E08  0471               	iorwf	modM1@m+1,w
  4142  0E09  1D03               	btfss	3,2
  4143  0E0A  2E10               	goto	l2097
  4144                           
  4145                           ;motor_mode.h: 20: PORTAbits.RA4 = 1;
  4146  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0E0D  1605               	bsf	5,4	;volatile
  4149                           
  4150                           ;motor_mode.h: 21: PORTAbits.RA3 = 1;
  4151  0E0E  1585               	bsf	5,3	;volatile
  4152                           
  4153                           ;motor_mode.h: 22: PORTAbits.RA2 = 0;
  4154  0E0F  1105               	bcf	5,2	;volatile
  4155  0E10                     l2097:	
  4156                           
  4157                           ;motor_mode.h: 23: }
  4158                           ;motor_mode.h: 24: if(m == 5){
  4159  0E10  3005               	movlw	5
  4160  0E11  0670               	xorwf	modM1@m,w
  4161  0E12  0471               	iorwf	modM1@m+1,w
  4162  0E13  1D03               	btfss	3,2
  4163  0E14  2E1A               	goto	l2101
  4164                           
  4165                           ;motor_mode.h: 25: PORTAbits.RA4 = 0;
  4166  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  4167  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  4168  0E17  1205               	bcf	5,4	;volatile
  4169                           
  4170                           ;motor_mode.h: 26: PORTAbits.RA3 = 0;
  4171  0E18  1185               	bcf	5,3	;volatile
  4172                           
  4173                           ;motor_mode.h: 27: PORTAbits.RA2 = 1;
  4174  0E19  1505               	bsf	5,2	;volatile
  4175  0E1A                     l2101:	
  4176                           
  4177                           ;motor_mode.h: 28: }
  4178                           ;motor_mode.h: 29: if(m == 6){
  4179  0E1A  3006               	movlw	6
  4180  0E1B  0670               	xorwf	modM1@m,w
  4181  0E1C  0471               	iorwf	modM1@m+1,w
  4182  0E1D  1D03               	btfss	3,2
  4183  0E1E  2E24               	goto	l2105
  4184                           
  4185                           ;motor_mode.h: 30: PORTAbits.RA4 = 1;
  4186  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  4187  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  4188  0E21  1605               	bsf	5,4	;volatile
  4189                           
  4190                           ;motor_mode.h: 31: PORTAbits.RA3 = 0;
  4191  0E22  1185               	bcf	5,3	;volatile
  4192                           
  4193                           ;motor_mode.h: 32: PORTAbits.RA2 = 1;
  4194  0E23  1505               	bsf	5,2	;volatile
  4195  0E24                     l2105:	
  4196                           
  4197                           ;motor_mode.h: 33: }
  4198                           ;motor_mode.h: 34: if(m == 7){
  4199  0E24  3007               	movlw	7
  4200  0E25  0670               	xorwf	modM1@m,w
  4201  0E26  0471               	iorwf	modM1@m+1,w
  4202  0E27  1D03               	btfss	3,2
  4203  0E28  2E2E               	goto	l2109
  4204                           
  4205                           ;motor_mode.h: 35: PORTAbits.RA4 = 0;
  4206  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  4207  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  4208  0E2B  1205               	bcf	5,4	;volatile
  4209                           
  4210                           ;motor_mode.h: 36: PORTAbits.RA3 = 1;
  4211  0E2C  1585               	bsf	5,3	;volatile
  4212                           
  4213                           ;motor_mode.h: 37: PORTAbits.RA2 = 1;
  4214  0E2D  1505               	bsf	5,2	;volatile
  4215  0E2E                     l2109:	
  4216                           
  4217                           ;motor_mode.h: 38: }
  4218                           ;motor_mode.h: 39: if(m == 8){
  4219  0E2E  3008               	movlw	8
  4220  0E2F  0670               	xorwf	modM1@m,w
  4221  0E30  0471               	iorwf	modM1@m+1,w
  4222  0E31  1D03               	btfss	3,2
  4223  0E32  0008               	return
  4224                           
  4225                           ;motor_mode.h: 40: PORTAbits.RA4 = 1;
  4226  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  4227  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  4228  0E35  1605               	bsf	5,4	;volatile
  4229                           
  4230                           ;motor_mode.h: 41: PORTAbits.RA3 = 1;
  4231  0E36  1585               	bsf	5,3	;volatile
  4232                           
  4233                           ;motor_mode.h: 42: PORTAbits.RA2 = 1;
  4234  0E37  1505               	bsf	5,2	;volatile
  4235  0E38  0008               	return
  4236  0E39                     __end_of_modM1:	
  4237                           
  4238                           	psect	text14
  4239  0B97                     __ptext14:	
  4240 ;; *************** function _limitz *****************
  4241 ;; Defined at:
  4242 ;;		line 263 in file "stepMotor.h"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  2    0[COMMON] int 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4256 ;;      Params:         2       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0
  4259 ;;      Totals:         2       0       0       0       0
  4260 ;;Total ram usage:        2 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_motorXInit
  4266 ;;		_motorYInit
  4267 ;;		_motorZInit
  4268 ;;		_reset
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           
  4273                           ;psect for function _limitz
  4274  0B97                     _limitz:	
  4275                           
  4276                           ;stepMotor.h: 264: if(PORTBbits.RB4 == 1)
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in _limitz: [wreg+status,2]
  4280  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  4282  0B99  1E06               	btfss	6,4	;volatile
  4283  0B9A  2BA0               	goto	l211
  4284                           
  4285                           ;stepMotor.h: 265: return 1;
  4286  0B9B  3001               	movlw	1
  4287  0B9C  00F0               	movwf	?_limitz
  4288  0B9D  3000               	movlw	0
  4289  0B9E  00F1               	movwf	?_limitz+1
  4290  0B9F  0008               	return
  4291  0BA0                     l211:	
  4292                           
  4293                           ;stepMotor.h: 266: if(PORTBbits.RB5 == 1)
  4294  0BA0  1E86               	btfss	6,5	;volatile
  4295  0BA1  2BA7               	goto	l2275
  4296                           
  4297                           ;stepMotor.h: 267: return 2;
  4298  0BA2  3002               	movlw	2
  4299  0BA3  00F0               	movwf	?_limitz
  4300  0BA4  3000               	movlw	0
  4301  0BA5  00F1               	movwf	?_limitz+1
  4302  0BA6  0008               	return
  4303  0BA7                     l2275:	
  4304                           
  4305                           ;stepMotor.h: 269: else return 0;
  4306  0BA7  01F0               	clrf	?_limitz
  4307  0BA8  01F1               	clrf	?_limitz+1
  4308  0BA9  0008               	return
  4309  0BAA                     __end_of_limitz:	
  4310                           
  4311                           	psect	text15
  4312  0DA6                     __ptext15:	
  4313 ;; *************** function _maxStep *****************
  4314 ;; Defined at:
  4315 ;;		line 231 in file "stepMotor.h"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  stepx           2    0[COMMON] int 
  4318 ;;  stepy           2    2[COMMON] int 
  4319 ;;  stepz           2    4[COMMON] int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  l               2   11[COMMON] int 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  2    0[COMMON] int 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4331 ;;      Params:         6       0       0       0       0
  4332 ;;      Locals:         6       0       0       0       0
  4333 ;;      Temps:          1       0       0       0       0
  4334 ;;      Totals:        13       0       0       0       0
  4335 ;;Total ram usage:       13 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _maxStep
  4346  0DA6                     _maxStep:	
  4347                           
  4348                           ;stepMotor.h: 232: int l = 0;
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _maxStep: [wreg+status,2]
  4352  0DA6  01FB               	clrf	maxStep@l
  4353  0DA7  01FC               	clrf	maxStep@l+1
  4354                           
  4355                           ;stepMotor.h: 233: return l = stepx > stepy ? (stepx > stepz ? stepx : stepz) : (stepy >
      +                           stepz ? stepy : stepz);
  4356  0DA8  0873               	movf	maxStep@stepy+1,w
  4357  0DA9  3A80               	xorlw	128
  4358  0DAA  00F6               	movwf	??_maxStep
  4359  0DAB  0871               	movf	maxStep@stepx+1,w
  4360  0DAC  3A80               	xorlw	128
  4361  0DAD  0276               	subwf	??_maxStep,w
  4362  0DAE  1D03               	skipz
  4363  0DAF  2DB2               	goto	u2285
  4364  0DB0  0870               	movf	maxStep@stepx,w
  4365  0DB1  0272               	subwf	maxStep@stepy,w
  4366  0DB2                     u2285:	
  4367  0DB2  1C03               	skipc
  4368  0DB3  2DCC               	goto	l2387
  4369  0DB4  0875               	movf	maxStep@stepz+1,w
  4370  0DB5  3A80               	xorlw	128
  4371  0DB6  00F6               	movwf	??_maxStep
  4372  0DB7  0873               	movf	maxStep@stepy+1,w
  4373  0DB8  3A80               	xorlw	128
  4374  0DB9  0276               	subwf	??_maxStep,w
  4375  0DBA  1D03               	skipz
  4376  0DBB  2DBE               	goto	u2295
  4377  0DBC  0872               	movf	maxStep@stepy,w
  4378  0DBD  0274               	subwf	maxStep@stepz,w
  4379  0DBE                     u2295:	
  4380  0DBE  1C03               	skipc
  4381  0DBF  2DC4               	goto	l2385
  4382  0DC0  0875               	movf	maxStep@stepz+1,w
  4383  0DC1  00F8               	movwf	_maxStep$394+1
  4384  0DC2  0874               	movf	maxStep@stepz,w
  4385  0DC3  2DC7               	goto	L1
  4386  0DC4                     l2385:	
  4387  0DC4  0873               	movf	maxStep@stepy+1,w
  4388  0DC5  00F8               	movwf	_maxStep$394+1
  4389  0DC6  0872               	movf	maxStep@stepy,w
  4390  0DC7                     L1:	
  4391  0DC7  00F7               	movwf	_maxStep$394
  4392  0DC8  0878               	movf	_maxStep$394+1,w
  4393  0DC9  00FC               	movwf	maxStep@l+1
  4394  0DCA  0877               	movf	_maxStep$394,w
  4395  0DCB  2DE3               	goto	L2
  4396  0DCC                     l2387:	
  4397  0DCC  0875               	movf	maxStep@stepz+1,w
  4398  0DCD  3A80               	xorlw	128
  4399  0DCE  00F6               	movwf	??_maxStep
  4400  0DCF  0871               	movf	maxStep@stepx+1,w
  4401  0DD0  3A80               	xorlw	128
  4402  0DD1  0276               	subwf	??_maxStep,w
  4403  0DD2  1D03               	skipz
  4404  0DD3  2DD6               	goto	u2305
  4405  0DD4  0870               	movf	maxStep@stepx,w
  4406  0DD5  0274               	subwf	maxStep@stepz,w
  4407  0DD6                     u2305:	
  4408  0DD6  1C03               	skipc
  4409  0DD7  2DDC               	goto	l2391
  4410  0DD8  0875               	movf	maxStep@stepz+1,w
  4411  0DD9  00FA               	movwf	_maxStep$395+1
  4412  0DDA  0874               	movf	maxStep@stepz,w
  4413  0DDB  2DDF               	goto	L3
  4414  0DDC                     l2391:	
  4415  0DDC  0871               	movf	maxStep@stepx+1,w
  4416  0DDD  00FA               	movwf	_maxStep$395+1
  4417  0DDE  0870               	movf	maxStep@stepx,w
  4418  0DDF                     L3:	
  4419  0DDF  00F9               	movwf	_maxStep$395
  4420  0DE0  087A               	movf	_maxStep$395+1,w
  4421  0DE1  00FC               	movwf	maxStep@l+1
  4422  0DE2  0879               	movf	_maxStep$395,w
  4423  0DE3                     L2:	
  4424  0DE3  00FB               	movwf	maxStep@l
  4425  0DE4  087C               	movf	maxStep@l+1,w
  4426  0DE5  00F1               	movwf	?_maxStep+1
  4427  0DE6  087B               	movf	maxStep@l,w
  4428  0DE7  00F0               	movwf	?_maxStep
  4429  0DE8  0008               	return
  4430  0DE9                     __end_of_maxStep:	
  4431                           
  4432                           	psect	text16
  4433  0F34                     __ptext16:	
  4434 ;; *************** function _getCoords *****************
  4435 ;; Defined at:
  4436 ;;		line 250 in file "main.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  coords          1    wreg     PTR unsigned char 
  4439 ;;		 -> coords(9), 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  coords          1    8[COMMON] PTR unsigned char 
  4442 ;;		 -> coords(9), 
  4443 ;;  i               2    9[COMMON] int 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  2   72[None  ] int 
  4446 ;; Registers used:
  4447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4453 ;;      Params:         0       0       0       0       0
  4454 ;;      Locals:         3       0       0       0       0
  4455 ;;      Temps:          3       0       0       0       0
  4456 ;;      Totals:         6       0       0       0       0
  4457 ;;Total ram usage:        6 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    2
  4460 ;; This function calls:
  4461 ;;		_UART_RxString
  4462 ;;		_UART_TxString
  4463 ;; This function is called by:
  4464 ;;		_main
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           
  4469                           ;psect for function _getCoords
  4470  0F34                     _getCoords:	
  4471                           
  4472                           ;incstack = 0
  4473                           ; Regs used in _getCoords: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4474                           ;getCoords@coords stored from wreg
  4475  0F34  00F8               	movwf	getCoords@coords
  4476                           
  4477                           ;main.c: 253: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4478  0F35  300B               	movlw	11
  4479  0F36  00F7               	movwf	??_getCoords+2
  4480  0F37  3026               	movlw	38
  4481  0F38  00F6               	movwf	??_getCoords+1
  4482  0F39  3066               	movlw	102
  4483  0F3A  00F5               	movwf	??_getCoords
  4484  0F3B                     u3457:	
  4485  0F3B  0BF5               	decfsz	??_getCoords,f
  4486  0F3C  2F3B               	goto	u3457
  4487  0F3D  0BF6               	decfsz	??_getCoords+1,f
  4488  0F3E  2F3B               	goto	u3457
  4489  0F3F  0BF7               	decfsz	??_getCoords+2,f
  4490  0F40  2F3B               	goto	u3457
  4491  0F41  2F42               	nop2
  4492                           
  4493                           ;main.c: 254: UART_RxString(coords);
  4494  0F42  0878               	movf	getCoords@coords,w
  4495  0F43  120A  158A  24D1  120A  158A  	fcall	_UART_RxString
  4496                           
  4497                           ;main.c: 255: UART_TxString("eco ricezione: ");
  4498  0F48  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  4499  0F49  00F1               	movwf	UART_TxString@str
  4500  0F4A  3080               	movlw	128
  4501  0F4B  00F2               	movwf	UART_TxString@str+1
  4502  0F4C  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4503                           
  4504                           ;main.c: 256: UART_TxString(coords);
  4505  0F51  0878               	movf	getCoords@coords,w
  4506  0F52  00F1               	movwf	UART_TxString@str
  4507  0F53  3000               	movlw	0
  4508  0F54  00F2               	movwf	UART_TxString@str+1
  4509  0F55  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4510                           
  4511                           ;main.c: 259: for(int i = 0; i<3; i++){
  4512  0F5A  01F9               	clrf	getCoords@i
  4513  0F5B  01FA               	clrf	getCoords@i+1
  4514  0F5C                     L4:	
  4515  0F5C  087A               	movf	getCoords@i+1,w
  4516  0F5D  3A80               	xorlw	128
  4517  0F5E  00FF               	movwf	127
  4518  0F5F  3080               	movlw	128
  4519  0F60  027F               	subwf	127,w
  4520  0F61  1D03               	skipz
  4521  0F62  2F65               	goto	u2865
  4522  0F63  3003               	movlw	3
  4523  0F64  0279               	subwf	getCoords@i,w
  4524  0F65                     u2865:	
  4525  0F65  1803               	btfsc	3,0
  4526  0F66  0008               	return
  4527                           
  4528                           ;main.c: 260: stepX[i] = coords[i];
  4529  0F67  0879               	movf	getCoords@i,w
  4530  0F68  0778               	addwf	getCoords@coords,w
  4531  0F69  00F5               	movwf	??_getCoords
  4532  0F6A  0875               	movf	??_getCoords,w
  4533  0F6B  0084               	movwf	4
  4534  0F6C  1383               	bcf	3,7	;select IRP bank0
  4535  0F6D  0800               	movf	0,w
  4536  0F6E  00F6               	movwf	??_getCoords+1
  4537  0F6F  0879               	movf	getCoords@i,w
  4538  0F70  3EB0               	addlw	(low (_stepX| 0))& (0+255)
  4539  0F71  0084               	movwf	4
  4540  0F72  0876               	movf	??_getCoords+1,w
  4541  0F73  0080               	movwf	0
  4542                           
  4543                           ;main.c: 261: stepY[i] = coords[3+i];
  4544  0F74  0879               	movf	getCoords@i,w
  4545  0F75  3E03               	addlw	3
  4546  0F76  0778               	addwf	getCoords@coords,w
  4547  0F77  00F5               	movwf	??_getCoords
  4548  0F78  0875               	movf	??_getCoords,w
  4549  0F79  0084               	movwf	4
  4550  0F7A  0800               	movf	0,w
  4551  0F7B  00F6               	movwf	??_getCoords+1
  4552  0F7C  0879               	movf	getCoords@i,w
  4553  0F7D  3EB7               	addlw	(low (_stepY| 0))& (0+255)
  4554  0F7E  0084               	movwf	4
  4555  0F7F  0876               	movf	??_getCoords+1,w
  4556  0F80  0080               	movwf	0
  4557                           
  4558                           ;main.c: 262: stepZ[i] = coords[6+i];
  4559  0F81  0879               	movf	getCoords@i,w
  4560  0F82  3E06               	addlw	6
  4561  0F83  0778               	addwf	getCoords@coords,w
  4562  0F84  00F5               	movwf	??_getCoords
  4563  0F85  0875               	movf	??_getCoords,w
  4564  0F86  0084               	movwf	4
  4565  0F87  0800               	movf	0,w
  4566  0F88  00F6               	movwf	??_getCoords+1
  4567  0F89  0879               	movf	getCoords@i,w
  4568  0F8A  3EBE               	addlw	(low (_stepZ| 0))& (0+255)
  4569  0F8B  0084               	movwf	4
  4570  0F8C  0876               	movf	??_getCoords+1,w
  4571  0F8D  0080               	movwf	0
  4572  0F8E  3001               	movlw	1
  4573  0F8F  07F9               	addwf	getCoords@i,f
  4574  0F90  1803               	skipnc
  4575  0F91  0AFA               	incf	getCoords@i+1,f
  4576  0F92  3000               	movlw	0
  4577  0F93  07FA               	addwf	getCoords@i+1,f
  4578  0F94  2F5C               	goto	L4
  4579  0F95                     __end_of_getCoords:	
  4580                           
  4581                           	psect	text17
  4582  0F95                     __ptext17:	
  4583 ;; *************** function _getCanvasDim *****************
  4584 ;; Defined at:
  4585 ;;		line 231 in file "main.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  canvas          1    wreg     PTR unsigned char 
  4588 ;;		 -> canvas(7), 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  canvas          1    7[COMMON] PTR unsigned char 
  4591 ;;		 -> canvas(7), 
  4592 ;;  j               2    8[COMMON] int 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  2   66[None  ] int 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4602 ;;      Params:         0       0       0       0       0
  4603 ;;      Locals:         3       0       0       0       0
  4604 ;;      Temps:          2       0       0       0       0
  4605 ;;      Totals:         5       0       0       0       0
  4606 ;;Total ram usage:        5 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    2
  4609 ;; This function calls:
  4610 ;;		_UART_RxString
  4611 ;;		_UART_TxString
  4612 ;; This function is called by:
  4613 ;;		_main
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           
  4618                           ;psect for function _getCanvasDim
  4619  0F95                     _getCanvasDim:	
  4620                           
  4621                           ;incstack = 0
  4622                           ; Regs used in _getCanvasDim: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4623                           ;getCanvasDim@canvas stored from wreg
  4624  0F95  00F7               	movwf	getCanvasDim@canvas
  4625                           
  4626                           ;main.c: 234: UART_TxString("ready");
  4627  0F96  303E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  4628  0F97  00F1               	movwf	UART_TxString@str
  4629  0F98  3080               	movlw	128
  4630  0F99  00F2               	movwf	UART_TxString@str+1
  4631  0F9A  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4632                           
  4633                           ;main.c: 235: UART_RxString(canvas);
  4634  0F9F  0877               	movf	getCanvasDim@canvas,w
  4635  0FA0  120A  158A  24D1  120A  158A  	fcall	_UART_RxString
  4636                           
  4637                           ;main.c: 237: for(int j = 0; j<3; j++){
  4638  0FA5  01F8               	clrf	getCanvasDim@j
  4639  0FA6  01F9               	clrf	getCanvasDim@j+1
  4640  0FA7  0879               	movf	getCanvasDim@j+1,w
  4641  0FA8  3A80               	xorlw	128
  4642  0FA9  00FF               	movwf	127
  4643  0FAA  3080               	movlw	128
  4644  0FAB  027F               	subwf	127,w
  4645  0FAC  1D03               	skipz
  4646  0FAD  2FB0               	goto	u2795
  4647  0FAE  3003               	movlw	3
  4648  0FAF  0278               	subwf	getCanvasDim@j,w
  4649  0FB0                     u2795:	
  4650  0FB0  1803               	btfsc	3,0
  4651  0FB1  2FDD               	goto	l2747
  4652  0FB2                     l2741:	
  4653                           
  4654                           ;main.c: 238: canvasX[j] = canvas[j];
  4655  0FB2  0878               	movf	getCanvasDim@j,w
  4656  0FB3  0777               	addwf	getCanvasDim@canvas,w
  4657  0FB4  00F5               	movwf	??_getCanvasDim
  4658  0FB5  0875               	movf	??_getCanvasDim,w
  4659  0FB6  0084               	movwf	4
  4660  0FB7  1383               	bcf	3,7	;select IRP bank0
  4661  0FB8  0800               	movf	0,w
  4662  0FB9  00F6               	movwf	??_getCanvasDim+1
  4663  0FBA  0878               	movf	getCanvasDim@j,w
  4664  0FBB  3E6C               	addlw	(low (_canvasX| 0))& (0+255)
  4665  0FBC  0084               	movwf	4
  4666  0FBD  0876               	movf	??_getCanvasDim+1,w
  4667  0FBE  0080               	movwf	0
  4668                           
  4669                           ;main.c: 239: canvasY[j] = canvas[3+j];
  4670  0FBF  0878               	movf	getCanvasDim@j,w
  4671  0FC0  3E03               	addlw	3
  4672  0FC1  0777               	addwf	getCanvasDim@canvas,w
  4673  0FC2  00F5               	movwf	??_getCanvasDim
  4674  0FC3  0875               	movf	??_getCanvasDim,w
  4675  0FC4  0084               	movwf	4
  4676  0FC5  0800               	movf	0,w
  4677  0FC6  00F6               	movwf	??_getCanvasDim+1
  4678  0FC7  0878               	movf	getCanvasDim@j,w
  4679  0FC8  3EC5               	addlw	(low (_canvasY| 0))& (0+255)
  4680  0FC9  0084               	movwf	4
  4681  0FCA  0876               	movf	??_getCanvasDim+1,w
  4682  0FCB  0080               	movwf	0
  4683  0FCC  3001               	movlw	1
  4684  0FCD  07F8               	addwf	getCanvasDim@j,f
  4685  0FCE  1803               	skipnc
  4686  0FCF  0AF9               	incf	getCanvasDim@j+1,f
  4687  0FD0  3000               	movlw	0
  4688  0FD1  07F9               	addwf	getCanvasDim@j+1,f
  4689  0FD2  0879               	movf	getCanvasDim@j+1,w
  4690  0FD3  3A80               	xorlw	128
  4691  0FD4  00FF               	movwf	127
  4692  0FD5  3080               	movlw	128
  4693  0FD6  027F               	subwf	127,w
  4694  0FD7  1D03               	skipz
  4695  0FD8  2FDB               	goto	u2805
  4696  0FD9  3003               	movlw	3
  4697  0FDA  0278               	subwf	getCanvasDim@j,w
  4698  0FDB                     u2805:	
  4699  0FDB  1C03               	skipc
  4700  0FDC  2FB2               	goto	l2741
  4701  0FDD                     l2747:	
  4702                           
  4703                           ;main.c: 240: }
  4704                           ;main.c: 243: UART_TxString("X: ");
  4705  0FDD  3016               	movlw	(low (((STR_7+5)-__stringbase)| (0+32768)))& (0+255)
  4706  0FDE  00F1               	movwf	UART_TxString@str
  4707  0FDF  3080               	movlw	128
  4708  0FE0  00F2               	movwf	UART_TxString@str+1
  4709  0FE1  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4710                           
  4711                           ;main.c: 244: UART_TxString(canvasX);
  4712  0FE6  306C               	movlw	(low (_canvasX| 0))& (0+255)
  4713  0FE7  00F1               	movwf	UART_TxString@str
  4714  0FE8  3000               	movlw	0
  4715  0FE9  00F2               	movwf	UART_TxString@str+1
  4716  0FEA  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4717                           
  4718                           ;main.c: 245: UART_TxString("Y: ");
  4719  0FEF  301F               	movlw	(low (((STR_8+5)-__stringbase)| (0+32768)))& (0+255)
  4720  0FF0  00F1               	movwf	UART_TxString@str
  4721  0FF1  3080               	movlw	128
  4722  0FF2  00F2               	movwf	UART_TxString@str+1
  4723  0FF3  120A  158A  2436  120A  158A  	fcall	_UART_TxString
  4724                           
  4725                           ;main.c: 246: UART_TxString(canvasY);
  4726  0FF8  30C5               	movlw	(low (_canvasY| 0))& (0+255)
  4727  0FF9  00F1               	movwf	UART_TxString@str
  4728  0FFA  3000               	movlw	0
  4729  0FFB  00F2               	movwf	UART_TxString@str+1
  4730  0FFC  120A  158A  2436   	fcall	_UART_TxString
  4731  0FFF  0008               	return
  4732  1000                     __end_of_getCanvasDim:	
  4733                           
  4734                           	psect	text18
  4735  0C36                     __ptext18:	
  4736 ;; *************** function _UART_TxString *****************
  4737 ;; Defined at:
  4738 ;;		line 41 in file "UART.h"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  str             2    1[COMMON] PTR const unsigned char 
  4741 ;;		 -> STR_12(16), STR_11(4), STR_10(4), STR_9(6), 
  4742 ;;		 -> STR_8(9), STR_7(9), STR_6(7), STR_5(7), 
  4743 ;;		 -> STR_4(7), STR_1(6), coords(9), canvasY(3), 
  4744 ;;		 -> canvasX(3), 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4756 ;;      Params:         2       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0
  4759 ;;      Totals:         2       0       0       0       0
  4760 ;;Total ram usage:        2 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    1
  4763 ;; This function calls:
  4764 ;;		_UART_TxChar
  4765 ;; This function is called by:
  4766 ;;		_main
  4767 ;;		_getCanvasDim
  4768 ;;		_getCoords
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _UART_TxString
  4774  0C36                     _UART_TxString:	
  4775  0C36                     l2285:	
  4776                           ;UART.h: 42: while(*str)
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4780                           
  4781  0C36  0872               	movf	UART_TxString@str+1,w
  4782  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  4783  0C38  1303               	bcf	3,6	;RP1=0, select bank0
  4784  0C39  00FF               	movwf	127
  4785  0C3A  0871               	movf	UART_TxString@str,w
  4786  0C3B  0084               	movwf	4
  4787  0C3C  120A  158A  2000  120A  158A  	fcall	stringtab
  4788  0C41  3A00               	xorlw	0
  4789  0C42  1903               	btfsc	3,2
  4790  0C43  0008               	return
  4791                           
  4792                           ;UART.h: 43: {
  4793                           ;UART.h: 44: UART_TxChar(*str);
  4794  0C44  0872               	movf	UART_TxString@str+1,w
  4795  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  4796  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  4797  0C47  00FF               	movwf	127
  4798  0C48  0871               	movf	UART_TxString@str,w
  4799  0C49  0084               	movwf	4
  4800  0C4A  120A  158A  2000  120A  158A  	fcall	stringtab
  4801  0C4F  120A  158A  2367  120A  158A  	fcall	_UART_TxChar
  4802                           
  4803                           ;UART.h: 45: str++;
  4804  0C54  3001               	movlw	1
  4805  0C55  07F1               	addwf	UART_TxString@str,f
  4806  0C56  1803               	skipnc
  4807  0C57  0AF2               	incf	UART_TxString@str+1,f
  4808  0C58  2C36               	goto	l2285
  4809  0C59                     __end_of_UART_TxString:	
  4810                           
  4811                           	psect	text19
  4812  0CD1                     __ptext19:	
  4813 ;; *************** function _UART_RxString *****************
  4814 ;; Defined at:
  4815 ;;		line 64 in file "UART.h"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  stringa         1    wreg     PTR unsigned char 
  4818 ;;		 -> coords(9), canvas(7), 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;  stringa         1    2[COMMON] PTR unsigned char 
  4821 ;;		 -> coords(9), canvas(7), 
  4822 ;;  ch              1    4[COMMON] unsigned char 
  4823 ;;  len             1    3[COMMON] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  1    wreg      unsigned char 
  4826 ;; Registers used:
  4827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4833 ;;      Params:         0       0       0       0       0
  4834 ;;      Locals:         3       0       0       0       0
  4835 ;;      Temps:          2       0       0       0       0
  4836 ;;      Totals:         5       0       0       0       0
  4837 ;;Total ram usage:        5 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    1
  4840 ;; This function calls:
  4841 ;;		_UART_RxChar
  4842 ;; This function is called by:
  4843 ;;		_main
  4844 ;;		_getCanvasDim
  4845 ;;		_getCoords
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           
  4850                           ;psect for function _UART_RxString
  4851  0CD1                     _UART_RxString:	
  4852                           
  4853                           ;incstack = 0
  4854                           ; Regs used in _UART_RxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4855                           ;UART_RxString@stringa stored from wreg
  4856  0CD1  00F2               	movwf	UART_RxString@stringa
  4857                           
  4858                           ;UART.h: 66: char ch;
  4859                           ;UART.h: 67: char len = 0;
  4860  0CD2  01F3               	clrf	UART_RxString@len
  4861  0CD3                     l2289:	
  4862                           ;UART.h: 69: while(1)
  4863                           
  4864                           
  4865                           ;UART.h: 70: {
  4866                           ;UART.h: 71: ch=UART_RxChar();
  4867  0CD3  120A  158A  237B  120A  158A  	fcall	_UART_RxChar
  4868  0CD8  00F0               	movwf	??_UART_RxString
  4869  0CD9  0870               	movf	??_UART_RxString,w
  4870  0CDA  00F4               	movwf	UART_RxString@ch
  4871                           
  4872                           ;UART.h: 73: if((ch=='\r') || (ch=='\n'))
  4873  0CDB  300D               	movlw	13
  4874  0CDC  0674               	xorwf	UART_RxString@ch,w
  4875  0CDD  1903               	btfsc	3,2
  4876  0CDE  2CE3               	goto	l2295
  4877  0CDF  300A               	movlw	10
  4878  0CE0  0674               	xorwf	UART_RxString@ch,w
  4879  0CE1  1D03               	btfss	3,2
  4880  0CE2  2CEB               	goto	l2299
  4881  0CE3                     l2295:	
  4882                           
  4883                           ;UART.h: 74: {
  4884                           ;UART.h: 75: stringa[len]='\0';
  4885  0CE3  0873               	movf	UART_RxString@len,w
  4886  0CE4  0772               	addwf	UART_RxString@stringa,w
  4887  0CE5  00F0               	movwf	??_UART_RxString
  4888  0CE6  0870               	movf	??_UART_RxString,w
  4889  0CE7  0084               	movwf	4
  4890  0CE8  1383               	bcf	3,7	;select IRP bank0
  4891  0CE9  0180               	clrf	0
  4892                           
  4893                           ;UART.h: 76: break;
  4894  0CEA  0008               	return
  4895  0CEB                     l2299:	
  4896                           ;UART.h: 78: }
  4897                           
  4898                           
  4899                           ;UART.h: 79: else if((ch=='\b') && (len!=0))
  4900  0CEB  3008               	movlw	8
  4901  0CEC  0674               	xorwf	UART_RxString@ch,w
  4902  0CED  1D03               	btfss	3,2
  4903  0CEE  2CF5               	goto	l2305
  4904  0CEF  0873               	movf	UART_RxString@len,w
  4905  0CF0  1903               	btfsc	3,2
  4906  0CF1  2CF5               	goto	l2305
  4907                           
  4908                           ;UART.h: 80: {
  4909                           ;UART.h: 81: len--;
  4910  0CF2  3001               	movlw	1
  4911  0CF3  02F3               	subwf	UART_RxString@len,f
  4912                           
  4913                           ;UART.h: 82: }
  4914  0CF4  2CD3               	goto	l2289
  4915  0CF5                     l2305:	
  4916                           
  4917                           ;UART.h: 83: else
  4918                           ;UART.h: 84: {
  4919                           ;UART.h: 85: stringa[len]=ch;
  4920  0CF5  0874               	movf	UART_RxString@ch,w
  4921  0CF6  00F0               	movwf	??_UART_RxString
  4922  0CF7  0873               	movf	UART_RxString@len,w
  4923  0CF8  0772               	addwf	UART_RxString@stringa,w
  4924  0CF9  00F1               	movwf	??_UART_RxString+1
  4925  0CFA  0871               	movf	??_UART_RxString+1,w
  4926  0CFB  0084               	movwf	4
  4927  0CFC  0870               	movf	??_UART_RxString,w
  4928  0CFD  1383               	bcf	3,7	;select IRP bank0
  4929  0CFE  0080               	movwf	0
  4930                           
  4931                           ;UART.h: 86: len++;
  4932  0CFF  3001               	movlw	1
  4933  0D00  00F0               	movwf	??_UART_RxString
  4934  0D01  0870               	movf	??_UART_RxString,w
  4935  0D02  07F3               	addwf	UART_RxString@len,f
  4936  0D03  2CD3               	goto	l2289
  4937  0D04                     __end_of_UART_RxString:	
  4938                           ;UART.h: 87: }
  4939                           ;UART.h: 89: }
  4940                           ;UART.h: 91: return len;
  4941                           ;	Return value of _UART_RxString is never used
  4942                           
  4943                           
  4944                           	psect	text20
  4945  0B7B                     __ptext20:	
  4946 ;; *************** function _UART_RxChar *****************
  4947 ;; Defined at:
  4948 ;;		line 50 in file "UART.h"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      unsigned char 
  4955 ;; Registers used:
  4956 ;;		wreg
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4962 ;;      Params:         0       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0
  4964 ;;      Temps:          0       0       0       0       0
  4965 ;;      Totals:         0       0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_UART_RxString
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _UART_RxChar
  4977  0B7B                     _UART_RxChar:	
  4978                           
  4979                           ;UART.h: 52: if(OERR)
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _UART_RxChar: [wreg]
  4983  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  4984  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  4985  0B7D  1C98               	btfss	24,1	;volatile
  4986  0B7E  2B81               	goto	l233
  4987                           
  4988                           ;UART.h: 53: {
  4989                           ;UART.h: 54: CREN = 0;
  4990  0B7F  1218               	bcf	24,4	;volatile
  4991                           
  4992                           ;UART.h: 55: CREN = 1;
  4993  0B80  1618               	bsf	24,4	;volatile
  4994  0B81                     l233:	
  4995                           ;UART.h: 56: }
  4996                           ;UART.h: 58: while(!RCIF);
  4997                           
  4998  0B81  1E8C               	btfss	12,5	;volatile
  4999  0B82  2B81               	goto	l233
  5000                           
  5001                           ;UART.h: 59: RCIF=0;
  5002  0B83  128C               	bcf	12,5	;volatile
  5003                           
  5004                           ;UART.h: 60: return RCREG;
  5005  0B84  081A               	movf	26,w	;volatile
  5006  0B85  0008               	return
  5007  0B86                     __end_of_UART_RxChar:	
  5008                           
  5009                           	psect	text21
  5010  0BF3                     __ptext21:	
  5011 ;; *************** function _equivVal *****************
  5012 ;; Defined at:
  5013 ;;		line 266 in file "main.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  Mcanvas         2    9[BANK0 ] int 
  5016 ;;  Mstep           2   11[BANK0 ] int 
  5017 ;;  canvas          2   13[BANK0 ] int 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;		None
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  2    9[BANK0 ] int 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0, pclath, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5029 ;;      Params:         0       6       0       0       0
  5030 ;;      Locals:         0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0
  5032 ;;      Totals:         0       6       0       0       0
  5033 ;;Total ram usage:        6 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    1
  5036 ;; This function calls:
  5037 ;;		___awdiv
  5038 ;;		___wmul
  5039 ;; This function is called by:
  5040 ;;		_main
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _equivVal
  5046  0BF3                     _equivVal:	
  5047                           
  5048                           ;main.c: 273: return (Mstep * canvas) / Mcanvas;
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _equivVal: [wreg+status,2+status,0+pclath+cstack]
  5052  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  5053  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  5054  0BF5  0856               	movf	equivVal@Mcanvas+1,w
  5055  0BF6  00F7               	movwf	___awdiv@divisor+1
  5056  0BF7  0855               	movf	equivVal@Mcanvas,w
  5057  0BF8  00F6               	movwf	___awdiv@divisor
  5058  0BF9  0858               	movf	equivVal@Mstep+1,w
  5059  0BFA  00F1               	movwf	___wmul@multiplier+1
  5060  0BFB  0857               	movf	equivVal@Mstep,w
  5061  0BFC  00F0               	movwf	___wmul@multiplier
  5062  0BFD  085A               	movf	equivVal@canvas+1,w
  5063  0BFE  00F3               	movwf	___wmul@multiplicand+1
  5064  0BFF  0859               	movf	equivVal@canvas,w
  5065  0C00  00F2               	movwf	___wmul@multiplicand
  5066  0C01  120A  158A  23D2  120A  158A  	fcall	___wmul
  5067  0C06  0871               	movf	?___wmul+1,w
  5068  0C07  00F9               	movwf	___awdiv@dividend+1
  5069  0C08  0870               	movf	?___wmul,w
  5070  0C09  00F8               	movwf	___awdiv@dividend
  5071  0C0A  120A  158A  26D9   	fcall	___awdiv
  5072  0C0D  0877               	movf	?___awdiv+1,w
  5073  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  5074  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  5075  0C10  00D6               	movwf	?_equivVal+1
  5076  0C11  0876               	movf	?___awdiv,w
  5077  0C12  00D5               	movwf	?_equivVal
  5078  0C13  0008               	return
  5079  0C14                     __end_of_equivVal:	
  5080                           
  5081                           	psect	text22
  5082  0ED9                     __ptext22:	
  5083 ;; *************** function ___awdiv *****************
  5084 ;; Defined at:
  5085 ;;		line 6 in file "/opt/microchip/xc8/v1.36/sources/common/awdiv.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  divisor         2    6[COMMON] int 
  5088 ;;  dividend        2    8[COMMON] int 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  quotient        2    2[BANK0 ] int 
  5091 ;;  sign            1    1[BANK0 ] unsigned char 
  5092 ;;  counter         1    0[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2    6[COMMON] int 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5102 ;;      Params:         4       0       0       0       0
  5103 ;;      Locals:         0       4       0       0       0
  5104 ;;      Temps:          1       0       0       0       0
  5105 ;;      Totals:         5       4       0       0       0
  5106 ;;Total ram usage:        9 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_equivVal
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function ___awdiv
  5117  0ED9                     ___awdiv:	
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5121  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0EDB  01CD               	clrf	___awdiv@sign
  5124  0EDC  1FF7               	btfss	___awdiv@divisor+1,7
  5125  0EDD  2EE5               	goto	l2341
  5126  0EDE  09F6               	comf	___awdiv@divisor,f
  5127  0EDF  09F7               	comf	___awdiv@divisor+1,f
  5128  0EE0  0AF6               	incf	___awdiv@divisor,f
  5129  0EE1  1903               	skipnz
  5130  0EE2  0AF7               	incf	___awdiv@divisor+1,f
  5131  0EE3  01CD               	clrf	___awdiv@sign
  5132  0EE4  0ACD               	incf	___awdiv@sign,f
  5133  0EE5                     l2341:	
  5134  0EE5  1FF9               	btfss	___awdiv@dividend+1,7
  5135  0EE6  2EF0               	goto	l2347
  5136  0EE7  09F8               	comf	___awdiv@dividend,f
  5137  0EE8  09F9               	comf	___awdiv@dividend+1,f
  5138  0EE9  0AF8               	incf	___awdiv@dividend,f
  5139  0EEA  1903               	skipnz
  5140  0EEB  0AF9               	incf	___awdiv@dividend+1,f
  5141  0EEC  3001               	movlw	1
  5142  0EED  00FA               	movwf	??___awdiv
  5143  0EEE  087A               	movf	??___awdiv,w
  5144  0EEF  06CD               	xorwf	___awdiv@sign,f
  5145  0EF0                     l2347:	
  5146  0EF0  01CE               	clrf	___awdiv@quotient
  5147  0EF1  01CF               	clrf	___awdiv@quotient+1
  5148  0EF2  0876               	movf	___awdiv@divisor,w
  5149  0EF3  0477               	iorwf	___awdiv@divisor+1,w
  5150  0EF4  1903               	btfsc	3,2
  5151  0EF5  2F27               	goto	l2369
  5152  0EF6  01CC               	clrf	___awdiv@counter
  5153  0EF7  0ACC               	incf	___awdiv@counter,f
  5154  0EF8                     l2357:	
  5155  0EF8  1BF7               	btfsc	___awdiv@divisor+1,7
  5156  0EF9  2F06               	goto	l2359
  5157  0EFA  3001               	movlw	1
  5158  0EFB                     u2215:	
  5159  0EFB  1003               	clrc
  5160  0EFC  0DF6               	rlf	___awdiv@divisor,f
  5161  0EFD  0DF7               	rlf	___awdiv@divisor+1,f
  5162  0EFE  3EFF               	addlw	-1
  5163  0EFF  1D03               	skipz
  5164  0F00  2EFB               	goto	u2215
  5165  0F01  3001               	movlw	1
  5166  0F02  00FA               	movwf	??___awdiv
  5167  0F03  087A               	movf	??___awdiv,w
  5168  0F04  07CC               	addwf	___awdiv@counter,f
  5169  0F05  2EF8               	goto	l2357
  5170  0F06                     l2359:	
  5171  0F06  3001               	movlw	1
  5172  0F07                     u2235:	
  5173  0F07  1003               	clrc
  5174  0F08  0DCE               	rlf	___awdiv@quotient,f
  5175  0F09  0DCF               	rlf	___awdiv@quotient+1,f
  5176  0F0A  3EFF               	addlw	-1
  5177  0F0B  1D03               	skipz
  5178  0F0C  2F07               	goto	u2235
  5179  0F0D  0877               	movf	___awdiv@divisor+1,w
  5180  0F0E  0279               	subwf	___awdiv@dividend+1,w
  5181  0F0F  1D03               	skipz
  5182  0F10  2F13               	goto	u2245
  5183  0F11  0876               	movf	___awdiv@divisor,w
  5184  0F12  0278               	subwf	___awdiv@dividend,w
  5185  0F13                     u2245:	
  5186  0F13  1C03               	skipc
  5187  0F14  2F1C               	goto	l2365
  5188  0F15  0876               	movf	___awdiv@divisor,w
  5189  0F16  02F8               	subwf	___awdiv@dividend,f
  5190  0F17  0877               	movf	___awdiv@divisor+1,w
  5191  0F18  1C03               	skipc
  5192  0F19  03F9               	decf	___awdiv@dividend+1,f
  5193  0F1A  02F9               	subwf	___awdiv@dividend+1,f
  5194  0F1B  144E               	bsf	___awdiv@quotient,0
  5195  0F1C                     l2365:	
  5196  0F1C  3001               	movlw	1
  5197  0F1D                     u2255:	
  5198  0F1D  1003               	clrc
  5199  0F1E  0CF7               	rrf	___awdiv@divisor+1,f
  5200  0F1F  0CF6               	rrf	___awdiv@divisor,f
  5201  0F20  3EFF               	addlw	-1
  5202  0F21  1D03               	skipz
  5203  0F22  2F1D               	goto	u2255
  5204  0F23  3001               	movlw	1
  5205  0F24  02CC               	subwf	___awdiv@counter,f
  5206  0F25  1D03               	btfss	3,2
  5207  0F26  2F06               	goto	l2359
  5208  0F27                     l2369:	
  5209  0F27  084D               	movf	___awdiv@sign,w
  5210  0F28  1903               	btfsc	3,2
  5211  0F29  2F2F               	goto	l2373
  5212  0F2A  09CE               	comf	___awdiv@quotient,f
  5213  0F2B  09CF               	comf	___awdiv@quotient+1,f
  5214  0F2C  0ACE               	incf	___awdiv@quotient,f
  5215  0F2D  1903               	skipnz
  5216  0F2E  0ACF               	incf	___awdiv@quotient+1,f
  5217  0F2F                     l2373:	
  5218  0F2F  084F               	movf	___awdiv@quotient+1,w
  5219  0F30  00F7               	movwf	?___awdiv+1
  5220  0F31  084E               	movf	___awdiv@quotient,w
  5221  0F32  00F6               	movwf	?___awdiv
  5222  0F33  0008               	return
  5223  0F34                     __end_of___awdiv:	
  5224                           
  5225                           	psect	text23
  5226  0090                     __ptext23:	
  5227 ;; *************** function _contStepY *****************
  5228 ;; Defined at:
  5229 ;;		line 354 in file "main.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5243 ;;      Params:         0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0
  5245 ;;      Temps:          2       0       0       0       0
  5246 ;;      Totals:         2       0       0       0       0
  5247 ;;Total ram usage:        2 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_main
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _contStepY
  5258  0090                     _contStepY:	
  5259                           
  5260                           ;main.c: 358: if(stepYprec > stepy){
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _contStepY: [wreg+status,2+status,0]
  5264  0090  1283               	bcf	3,5	;RP0=0, select bank0
  5265  0091  1303               	bcf	3,6	;RP1=0, select bank0
  5266  0092  083E               	movf	_stepy+1,w
  5267  0093  3A80               	xorlw	128
  5268  0094  00F0               	movwf	??_contStepY
  5269  0095  0836               	movf	_stepYprec+1,w
  5270  0096  3A80               	xorlw	128
  5271  0097  0270               	subwf	??_contStepY,w
  5272  0098  1D03               	skipz
  5273  0099  289C               	goto	u2945
  5274  009A  0835               	movf	_stepYprec,w
  5275  009B  023D               	subwf	_stepy,w
  5276  009C                     u2945:	
  5277  009C  1803               	skipnc
  5278  009D  28B7               	goto	l2837
  5279                           
  5280                           ;main.c: 359: stepyTodo = stepYprec - stepy;
  5281  009E  1283               	bcf	3,5	;RP0=0, select bank0
  5282  009F  1303               	bcf	3,6	;RP1=0, select bank0
  5283  00A0  093D               	comf	_stepy,w
  5284  00A1  00F0               	movwf	??_contStepY
  5285  00A2  093E               	comf	_stepy+1,w
  5286  00A3  00F1               	movwf	??_contStepY+1
  5287  00A4  0AF0               	incf	??_contStepY,f
  5288  00A5  1903               	skipnz
  5289  00A6  0AF1               	incf	??_contStepY+1,f
  5290  00A7  0835               	movf	_stepYprec,w
  5291  00A8  0770               	addwf	??_contStepY,w
  5292  00A9  00BF               	movwf	_stepyTodo
  5293  00AA  0836               	movf	_stepYprec+1,w
  5294  00AB  1803               	skipnc
  5295  00AC  0A36               	incf	_stepYprec+1,w
  5296  00AD  0771               	addwf	??_contStepY+1,w
  5297  00AE  00C0               	movwf	_stepyTodo+1
  5298                           
  5299                           ;main.c: 360: if(motorY.dir == 1) motorY.dir = 0;
  5300  00AF  0325               	decf	_motorY,w
  5301  00B0  1D03               	btfss	3,2
  5302  00B1  28B4               	goto	l435
  5303  00B2  01A5               	clrf	_motorY
  5304  00B3  0008               	return
  5305  00B4                     l435:	
  5306                           
  5307                           ;main.c: 361: else motorY.dir = 1;
  5308  00B4  01A5               	clrf	_motorY
  5309  00B5  0AA5               	incf	_motorY,f
  5310                           
  5311                           ;main.c: 362: } else if (stepYprec < stepy){
  5312  00B6  0008               	return
  5313  00B7                     l2837:	
  5314  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  5315  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  5316  00B9  0836               	movf	_stepYprec+1,w
  5317  00BA  3A80               	xorlw	128
  5318  00BB  00F0               	movwf	??_contStepY
  5319  00BC  083E               	movf	_stepy+1,w
  5320  00BD  3A80               	xorlw	128
  5321  00BE  0270               	subwf	??_contStepY,w
  5322  00BF  1D03               	skipz
  5323  00C0  28C3               	goto	u2965
  5324  00C1  083D               	movf	_stepy,w
  5325  00C2  0235               	subwf	_stepYprec,w
  5326  00C3                     u2965:	
  5327  00C3  1803               	skipnc
  5328  00C4  28E6               	goto	l2847
  5329                           
  5330                           ;main.c: 363: stepyTodo = stepy - stepYprec;
  5331  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  5332  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  5333  00C7  0935               	comf	_stepYprec,w
  5334  00C8  00F0               	movwf	??_contStepY
  5335  00C9  0936               	comf	_stepYprec+1,w
  5336  00CA  00F1               	movwf	??_contStepY+1
  5337  00CB  0AF0               	incf	??_contStepY,f
  5338  00CC  1903               	skipnz
  5339  00CD  0AF1               	incf	??_contStepY+1,f
  5340  00CE  083D               	movf	_stepy,w
  5341  00CF  0770               	addwf	??_contStepY,w
  5342  00D0  00BF               	movwf	_stepyTodo
  5343  00D1  083E               	movf	_stepy+1,w
  5344  00D2  1803               	skipnc
  5345  00D3  0A3E               	incf	_stepy+1,w
  5346  00D4  0771               	addwf	??_contStepY+1,w
  5347  00D5  00C0               	movwf	_stepyTodo+1
  5348                           
  5349                           ;main.c: 364: if(motorY.dir != defaultDiry){
  5350  00D6  0825               	movf	_motorY,w
  5351  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  5352  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  5353  00D9  065F               	xorwf	_defaultDiry^(0+128),w
  5354  00DA  1903               	skipnz
  5355  00DB  0008               	return
  5356                           
  5357                           ;main.c: 365: if(motorY.dir == 1) motorY.dir = 0;
  5358  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  5359  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  5360  00DE  0325               	decf	_motorY,w
  5361  00DF  1D03               	btfss	3,2
  5362  00E0  28E3               	goto	l440
  5363  00E1  01A5               	clrf	_motorY
  5364  00E2  0008               	return
  5365  00E3                     l440:	
  5366                           
  5367                           ;main.c: 366: else motorY.dir = 1;
  5368  00E3  01A5               	clrf	_motorY
  5369  00E4  0AA5               	incf	_motorY,f
  5370                           
  5371                           ;main.c: 367: }
  5372                           ;main.c: 368: } else if (stepYprec == stepy){
  5373  00E5  0008               	return
  5374  00E6                     l2847:	
  5375  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  5376  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  5377  00E8  083E               	movf	_stepy+1,w
  5378  00E9  0636               	xorwf	_stepYprec+1,w
  5379  00EA  1D03               	skipz
  5380  00EB  28EE               	goto	u2995
  5381  00EC  083D               	movf	_stepy,w
  5382  00ED  0635               	xorwf	_stepYprec,w
  5383  00EE                     u2995:	
  5384  00EE  1D03               	skipz
  5385  00EF  0008               	return
  5386                           
  5387                           ;main.c: 369: stepyTodo = stepy - stepYprec;
  5388  00F0  0935               	comf	_stepYprec,w
  5389  00F1  00F0               	movwf	??_contStepY
  5390  00F2  0936               	comf	_stepYprec+1,w
  5391  00F3  00F1               	movwf	??_contStepY+1
  5392  00F4  0AF0               	incf	??_contStepY,f
  5393  00F5  1903               	skipnz
  5394  00F6  0AF1               	incf	??_contStepY+1,f
  5395  00F7  083D               	movf	_stepy,w
  5396  00F8  0770               	addwf	??_contStepY,w
  5397  00F9  00BF               	movwf	_stepyTodo
  5398  00FA  083E               	movf	_stepy+1,w
  5399  00FB  1803               	skipnc
  5400  00FC  0A3E               	incf	_stepy+1,w
  5401  00FD  0771               	addwf	??_contStepY+1,w
  5402  00FE  00C0               	movwf	_stepyTodo+1
  5403  00FF  0008               	return
  5404  0100                     __end_of_contStepY:	
  5405                           
  5406                           	psect	text24
  5407  0020                     __ptext24:	
  5408 ;; *************** function _contStepX *****************
  5409 ;; Defined at:
  5410 ;;		line 315 in file "main.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;		None
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;		None
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5424 ;;      Params:         0       0       0       0       0
  5425 ;;      Locals:         0       0       0       0       0
  5426 ;;      Temps:          2       0       0       0       0
  5427 ;;      Totals:         2       0       0       0       0
  5428 ;;Total ram usage:        2 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_main
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _contStepX
  5439  0020                     _contStepX:	
  5440                           
  5441                           ;main.c: 318: if(stepXprec > stepx){
  5442                           
  5443                           ;incstack = 0
  5444                           ; Regs used in _contStepX: [wreg+status,2+status,0]
  5445  0020  1283               	bcf	3,5	;RP0=0, select bank0
  5446  0021  1303               	bcf	3,6	;RP1=0, select bank0
  5447  0022  083A               	movf	_stepx+1,w
  5448  0023  3A80               	xorlw	128
  5449  0024  00F0               	movwf	??_contStepX
  5450  0025  0834               	movf	_stepXprec+1,w
  5451  0026  3A80               	xorlw	128
  5452  0027  0270               	subwf	??_contStepX,w
  5453  0028  1D03               	skipz
  5454  0029  282C               	goto	u2885
  5455  002A  0833               	movf	_stepXprec,w
  5456  002B  0239               	subwf	_stepx,w
  5457  002C                     u2885:	
  5458  002C  1803               	skipnc
  5459  002D  2847               	goto	l2817
  5460                           
  5461                           ;main.c: 319: stepxTodo = stepXprec - stepx;
  5462  002E  1283               	bcf	3,5	;RP0=0, select bank0
  5463  002F  1303               	bcf	3,6	;RP1=0, select bank0
  5464  0030  0939               	comf	_stepx,w
  5465  0031  00F0               	movwf	??_contStepX
  5466  0032  093A               	comf	_stepx+1,w
  5467  0033  00F1               	movwf	??_contStepX+1
  5468  0034  0AF0               	incf	??_contStepX,f
  5469  0035  1903               	skipnz
  5470  0036  0AF1               	incf	??_contStepX+1,f
  5471  0037  0833               	movf	_stepXprec,w
  5472  0038  0770               	addwf	??_contStepX,w
  5473  0039  00BB               	movwf	_stepxTodo
  5474  003A  0834               	movf	_stepXprec+1,w
  5475  003B  1803               	skipnc
  5476  003C  0A34               	incf	_stepXprec+1,w
  5477  003D  0771               	addwf	??_contStepX+1,w
  5478  003E  00BC               	movwf	_stepxTodo+1
  5479                           
  5480                           ;main.c: 320: if(motorX.dir == 1) motorX.dir = 0;
  5481  003F  0320               	decf	_motorX,w
  5482  0040  1D03               	btfss	3,2
  5483  0041  2844               	goto	l409
  5484  0042  01A0               	clrf	_motorX
  5485  0043  0008               	return
  5486  0044                     l409:	
  5487                           
  5488                           ;main.c: 321: else motorX.dir = 1;
  5489  0044  01A0               	clrf	_motorX
  5490  0045  0AA0               	incf	_motorX,f
  5491                           
  5492                           ;main.c: 322: } else if (stepXprec < stepx){
  5493  0046  0008               	return
  5494  0047                     l2817:	
  5495  0047  1283               	bcf	3,5	;RP0=0, select bank0
  5496  0048  1303               	bcf	3,6	;RP1=0, select bank0
  5497  0049  0834               	movf	_stepXprec+1,w
  5498  004A  3A80               	xorlw	128
  5499  004B  00F0               	movwf	??_contStepX
  5500  004C  083A               	movf	_stepx+1,w
  5501  004D  3A80               	xorlw	128
  5502  004E  0270               	subwf	??_contStepX,w
  5503  004F  1D03               	skipz
  5504  0050  2853               	goto	u2905
  5505  0051  0839               	movf	_stepx,w
  5506  0052  0233               	subwf	_stepXprec,w
  5507  0053                     u2905:	
  5508  0053  1803               	skipnc
  5509  0054  2876               	goto	l2827
  5510                           
  5511                           ;main.c: 323: stepxTodo = stepx - stepXprec;
  5512  0055  1283               	bcf	3,5	;RP0=0, select bank0
  5513  0056  1303               	bcf	3,6	;RP1=0, select bank0
  5514  0057  0933               	comf	_stepXprec,w
  5515  0058  00F0               	movwf	??_contStepX
  5516  0059  0934               	comf	_stepXprec+1,w
  5517  005A  00F1               	movwf	??_contStepX+1
  5518  005B  0AF0               	incf	??_contStepX,f
  5519  005C  1903               	skipnz
  5520  005D  0AF1               	incf	??_contStepX+1,f
  5521  005E  0839               	movf	_stepx,w
  5522  005F  0770               	addwf	??_contStepX,w
  5523  0060  00BB               	movwf	_stepxTodo
  5524  0061  083A               	movf	_stepx+1,w
  5525  0062  1803               	skipnc
  5526  0063  0A3A               	incf	_stepx+1,w
  5527  0064  0771               	addwf	??_contStepX+1,w
  5528  0065  00BC               	movwf	_stepxTodo+1
  5529                           
  5530                           ;main.c: 324: if(motorX.dir != defaultDirx){
  5531  0066  0820               	movf	_motorX,w
  5532  0067  1683               	bsf	3,5	;RP0=1, select bank1
  5533  0068  1303               	bcf	3,6	;RP1=0, select bank1
  5534  0069  065E               	xorwf	_defaultDirx^(0+128),w
  5535  006A  1903               	skipnz
  5536  006B  0008               	return
  5537                           
  5538                           ;main.c: 325: if(motorX.dir == 1) motorX.dir = 0;
  5539  006C  1283               	bcf	3,5	;RP0=0, select bank0
  5540  006D  1303               	bcf	3,6	;RP1=0, select bank0
  5541  006E  0320               	decf	_motorX,w
  5542  006F  1D03               	btfss	3,2
  5543  0070  2873               	goto	l414
  5544  0071  01A0               	clrf	_motorX
  5545  0072  0008               	return
  5546  0073                     l414:	
  5547                           
  5548                           ;main.c: 326: else motorX.dir = 1;
  5549  0073  01A0               	clrf	_motorX
  5550  0074  0AA0               	incf	_motorX,f
  5551                           
  5552                           ;main.c: 327: }
  5553                           ;main.c: 328: } else if (stepXprec == stepx){
  5554  0075  0008               	return
  5555  0076                     l2827:	
  5556  0076  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0077  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0078  083A               	movf	_stepx+1,w
  5559  0079  0634               	xorwf	_stepXprec+1,w
  5560  007A  1D03               	skipz
  5561  007B  287E               	goto	u2935
  5562  007C  0839               	movf	_stepx,w
  5563  007D  0633               	xorwf	_stepXprec,w
  5564  007E                     u2935:	
  5565  007E  1D03               	skipz
  5566  007F  0008               	return
  5567                           
  5568                           ;main.c: 329: stepxTodo = stepx - stepXprec;
  5569  0080  0933               	comf	_stepXprec,w
  5570  0081  00F0               	movwf	??_contStepX
  5571  0082  0934               	comf	_stepXprec+1,w
  5572  0083  00F1               	movwf	??_contStepX+1
  5573  0084  0AF0               	incf	??_contStepX,f
  5574  0085  1903               	skipnz
  5575  0086  0AF1               	incf	??_contStepX+1,f
  5576  0087  0839               	movf	_stepx,w
  5577  0088  0770               	addwf	??_contStepX,w
  5578  0089  00BB               	movwf	_stepxTodo
  5579  008A  083A               	movf	_stepx+1,w
  5580  008B  1803               	skipnc
  5581  008C  0A3A               	incf	_stepx+1,w
  5582  008D  0771               	addwf	??_contStepX+1,w
  5583  008E  00BC               	movwf	_stepxTodo+1
  5584  008F  0008               	return
  5585  0090                     __end_of_contStepX:	
  5586                           
  5587                           	psect	text25
  5588  0C14                     __ptext25:	
  5589 ;; *************** function _constSpeed *****************
  5590 ;; Defined at:
  5591 ;;		line 301 in file "main.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  activeX         2    0[COMMON] int 
  5594 ;;  activeY         2    2[COMMON] int 
  5595 ;;  activeZ         2    4[COMMON] int 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  nMotor          2    7[COMMON] int 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5607 ;;      Params:         6       0       0       0       0
  5608 ;;      Locals:         2       0       0       0       0
  5609 ;;      Temps:          1       0       0       0       0
  5610 ;;      Totals:         9       0       0       0       0
  5611 ;;Total ram usage:        9 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_main
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function _constSpeed
  5622  0C14                     _constSpeed:	
  5623                           
  5624                           ;main.c: 303: int nMotor = activeX + activeY;
  5625                           
  5626                           ;incstack = 0
  5627                           ; Regs used in _constSpeed: [wreg+status,2+status,0]
  5628  0C14  0872               	movf	constSpeed@activeY,w
  5629  0C15  0770               	addwf	constSpeed@activeX,w
  5630  0C16  00F7               	movwf	constSpeed@nMotor
  5631  0C17  0873               	movf	constSpeed@activeY+1,w
  5632  0C18  1803               	skipnc
  5633  0C19  0A73               	incf	constSpeed@activeY+1,w
  5634  0C1A  0771               	addwf	constSpeed@activeX+1,w
  5635  0C1B  00F8               	movwf	constSpeed@nMotor+1
  5636                           
  5637                           ;main.c: 307: if(nMotor == 2)
  5638  0C1C  3002               	movlw	2
  5639  0C1D  0677               	xorwf	constSpeed@nMotor,w
  5640  0C1E  0478               	iorwf	constSpeed@nMotor+1,w
  5641  0C1F  1D03               	btfss	3,2
  5642  0C20  2C29               	goto	l2855
  5643                           
  5644                           ;main.c: 308: motorX.speed = motorY.speed = motorZ.speed = 1;
  5645  0C21  3001               	movlw	1
  5646  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  5647  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  5648  0C24  00AB               	movwf	_motorZ+1
  5649  0C25  00A6               	movwf	_motorY+1
  5650  0C26  00F6               	movwf	??_constSpeed
  5651  0C27  0876               	movf	??_constSpeed,w
  5652  0C28  00A1               	movwf	_motorX+1
  5653  0C29                     l2855:	
  5654                           
  5655                           ;main.c: 309: if(nMotor == 1)
  5656  0C29  0377               	decf	constSpeed@nMotor,w
  5657  0C2A  0478               	iorwf	constSpeed@nMotor+1,w
  5658  0C2B  1D03               	btfss	3,2
  5659  0C2C  0008               	return
  5660                           
  5661                           ;main.c: 310: motorX.speed = motorY.speed = motorZ.speed = 2;
  5662  0C2D  3002               	movlw	2
  5663  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  5664  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  5665  0C30  00AB               	movwf	_motorZ+1
  5666  0C31  00A6               	movwf	_motorY+1
  5667  0C32  00F6               	movwf	??_constSpeed
  5668  0C33  0876               	movf	??_constSpeed,w
  5669  0C34  00A1               	movwf	_motorX+1
  5670  0C35  0008               	return
  5671  0C36                     __end_of_constSpeed:	
  5672                           
  5673                           	psect	text26
  5674  0BAA                     __ptext26:	
  5675 ;; *************** function _activeMotor *****************
  5676 ;; Defined at:
  5677 ;;		line 237 in file "stepMotor.h"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  i               2    0[COMMON] int 
  5680 ;;  step            2    2[COMMON] int 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  2    0[COMMON] int 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5692 ;;      Params:         4       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0
  5694 ;;      Temps:          1       0       0       0       0
  5695 ;;      Totals:         5       0       0       0       0
  5696 ;;Total ram usage:        5 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_main
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _activeMotor
  5707  0BAA                     _activeMotor:	
  5708                           
  5709                           ;stepMotor.h: 238: if(i<step)
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _activeMotor: [wreg+status,2]
  5713  0BAA  0871               	movf	activeMotor@i+1,w
  5714  0BAB  3A80               	xorlw	128
  5715  0BAC  00F4               	movwf	??_activeMotor
  5716  0BAD  0873               	movf	activeMotor@step+1,w
  5717  0BAE  3A80               	xorlw	128
  5718  0BAF  0274               	subwf	??_activeMotor,w
  5719  0BB0  1D03               	skipz
  5720  0BB1  2BB4               	goto	u2315
  5721  0BB2  0872               	movf	activeMotor@step,w
  5722  0BB3  0270               	subwf	activeMotor@i,w
  5723  0BB4                     u2315:	
  5724  0BB4  1803               	skipnc
  5725  0BB5  2BBB               	goto	l2403
  5726                           
  5727                           ;stepMotor.h: 239: return 1;
  5728  0BB6  3001               	movlw	1
  5729  0BB7  00F0               	movwf	?_activeMotor
  5730  0BB8  3000               	movlw	0
  5731  0BB9  00F1               	movwf	?_activeMotor+1
  5732  0BBA  0008               	return
  5733  0BBB                     l2403:	
  5734                           
  5735                           ;stepMotor.h: 240: else return 0;
  5736  0BBB  01F0               	clrf	?_activeMotor
  5737  0BBC  01F1               	clrf	?_activeMotor+1
  5738  0BBD  0008               	return
  5739  0BBE                     __end_of_activeMotor:	
  5740                           
  5741                           	psect	text27
  5742  0171                     __ptext27:	
  5743 ;; *************** function _UART_TxInt *****************
  5744 ;; Defined at:
  5745 ;;		line 102 in file "UART.h"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  val             2    6[COMMON] int 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  cent            1   12[COMMON] unsigned char 
  5750 ;;  dec             1   11[COMMON] unsigned char 
  5751 ;;  uni             1   10[COMMON] unsigned char 
  5752 ;;  sig             1    9[COMMON] unsigned char 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5762 ;;      Params:         2       0       0       0       0
  5763 ;;      Locals:         4       0       0       0       0
  5764 ;;      Temps:          1       0       0       0       0
  5765 ;;      Totals:         7       0       0       0       0
  5766 ;;Total ram usage:        7 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    1
  5769 ;; This function calls:
  5770 ;;		_UART_TxChar
  5771 ;;		___wmul
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;;		_UART_TxFloat
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           
  5779                           ;psect for function _UART_TxInt
  5780  0171                     _UART_TxInt:	
  5781                           
  5782                           ;UART.h: 104: char sig=0;
  5783                           
  5784                           ;incstack = 0
  5785                           ; Regs used in _UART_TxInt: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5786  0171  01F9               	clrf	UART_TxInt@sig
  5787                           
  5788                           ;UART.h: 106: if(val<0)
  5789  0172  1FF7               	btfss	UART_TxInt@val+1,7
  5790  0173  2987               	goto	l2471
  5791                           
  5792                           ;UART.h: 107: {
  5793                           ;UART.h: 108: sig=1;
  5794  0174  01F9               	clrf	UART_TxInt@sig
  5795  0175  0AF9               	incf	UART_TxInt@sig,f
  5796                           
  5797                           ;UART.h: 109: val*=-1;
  5798  0176  30FF               	movlw	255
  5799  0177  00F0               	movwf	___wmul@multiplier
  5800  0178  30FF               	movlw	255
  5801  0179  00F1               	movwf	___wmul@multiplier+1
  5802  017A  0877               	movf	UART_TxInt@val+1,w
  5803  017B  00F3               	movwf	___wmul@multiplicand+1
  5804  017C  0876               	movf	UART_TxInt@val,w
  5805  017D  00F2               	movwf	___wmul@multiplicand
  5806  017E  120A  158A  23D2  120A  118A  	fcall	___wmul
  5807  0183  0871               	movf	?___wmul+1,w
  5808  0184  00F7               	movwf	UART_TxInt@val+1
  5809  0185  0870               	movf	?___wmul,w
  5810  0186  00F6               	movwf	UART_TxInt@val
  5811  0187                     l2471:	
  5812                           
  5813                           ;UART.h: 110: }
  5814                           ;UART.h: 112: char cent=0, dec=0, uni=0;
  5815  0187  01FC               	clrf	UART_TxInt@cent
  5816  0188  01FB               	clrf	UART_TxInt@dec
  5817  0189  01FA               	clrf	UART_TxInt@uni
  5818  018A                     l2481:	
  5819                           ;UART.h: 116: while (val>=100) {
  5820                           
  5821  018A  0877               	movf	UART_TxInt@val+1,w
  5822  018B  3A80               	xorlw	128
  5823  018C  00FF               	movwf	127
  5824  018D  3080               	movlw	128
  5825  018E  027F               	subwf	127,w
  5826  018F  1D03               	skipz
  5827  0190  2993               	goto	u2375
  5828  0191  3064               	movlw	100
  5829  0192  0276               	subwf	UART_TxInt@val,w
  5830  0193                     u2375:	
  5831  0193  1C03               	btfss	3,0
  5832  0194  29AA               	goto	l2487
  5833                           
  5834                           ;UART.h: 117: val-=100;
  5835  0195  309C               	movlw	156
  5836  0196  07F6               	addwf	UART_TxInt@val,f
  5837  0197  1803               	skipnc
  5838  0198  0AF7               	incf	UART_TxInt@val+1,f
  5839  0199  30FF               	movlw	255
  5840  019A  07F7               	addwf	UART_TxInt@val+1,f
  5841                           
  5842                           ;UART.h: 118: cent++;
  5843  019B  3001               	movlw	1
  5844  019C  00F8               	movwf	??_UART_TxInt
  5845  019D  0878               	movf	??_UART_TxInt,w
  5846  019E  07FC               	addwf	UART_TxInt@cent,f
  5847  019F  298A               	goto	l2481
  5848  01A0                     l2483:	
  5849                           ;UART.h: 119: }
  5850                           ;UART.h: 120: while (val>=10) {
  5851                           
  5852                           
  5853                           ;UART.h: 121: val-=10;
  5854  01A0  30F6               	movlw	246
  5855  01A1  07F6               	addwf	UART_TxInt@val,f
  5856  01A2  1803               	skipnc
  5857  01A3  0AF7               	incf	UART_TxInt@val+1,f
  5858  01A4  30FF               	movlw	255
  5859  01A5  07F7               	addwf	UART_TxInt@val+1,f
  5860                           
  5861                           ;UART.h: 122: dec++;
  5862  01A6  3001               	movlw	1
  5863  01A7  00F8               	movwf	??_UART_TxInt
  5864  01A8  0878               	movf	??_UART_TxInt,w
  5865  01A9  07FB               	addwf	UART_TxInt@dec,f
  5866  01AA                     l2487:	
  5867  01AA  0877               	movf	UART_TxInt@val+1,w
  5868  01AB  3A80               	xorlw	128
  5869  01AC  00FF               	movwf	127
  5870  01AD  3080               	movlw	128
  5871  01AE  027F               	subwf	127,w
  5872  01AF  1D03               	skipz
  5873  01B0  29B3               	goto	u2385
  5874  01B1  300A               	movlw	10
  5875  01B2  0276               	subwf	UART_TxInt@val,w
  5876  01B3                     u2385:	
  5877  01B3  1803               	skipnc
  5878  01B4  29A0               	goto	l2483
  5879                           
  5880                           ;UART.h: 123: }
  5881                           ;UART.h: 124: uni=val;
  5882  01B5  0876               	movf	UART_TxInt@val,w
  5883  01B6  00F8               	movwf	??_UART_TxInt
  5884  01B7  0878               	movf	??_UART_TxInt,w
  5885  01B8  00FA               	movwf	UART_TxInt@uni
  5886                           
  5887                           ;UART.h: 126: if (cent==0 && dec==0) dec=32;
  5888  01B9  087C               	movf	UART_TxInt@cent,w
  5889  01BA  1D03               	btfss	3,2
  5890  01BB  29C4               	goto	l2497
  5891  01BC  087B               	movf	UART_TxInt@dec,w
  5892  01BD  1D03               	btfss	3,2
  5893  01BE  29C4               	goto	l2497
  5894  01BF  3020               	movlw	32
  5895  01C0  00F8               	movwf	??_UART_TxInt
  5896  01C1  0878               	movf	??_UART_TxInt,w
  5897  01C2  00FB               	movwf	UART_TxInt@dec
  5898  01C3  29C8               	goto	l262
  5899  01C4                     l2497:	
  5900                           
  5901                           ;UART.h: 127: else dec+=48;
  5902  01C4  3030               	movlw	48
  5903  01C5  00F8               	movwf	??_UART_TxInt
  5904  01C6  0878               	movf	??_UART_TxInt,w
  5905  01C7  07FB               	addwf	UART_TxInt@dec,f
  5906  01C8                     l262:	
  5907                           
  5908                           ;UART.h: 129: if (cent==0) cent=32;
  5909  01C8  087C               	movf	UART_TxInt@cent,w
  5910  01C9  1D03               	btfss	3,2
  5911  01CA  29D0               	goto	l2501
  5912  01CB  3020               	movlw	32
  5913  01CC  00F8               	movwf	??_UART_TxInt
  5914  01CD  0878               	movf	??_UART_TxInt,w
  5915  01CE  00FC               	movwf	UART_TxInt@cent
  5916  01CF  29D4               	goto	l264
  5917  01D0                     l2501:	
  5918                           
  5919                           ;UART.h: 130: else cent+=48;
  5920  01D0  3030               	movlw	48
  5921  01D1  00F8               	movwf	??_UART_TxInt
  5922  01D2  0878               	movf	??_UART_TxInt,w
  5923  01D3  07FC               	addwf	UART_TxInt@cent,f
  5924  01D4                     l264:	
  5925                           
  5926                           ;UART.h: 132: uni+=48;
  5927  01D4  3030               	movlw	48
  5928  01D5  00F8               	movwf	??_UART_TxInt
  5929  01D6  0878               	movf	??_UART_TxInt,w
  5930  01D7  07FA               	addwf	UART_TxInt@uni,f
  5931                           
  5932                           ;UART.h: 134: if (sig==1) UART_TxChar('-');
  5933  01D8  0379               	decf	UART_TxInt@sig,w
  5934  01D9  1D03               	btfss	3,2
  5935  01DA  29E1               	goto	l2505
  5936  01DB  302D               	movlw	45
  5937  01DC  120A  158A  2367  120A  118A  	fcall	_UART_TxChar
  5938  01E1                     l2505:	
  5939                           
  5940                           ;UART.h: 136: if (cent!=32) UART_TxChar(cent);
  5941  01E1  3020               	movlw	32
  5942  01E2  067C               	xorwf	UART_TxInt@cent,w
  5943  01E3  1903               	btfsc	3,2
  5944  01E4  29EB               	goto	l2509
  5945  01E5  087C               	movf	UART_TxInt@cent,w
  5946  01E6  120A  158A  2367  120A  118A  	fcall	_UART_TxChar
  5947  01EB                     l2509:	
  5948                           
  5949                           ;UART.h: 137: if (dec!=32) UART_TxChar(dec);
  5950  01EB  3020               	movlw	32
  5951  01EC  067B               	xorwf	UART_TxInt@dec,w
  5952  01ED  1903               	btfsc	3,2
  5953  01EE  29F5               	goto	l267
  5954  01EF  087B               	movf	UART_TxInt@dec,w
  5955  01F0  120A  158A  2367  120A  118A  	fcall	_UART_TxChar
  5956  01F5                     l267:	
  5957                           
  5958                           ;UART.h: 138: UART_TxChar(uni);
  5959  01F5  087A               	movf	UART_TxInt@uni,w
  5960  01F6  120A  158A  2367   	fcall	_UART_TxChar
  5961  01F9  0008               	return
  5962  01FA                     __end_of_UART_TxInt:	
  5963                           
  5964                           	psect	text28
  5965  0BD2                     __ptext28:	
  5966 ;; *************** function ___wmul *****************
  5967 ;; Defined at:
  5968 ;;		line 15 in file "/opt/microchip/xc8/v1.36/sources/common/Umul16.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  multiplier      2    0[COMMON] unsigned int 
  5971 ;;  multiplicand    2    2[COMMON] unsigned int 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  product         2    4[COMMON] unsigned int 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2    0[COMMON] unsigned int 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5983 ;;      Params:         4       0       0       0       0
  5984 ;;      Locals:         2       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0
  5986 ;;      Totals:         6       0       0       0       0
  5987 ;;Total ram usage:        6 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_UART_TxInt
  5993 ;;		_equivVal
  5994 ;;		_toint
  5995 ;;		_UART_TxFloat
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           
  6000                           ;psect for function ___wmul
  6001  0BD2                     ___wmul:	
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6005  0BD2  01F4               	clrf	___wmul@product
  6006  0BD3  01F5               	clrf	___wmul@product+1
  6007  0BD4                     l2321:	
  6008  0BD4  1C70               	btfss	___wmul@multiplier,0
  6009  0BD5  2BDC               	goto	l597
  6010  0BD6  0872               	movf	___wmul@multiplicand,w
  6011  0BD7  07F4               	addwf	___wmul@product,f
  6012  0BD8  1803               	skipnc
  6013  0BD9  0AF5               	incf	___wmul@product+1,f
  6014  0BDA  0873               	movf	___wmul@multiplicand+1,w
  6015  0BDB  07F5               	addwf	___wmul@product+1,f
  6016  0BDC                     l597:	
  6017  0BDC  3001               	movlw	1
  6018  0BDD                     u2155:	
  6019  0BDD  1003               	clrc
  6020  0BDE  0DF2               	rlf	___wmul@multiplicand,f
  6021  0BDF  0DF3               	rlf	___wmul@multiplicand+1,f
  6022  0BE0  3EFF               	addlw	-1
  6023  0BE1  1D03               	skipz
  6024  0BE2  2BDD               	goto	u2155
  6025  0BE3  3001               	movlw	1
  6026  0BE4                     u2165:	
  6027  0BE4  1003               	clrc
  6028  0BE5  0CF1               	rrf	___wmul@multiplier+1,f
  6029  0BE6  0CF0               	rrf	___wmul@multiplier,f
  6030  0BE7  3EFF               	addlw	-1
  6031  0BE8  1D03               	skipz
  6032  0BE9  2BE4               	goto	u2165
  6033  0BEA  0870               	movf	___wmul@multiplier,w
  6034  0BEB  0471               	iorwf	___wmul@multiplier+1,w
  6035  0BEC  1D03               	btfss	3,2
  6036  0BED  2BD4               	goto	l2321
  6037  0BEE  0875               	movf	___wmul@product+1,w
  6038  0BEF  00F1               	movwf	?___wmul+1
  6039  0BF0  0874               	movf	___wmul@product,w
  6040  0BF1  00F0               	movwf	?___wmul
  6041  0BF2  0008               	return
  6042  0BF3                     __end_of___wmul:	
  6043                           
  6044                           	psect	text29
  6045  000B                     __ptext29:	
  6046 ;; *************** function _UART_Init *****************
  6047 ;; Defined at:
  6048 ;;		line 4 in file "UART.h"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  1    wreg      void 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6062 ;;      Params:         0       0       0       0       0
  6063 ;;      Locals:         0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0
  6065 ;;      Totals:         0       0       0       0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; This function calls:
  6069 ;;		Nothing
  6070 ;; This function is called by:
  6071 ;;		_main
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _UART_Init
  6077  000B                     _UART_Init:	
  6078                           
  6079                           ;UART.h: 8: SPBRG=12;
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _UART_Init: [wreg+status,2]
  6083  000B  300C               	movlw	12
  6084  000C  1683               	bsf	3,5	;RP0=1, select bank1
  6085  000D  1303               	bcf	3,6	;RP1=0, select bank1
  6086  000E  0099               	movwf	25	;volatile
  6087                           
  6088                           ;UART.h: 9: SPBRGH=0;
  6089  000F  019A               	clrf	26	;volatile
  6090                           
  6091                           ;UART.h: 11: BAUDCTLbits.BRG16=0;
  6092  0010  1683               	bsf	3,5	;RP0=1, select bank3
  6093  0011  1703               	bsf	3,6	;RP1=1, select bank3
  6094  0012  1187               	bcf	7,3	;volatile
  6095                           
  6096                           ;UART.h: 14: TXSTAbits.BRGH=0;
  6097  0013  1683               	bsf	3,5	;RP0=1, select bank1
  6098  0014  1303               	bcf	3,6	;RP1=0, select bank1
  6099  0015  1118               	bcf	24,2	;volatile
  6100                           
  6101                           ;UART.h: 15: TXSTAbits.TX9=0;
  6102  0016  1318               	bcf	24,6	;volatile
  6103                           
  6104                           ;UART.h: 16: TXSTAbits.TXEN=1;
  6105  0017  1698               	bsf	24,5	;volatile
  6106                           
  6107                           ;UART.h: 17: TXSTAbits.SYNC=0;
  6108  0018  1218               	bcf	24,4	;volatile
  6109                           
  6110                           ;UART.h: 20: RCSTAbits.SPEN=1;
  6111  0019  1283               	bcf	3,5	;RP0=0, select bank0
  6112  001A  1303               	bcf	3,6	;RP1=0, select bank0
  6113  001B  1798               	bsf	24,7	;volatile
  6114                           
  6115                           ;UART.h: 21: RCSTAbits.RX9=0;
  6116  001C  1318               	bcf	24,6	;volatile
  6117                           
  6118                           ;UART.h: 22: RCSTAbits.CREN=1;
  6119  001D  1618               	bsf	24,4	;volatile
  6120                           
  6121                           ;UART.h: 23: RCSTAbits.ADDEN=0;
  6122  001E  1198               	bcf	24,3	;volatile
  6123  001F  0008               	return
  6124  0020                     __end_of_UART_Init:	
  6125                           
  6126                           	psect	text30
  6127  0B70                     __ptext30:	
  6128 ;; *************** function _UART_GotoNewLine *****************
  6129 ;; Defined at:
  6130 ;;		line 95 in file "UART.h"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;		None
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      void 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, pclath, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6144 ;;      Params:         0       0       0       0       0
  6145 ;;      Locals:         0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0
  6147 ;;      Totals:         0       0       0       0       0
  6148 ;;Total ram usage:        0 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    1
  6151 ;; This function calls:
  6152 ;;		_UART_TxChar
  6153 ;; This function is called by:
  6154 ;;		_main
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _UART_GotoNewLine
  6160  0B70                     _UART_GotoNewLine:	
  6161                           
  6162                           ;UART.h: 97: UART_TxChar('\r');
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _UART_GotoNewLine: [wreg+status,2+status,0+pclath+cstack]
  6166  0B70  300D               	movlw	13
  6167  0B71  120A  158A  2367  120A  158A  	fcall	_UART_TxChar
  6168                           
  6169                           ;UART.h: 98: UART_TxChar('\n');
  6170  0B76  300A               	movlw	10
  6171  0B77  120A  158A  2367   	fcall	_UART_TxChar
  6172  0B7A  0008               	return
  6173  0B7B                     __end_of_UART_GotoNewLine:	
  6174                           
  6175                           	psect	text31
  6176  0B67                     __ptext31:	
  6177 ;; *************** function _UART_TxChar *****************
  6178 ;; Defined at:
  6179 ;;		line 35 in file "UART.h"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  ch              1    wreg     unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  ch              1    0[COMMON] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6193 ;;      Params:         0       0       0       0       0
  6194 ;;      Locals:         1       0       0       0       0
  6195 ;;      Temps:          0       0       0       0       0
  6196 ;;      Totals:         1       0       0       0       0
  6197 ;;Total ram usage:        1 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_UART_TxString
  6203 ;;		_UART_GotoNewLine
  6204 ;;		_UART_TxInt
  6205 ;;		_UART_TxDeci
  6206 ;;		_UART_TxFloat
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _UART_TxChar
  6212  0B67                     _UART_TxChar:	
  6213                           
  6214                           ;incstack = 0
  6215                           ; Regs used in _UART_TxChar: [wreg]
  6216                           ;UART_TxChar@ch stored from wreg
  6217  0B67  00F0               	movwf	UART_TxChar@ch
  6218  0B68                     l220:	
  6219                           ;UART.h: 36: while (!TXIF);
  6220                           
  6221  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  6222  0B69  1303               	bcf	3,6	;RP1=0, select bank0
  6223  0B6A  1E0C               	btfss	12,4	;volatile
  6224  0B6B  2B68               	goto	l220
  6225                           
  6226                           ;UART.h: 37: TXIF = 0;
  6227  0B6C  120C               	bcf	12,4	;volatile
  6228                           
  6229                           ;UART.h: 38: TXREG = ch;
  6230  0B6D  0870               	movf	UART_TxChar@ch,w
  6231  0B6E  0099               	movwf	25	;volatile
  6232  0B6F  0008               	return
  6233  0B70                     __end_of_UART_TxChar:	
  6234  007E                     btemp	set	126	;btemp
  6235  007E                     wtemp	set	126
  6236  007E                     wtemp0	set	126
  6237  0080                     wtemp1	set	128
  6238  0082                     wtemp2	set	130
  6239  0084                     wtemp3	set	132
  6240  0086                     wtemp4	set	134
  6241  0088                     wtemp5	set	136
  6242  007F                     wtemp6	set	127
  6243  007E                     ttemp	set	126
  6244  007E                     ttemp0	set	126
  6245  0081                     ttemp1	set	129
  6246  0084                     ttemp2	set	132
  6247  0087                     ttemp3	set	135
  6248  007F                     ttemp4	set	127
  6249  007E                     ltemp	set	126
  6250  007E                     ltemp0	set	126
  6251  0082                     ltemp1	set	130
  6252  0086                     ltemp2	set	134
  6253  0080                     ltemp3	set	128


Data Sizes:
    Strings     74
    Constant    0
    Data        44
    BSS         60
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     32      80
    BANK1            80      0      65
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK0[3]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK0[3]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), 

    toint@c	PTR unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK0[3]), 

    getCoords@coords	PTR unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), 

    getCanvasDim@canvas	PTR unsigned char  size(1) Largest target is 7
		 -> canvas(BANK1[7]), 

    UART_RxString@stringa	PTR unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), canvas(BANK1[7]), 

    UART_TxString@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[6]), 
		 -> STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_1(CODE[6]), coords(BANK1[9]), canvasY(BANK1[3]), 
		 -> canvasX(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_UART_TxInt
    _main->_maxStep
    _main->_motorXInit
    _main->_motorYInit
    _main->_motorZInit
    _toint->_strlen
    _motorZInit->_stepMotorZ
    _stepMotorZ->_ms_delay
    _motorYInit->_stepMotorY
    _stepMotorY->_ms_delay
    _motorXInit->_stepMotorX
    _stepMotorX->_ms_delay
    _getCoords->_UART_RxString
    _getCanvasDim->_UART_RxString
    _UART_TxString->_UART_TxChar
    _equivVal->___awdiv
    _equivVal->_toint
    ___awdiv->___wmul
    _UART_TxInt->___wmul
    _UART_GotoNewLine->_UART_TxChar

Critical Paths under _main in BANK0

    _main->_equivVal
    _equivVal->_toint

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   16376
                                             15 BANK0     17    17      0
                   _UART_GotoNewLine
                          _UART_Init
                      _UART_RxString
                         _UART_TxInt
                      _UART_TxString
                        _activeMotor
                         _constSpeed
                          _contStepX
                          _contStepY
                           _equivVal
                       _getCanvasDim
                          _getCoords
                            _maxStep
                         _motorXInit
                         _motorYInit
                         _motorZInit
                         _stepMotorX
                         _stepMotorY
                         _stepMotorZ
                             _strcmp
                              _toint
 ---------------------------------------------------------------------------------
 (1) _toint                                               12    10      2    1147
                                              8 COMMON     3     1      2
                                              0 BANK0      9     9      0
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     117
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     251
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _motorZInit                                          17    15      2    1339
                                              8 COMMON     5     3      2
                                              0 BANK0     12    12      0
                             _limitz
                         _stepMotorZ
 ---------------------------------------------------------------------------------
 (1) _stepMotorZ                                           4     1      3    1171
                                              4 COMMON     4     1      3
                              _modM3
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _modM3                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _motorYInit                                          17    15      2    1233
                                              8 COMMON     5     3      2
                                              0 BANK0     12    12      0
                             _limitz
                         _stepMotorY
 ---------------------------------------------------------------------------------
 (1) _stepMotorY                                           4     1      3    1065
                                              4 COMMON     4     1      3
                              _modM2
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _modM2                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _motorXInit                                          17    15      2    1233
                                              8 COMMON     5     3      2
                                              0 BANK0     12    12      0
                             _limitz
                         _stepMotorX
 ---------------------------------------------------------------------------------
 (1) _stepMotorX                                           4     1      3    1065
                                              4 COMMON     4     1      3
                              _modM1
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _ms_delay                                             4     4      0      46
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _modM1                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _limitz                                               2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _maxStep                                             13     7      6     452
                                              0 COMMON    13     7      6
 ---------------------------------------------------------------------------------
 (1) _getCoords                                            6     6      0    1413
                                              5 COMMON     6     6      0
                      _UART_RxString
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _getCanvasDim                                         5     5      0    1325
                                              5 COMMON     5     5      0
                      _UART_RxString
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     809
                                              1 COMMON     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_RxString                                        5     5      0     289
                                              0 COMMON     5     5      0
                        _UART_RxChar
 ---------------------------------------------------------------------------------
 (3) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _equivVal                                             6     0      6    1412
                                              9 BANK0      6     0      6
                            ___awdiv
                             ___wmul
                              _toint (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _contStepY                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _contStepX                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _constSpeed                                           9     3      6     248
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) _activeMotor                                          5     1      4     256
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) _UART_TxInt                                           7     5      2    1392
                                              6 COMMON     7     5      2
                        _UART_TxChar
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     622
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_GotoNewLine                                     0     0      0      22
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_GotoNewLine
     _UART_TxChar
   _UART_Init
   _UART_RxString
     _UART_RxChar
   _UART_TxInt
     _UART_TxChar
     ___wmul
   _UART_TxString
     _UART_TxChar
   _activeMotor
   _constSpeed
   _contStepX
   _contStepY
   _equivVal
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _toint (ARG)
       ___wmul
       _strlen
   _getCanvasDim
     _UART_RxString
       _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _getCoords
     _UART_RxString
       _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _maxStep
   _motorXInit
     _limitz
     _stepMotorX
       _modM1
       _ms_delay
   _motorYInit
     _limitz
     _stepMotorY
       _modM2
       _ms_delay
   _motorZInit
     _limitz
     _stepMotorZ
       _modM3
       _ms_delay
   _stepMotorX
     _modM1
     _ms_delay
   _stepMotorY
     _modM2
     _ms_delay
   _stepMotorZ
     _modM3
     _ms_delay
   _strcmp
   _toint
     ___wmul
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      41       7       81.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9F      12        0.0%
ABS                  0      0      9F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Jun 11 18:05:05 2021

                                       pc 0002                               __CFG_CP$OFF 0000  
                            ___awdiv@sign 004D                                        fsr 0004  
                     ___wmul@multiplicand 0072                                       l211 0BA0  
                                     l220 0B68                                       l233 0B81  
                                     l262 01C8                                       l414 0073  
                                     l264 01D4                                       l440 00E3  
                                     l409 0044                                       l267 01F5  
                                     l435 00B4                                       l460 02CC  
                                     l452 024D                                       l461 02D5  
                                     l373 079E                                       l470 034C  
                                     l447 0206                                       l457 02E8  
                                     l465 0305                                       l475 03E7  
                                     l483 0404                                       l493 04E6  
                                     l478 03CB                                       l479 03D4  
                                     l496 04CA                                       l488 044B  
                                     l497 04D3                                       l597 0BDC  
                            __CFG_CPD$OFF 0000                                       _end 00E0  
                                     fsr0 0004                                       indf 0000  
                            __CFG_FOSC$XT 0000                               main@activeX 0066  
                             main@activeY 0068                               main@activeZ 0060  
                            __CFG_LVP$OFF 0000                                      l2101 0E1A  
                                    l2105 0E24                                      l2121 0E4C  
                                    l3011 05D0                                      l2109 0E2E  
                                    l2141 0E7E                                      l2133 0E6A  
                                    l2125 0E56                                      l2117 0E42  
                                    l2231 0D5A                                      l3007 05BC  
                                    l2321 0BD4                                      l2305 0CF5  
                                    l2209 0D24                                      l2137 0E74  
                                    l2129 0E60                                      l2161 0EB0  
                                    l2153 0E9C                                      l2313 0C5E  
                                    l2403 0BBB                                      l2315 0C69  
                                    l2501 01D0                                      l2341 0EE5  
                                    l2093 0E06                                      l2085 0DF2  
                                    l2173 0ECE                                      l2165 0EBA  
                                    l2157 0EA6                                      l2149 0E92  
                                    l2253 0D90                                      l3061 0737  
                                    l2183 0BC0                                      l2505 01E1  
                                    l2097 0E10                                      l2089 0DFC  
                                    l2601 02A6                                      l2169 0EC4  
                                    l3065 074E                                      l2347 0EF0  
                                    l2275 0BA7                                      l3091 07BA  
                                    l3067 06DB                                      l2509 01EB  
                                    l2373 0F2F                                      l2365 0F1C  
                                    l2357 0EF8                                      l2285 0C36  
                                    l2701 0465                                      l3085 07A0  
                                    l3077 075B                                      l3069 0757  
                                    l3093 07C4                                      l2471 0187  
                                    l2359 0F06                                      l2295 0CE3  
                                    l2391 0DDC                                      l2607 02F4  
                                    l2631 0325                                      l2703 048F  
                                    l3079 0787                                      l2481 018A  
                                    l2369 0F27                                      l2289 0CD3  
                                    l2385 0DC4                                      l2641 0366  
                                    l2633 0355                                      l2721 04A4  
                                    l3089 078B                                      l2483 01A0  
                                    l2299 0CEB                                      l2387 0DCC  
                                    l2571 0226                                      l2643 0390  
                                    l2707 0496                                      l2741 0FB2  
                                    l2581 0267                                      l2573 0256  
                                    l2661 03A5                                      l2487 01AA  
                                    l2583 0291                                      l2647 0397  
                                    l2727 04F2                                      l2497 01C4  
                                    l2817 0047                                      l2827 0076  
                                    l2747 0FDD                                      l2587 0298  
                                    l2667 03F3                                      l2691 0424  
                                    l2763 0154                                      l2837 00B7  
                                    l2693 0454                                      l2765 010D  
                                    l2855 0C29                                      l2847 00E6  
                                    l2783 0CCB                                      l2775 0CA9  
                                    l2767 015B                                      l2759 0130  
                                    l2779 0CB1                                      l2985 055B  
                                    l2997 058E                                      STR_1 0847  
                                    STR_2 0857                                      STR_3 0853  
                                    STR_4 0832                                      STR_5 0839  
                                    STR_6 0840                                      STR_7 0820  
                                    STR_8 0829                                      STR_9 084D  
                                    _CREN 00C4                                      u2215 0EFB  
                                    u2305 0DD6                                      u2155 0BDD  
                                    u2315 0BB4                                      u2235 0F07  
                                    u2165 0BE4                                      u2245 0F13  
                                    u2255 0F1D                               main@largest 005E  
                                    u2285 0DB2                                      u3165 06E5  
                                    u2375 0193                                      u2295 0DBE  
                                    u3407 035B                                      u3175 0765  
                                    u2385 01B3                                      u3417 03E0  
                                    u3427 025C                                      u3195 0795  
                                    u2805 0FDB                                      u3437 02E1  
                                    u2565 0271                                      u3447 0BC8  
                                    u2655 0370                                      u2905 0053  
                                    u3457 0F3B                                      u2745 046F  
                                    u3387 045A                                      u2835 011B  
                                    u3397 04DF                                      u2935 007E  
                                    u2945 009C                                      u2865 0F65  
                                    u2795 0FB0                                      _RCIF 0065  
                                    u2885 002C                                      u2965 00C3  
                                    u2995 00EE                                      _OERR 00C1  
                                    _TXIF 0064                              __CFG_WRT$OFF 0000  
                                    _main 04F7                                      btemp 007E  
                                    ltemp 007E                                      start 0000  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_IESO$OFF 0000                             __CFG_MCLRE$ON 0000  
                                   ?_main 0070                           __end_of___awdiv 0F34  
                                   STR_10 0825                                     STR_11 082E  
                                   STR_12 0810                             __CFG_WDTE$OFF 0000  
                                   _ANSEL 0188                           ___awdiv@divisor 0076  
                         ___awdiv@counter 004C                                     _RCREG 001A  
                                   _SPBRG 0099                                     _PORTA 0005  
                                   _PORTB 0006                                     _PORTC 0007  
                                   _PORTD 0008                                     _PORTE 0009  
                                   _TRISA 0085                                     _TRISB 0086  
                                   _TRISC 0087                                     _TRISD 0088  
                                   _TRISE 0089                                     _TXREG 0019  
                    __end_of_getCanvasDim 1000                               ?_UART_TxInt 0076  
                          __CFG_FCMEN$OFF 0000                        __size_of_UART_Init 0015  
                         __end_of_maxStep 0DE9                                     _modM1 0DE9  
                                   _modM2 0E39                                     _modM3 0E89  
                                   _speed 004B                                     _stepX 00B0  
                                   _stepY 00B7                                     _stepZ 00BE  
                                   _toint 0100                                     _steps 007D  
                                   main@i 006A                                     _stepx 0039  
                                   _stepy 003D                                     _stepz 0041  
                          __CFG_BOREN$OFF 0000                      __size_of_activeMotor 0014  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         __initialization 07CD                              __end_of_main 07CD  
                       ?_UART_GotoNewLine 0070                        ??_UART_GotoNewLine 0071  
                                  ??_main 005B                                    ?_modM1 0070  
                                  ?_modM2 0070                                    ?_modM3 0070  
                        ___awdiv@dividend 0078                                    ?_toint 0078  
                                  _ANSELH 0189                                    _SPBRGH 009A  
                         motorXInit@j_561 0052                                    _MStepX 00D8  
                                  _MStepY 00DA                                    _MStepZ 00DC  
                            ?_UART_RxChar 0070                            __CFG_PWRTE$OFF 0000  
                            ?_UART_TxChar 0070                         __end_of_UART_Init 0020  
                     __size_of_UART_TxInt 0089                                    ___wmul 0BD2  
                               ??___awdiv 007A                                    _canvas 00D1  
                         motorYInit@j_568 0052                                    _coords 00C8  
                        __end_of_equivVal 0C14                                    _limitz 0B97  
                        ___awdiv@quotient 004E                                    _motorX 0020  
                                  _motorY 0025                                    _motorZ 002A  
                        __end_of_ms_delay 0BD2                                    modM1@m 0070  
                                  modM2@m 0070                                    modM3@m 0070  
                                  _strcmp 0CA7                                    _strlen 0C59  
                               ??_maxStep 0076                           motorZInit@j_575 0052  
                            __pdataCOMMON 007D                                    toint@c 0054  
                                  toint@i 0052                                    toint@r 004C  
                 __end_of__initialization 07FC                     __end_of_UART_RxString 0D04  
                   __end_of_UART_TxString 0C59                            __pcstackCOMMON 0070  
                            __pidataBANK0 0B64                              __pidataBANK1 0C7F  
                           __end_of_modM1 0E39                             __end_of_modM2 0E89  
                           __end_of_modM3 0ED9                             __end_of_toint 0171  
                   __size_of_getCanvasDim 006B                        __size_of_getCoords 0061  
                             ms_delay@val 0072                        __size_of_contStepX 0070  
                      __size_of_contStepY 0070                                   ??_modM1 0072  
                                 ??_modM2 0072                                   ??_modM3 0072  
                                 ??_toint 007A                                __pbssBANK0 0020  
                              __pbssBANK1 00C8                              maxStep@stepx 0070  
                            maxStep@stepy 0072                              maxStep@stepz 0074  
                         equivVal@Mcanvas 0055                              _getCanvasDim 0F95  
                           stepMotorX@dir 0077                             stepMotorY@dir 0077  
                           stepMotorZ@dir 0077                             stepMotorX@mod 0075  
                              __pmaintext 04F7                             stepMotorY@mod 0075  
                           stepMotorZ@mod 0075                           stepMotorX@speed 0074  
                         stepMotorY@speed 0074                           stepMotorZ@speed 0074  
                                 ?___wmul 0070                                   ?_limitz 0070  
                                 ?_strcmp 0070                                   ?_strlen 0070  
                            ??_UART_TxInt 0078                                __stringtab 0800  
                              _constSpeed 0C14                                 ?_equivVal 0055  
                    UART_RxString@stringa 0072                         __end_of_getCoords 0F95  
                               ?_ms_delay 0070                      __size_of_UART_RxChar 000B  
                    __size_of_UART_TxChar 0009                          motorXInit@status 0056  
                      __end_of_UART_TxInt 01FA                                   ___awdiv 0ED9  
                       __end_of_contStepX 0090                         __end_of_contStepY 0100  
                         __size_of___wmul 0021                                   _canvasX 006C  
                                 _canvasY 00C5                                   _canvasx 002F  
                                 _canvasy 0031                           __size_of_limitz 0013  
                                 __ptext1 0100                                   __ptext2 0C59  
                                 __ptext3 0CA7                                   __ptext4 03F8  
                                 __ptext5 0D70                                   __ptext6 0E89  
                                 __ptext7 02F9                                   __ptext8 0D3A  
                                 __ptext9 0E39                            UART_TxInt@cent 007C  
                         __size_of_strcmp 002A                           __size_of_strlen 0026  
                                 _maxStep 0DA6                                   _limitX0 0045  
                                 _limitX1 0046                                   _limitY0 0047  
                                 _limitY1 0048                                   _limitZ0 0049  
                                 _limitZ1 004A                             ??_activeMotor 0074  
               __size_of_UART_GotoNewLine 000B                          motorYInit@status 0056  
                                 clrloop0 0004                      end_of_initialization 07FC  
                             motorXInit@i 004C                               motorXInit@j 004E  
                             motorXInit@k 0050                               motorXInit@m 0054  
                             motorYInit@i 004C                               motorYInit@j 004E  
                             motorYInit@k 0050                               motorYInit@m 0054  
                             motorZInit@i 004C                               motorZInit@j 004E  
                             motorZInit@k 0050                               motorZInit@m 0054  
                              ??_equivVal 007B                                ??_ms_delay 0070  
                              getCoords@i 0079                                 _RCSTAbits 0018  
                         activeMotor@step 0072                                _motorXInit 01FA  
                              _motorYInit 02F9                                _motorZInit 03F8  
                        motorZInit@status 0056                                   strcmp@r 0074  
                                 strlen@s 0076                                 _UART_Init 000B  
                               _PORTAbits 0005                                 _PORTBbits 0006  
                               _PORTCbits 0007                                 _PORTDbits 0008  
                               _PORTEbits 0009                                _stepMotorX 0D04  
                              _stepMotorY 0D3A                                _stepMotorZ 0D70  
                             ?_constSpeed 0070                       __end_of_activeMotor 0BBE  
                               _TXSTAbits 0098                            __end_of___wmul 0BF3  
                              ?_UART_Init 0070                             __pidataCOMMON 0B63  
                             _BAUDCTLbits 0187                            __end_of_limitz 0BAA  
                          __end_of_strcmp 0CD1                            __end_of_strlen 0C7F  
                     start_initialization 07CD                             getCanvasDim@j 0078  
                             ?_motorXInit 0078                               ?_motorYInit 0078  
                             ?_motorZInit 0078                                  ??___wmul 0074  
                              init_fetch0 0B86                               __pdataBANK0 006C  
                             __pdataBANK1 00A0                                  ??_limitz 0072  
                     __size_of_constSpeed 0022                                  ??_strcmp 0072  
                                ??_strlen 0072                    __size_of_UART_RxString 0033  
                               ___latbits 0002                    __size_of_UART_TxString 0023  
                           __pcstackBANK0 004C                          _UART_GotoNewLine 0B70  
                             _defaultDirx 00DE                               _defaultDiry 00DF  
                             _defaultDirz 006F                               ?_stepMotorX 0074  
                             ?_stepMotorY 0074                               ?_stepMotorZ 0074  
                             _activeMotor 0BAA                                 __pnvBANK0 006F  
                               __pnvBANK1 00D8                         __size_of_equivVal 0021  
                       __size_of_ms_delay 0014                                 _getCoords 0F34  
                                ?___awdiv 0076                            equivVal@canvas 0059  
                             ??_UART_Init 0070                              activeMotor@i 0070  
                               __pstrings 0800                                 _contStepX 0020  
                               _contStepY 0090                                  ?_maxStep 0070  
                           UART_TxChar@ch 0070                            __size_of_modM1 0050  
                          __size_of_modM2 0050                            __size_of_modM3 0050  
                     __size_of_motorXInit 00FF                       __size_of_motorYInit 00FF  
                     __size_of_motorZInit 00FF                            __size_of_toint 0071  
                           UART_TxInt@dec 007B                             UART_TxInt@sig 0079  
                           UART_TxInt@val 0076                             UART_TxInt@uni 007A  
                          ___wmul@product 0074                                 clear_ram0 0003  
                           ??_UART_RxChar 0070                             _UART_RxString 0CD1  
                           ??_UART_TxChar 0070                             _UART_TxString 0C36  
                              ?_getCoords 0070                       __size_of_stepMotorX 0036  
                     __size_of_stepMotorY 0036                       __size_of_stepMotorZ 0036  
                             __stringbase 080F                                ?_contStepX 0070  
                              ?_contStepY 0070                                 main@i_523 0062  
                               main@i_525 0064                         ___wmul@multiplier 0070  
                               _stepXprec 0033                                 _stepYprec 0035  
                               _stepZprec 0037                                 _stepxTodo 003B  
                               _stepyTodo 003F                                 _stepzTodo 0043  
                        UART_RxString@len 0073                              ??_constSpeed 0076  
                             _maxStep$394 0077                               _maxStep$395 0079  
                          ?_UART_RxString 0070                            ?_UART_TxString 0071  
                              toint@value 0050                       __end_of_UART_RxChar 0B86  
                     __end_of_UART_TxChar 0B70                          __size_of___awdiv 005B  
                      __end_of__stringtab 0810                        __end_of_constSpeed 0C36  
                               ms_delay@i 0073                          __size_of_maxStep 0043  
                           equivVal@Mstep 0057                                  __ptext10 01FA  
                                __ptext11 0D04                                  __ptext20 0B7B  
                                __ptext12 0BBE                                  __ptext21 0BF3  
                                __ptext13 0DE9                                  __ptext30 0B70  
                                __ptext22 0ED9                                  __ptext14 0B97  
                                __ptext31 0B67                                  __ptext23 0090  
                                __ptext15 0DA6                                  __ptext24 0020  
                                __ptext16 0F34                                  __ptext25 0C14  
                                __ptext17 0F95                                  __ptext26 0BAA  
                                __ptext18 0C36                                  __ptext27 0171  
                                __ptext19 0CD1                                  __ptext28 0BD2  
                                __ptext29 000B                         __CFG_BOR4V$BOR40V 0000  
                         getCoords@coords 0078                          UART_TxString@str 0071  
                                _equivVal 0BF3                             __size_of_main 02D6  
                                _ms_delay 0BBE                             ?_getCanvasDim 0070  
                __end_of_UART_GotoNewLine 0B7B                              ??_motorXInit 007A  
                             ??_getCoords 0075                              ??_motorYInit 007A  
                            ??_motorZInit 007A                               ??_contStepX 0070  
                             ??_contStepY 0070                           UART_RxString@ch 0074  
modConversionFormNumberToMultiplier@F1996 00A0                                  maxStep@l 007B  
                               toint@flag 004E                                  init_ram0 0B8A  
                            ??_stepMotorX 0077                              ??_stepMotorY 0077  
                            ??_stepMotorZ 0077                              ?_activeMotor 0070  
                      __end_of_motorXInit 02F9                        __end_of_motorYInit 03F8  
                      __end_of_motorZInit 04F7                           ??_UART_RxString 0070  
                         ??_UART_TxString 0073                            ??_getCanvasDim 0075  
                             _UART_RxChar 0B7B                                 stringcode 080A  
                             _UART_TxChar 0B67                        __end_of_stepMotorX 0D3A  
                      __end_of_stepMotorY 0D70                        __end_of_stepMotorZ 0DA6  
                       constSpeed@activeX 0070                         constSpeed@activeY 0072  
                       constSpeed@activeZ 0074                                  strcmp@s1 0075  
                                strcmp@s2 0070                                  strlen@cp 0077  
                      getCanvasDim@canvas 0077                                  stringdir 080A  
                                stringtab 0800                                _UART_TxInt 0171  
                        constSpeed@nMotor 0077  
