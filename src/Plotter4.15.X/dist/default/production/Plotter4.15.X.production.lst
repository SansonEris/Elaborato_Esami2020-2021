

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Jun 11 15:39:03 2021

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125                           
   126                           	psect	idataBANK0
   127  005D                     __pidataBANK0:	
   128                           
   129                           ;initializer for _steps
   130  005D  34C8               	retlw	200
   131                           
   132                           	psect	idataBANK1
   133  0FA2                     __pidataBANK1:	
   134                           
   135                           ;initializer for modConversionFormNumberToMultiplier@F1996
   136  0FA2  3401               	retlw	1
   137  0FA3  3400               	retlw	0
   138  0FA4  3402               	retlw	2
   139  0FA5  3400               	retlw	0
   140  0FA6  3404               	retlw	4
   141  0FA7  3400               	retlw	0
   142  0FA8  3408               	retlw	8
   143  0FA9  3400               	retlw	0
   144  0FAA  3410               	retlw	16
   145  0FAB  3400               	retlw	0
   146  0FAC  3420               	retlw	32
   147  0FAD  3400               	retlw	0
   148  0FAE  3420               	retlw	32
   149  0FAF  3400               	retlw	0
   150  0FB0  3420               	retlw	32
   151  0FB1  3400               	retlw	0
   152                           
   153                           ;initializer for _stepX
   154  0FB2  3430               	retlw	48
   155  0FB3  3430               	retlw	48
   156  0FB4  3430               	retlw	48
   157  0FB5  3400               	retlw	0
   158  0FB6  3400               	retlw	0
   159  0FB7  3400               	retlw	0
   160  0FB8  3400               	retlw	0
   161                           
   162                           ;initializer for _stepY
   163  0FB9  3430               	retlw	48
   164  0FBA  3430               	retlw	48
   165  0FBB  3430               	retlw	48
   166  0FBC  3400               	retlw	0
   167  0FBD  3400               	retlw	0
   168  0FBE  3400               	retlw	0
   169  0FBF  3400               	retlw	0
   170                           
   171                           ;initializer for _stepZ
   172  0FC0  3430               	retlw	48
   173  0FC1  3430               	retlw	48
   174  0FC2  3430               	retlw	48
   175  0FC3  3400               	retlw	0
   176  0FC4  3400               	retlw	0
   177  0FC5  3400               	retlw	0
   178  0FC6  3400               	retlw	0
   179                           
   180                           ;initializer for _canvasX
   181  0FC7  3430               	retlw	48
   182  0FC8  3430               	retlw	48
   183  0FC9  3430               	retlw	48
   184                           
   185                           ;initializer for _canvasY
   186  0FCA  3430               	retlw	48
   187  0FCB  3430               	retlw	48
   188  0FCC  3430               	retlw	48
   189                           
   190                           	psect	nvBANK0
   191  006E                     __pnvBANK0:	
   192  006E                     _end:	
   193  006E                     	ds	1
   194  0005                     _PORTA	set	5
   195  0005                     _PORTAbits	set	5
   196  0006                     _PORTB	set	6
   197  0006                     _PORTBbits	set	6
   198  0007                     _PORTC	set	7
   199  0007                     _PORTCbits	set	7
   200  0008                     _PORTD	set	8
   201  0008                     _PORTDbits	set	8
   202  0009                     _PORTE	set	9
   203  0009                     _PORTEbits	set	9
   204  001A                     _RCREG	set	26
   205  0018                     _RCSTAbits	set	24
   206  0019                     _TXREG	set	25
   207  00C4                     _CREN	set	196
   208  00C1                     _OERR	set	193
   209  0065                     _RCIF	set	101
   210  0064                     _TXIF	set	100
   211  0099                     _SPBRG	set	153
   212  009A                     _SPBRGH	set	154
   213  0085                     _TRISA	set	133
   214  0086                     _TRISB	set	134
   215  0087                     _TRISC	set	135
   216  0088                     _TRISD	set	136
   217  0089                     _TRISE	set	137
   218  0098                     _TXSTAbits	set	152
   219  0188                     _ANSEL	set	392
   220  0189                     _ANSELH	set	393
   221  0187                     _BAUDCTLbits	set	391
   222                           
   223                           	psect	strings
   224  0003                     __pstrings:	
   225  0003                     stringtab:	
   226  0003                     __stringtab:	
   227                           
   228                           ;	String table - string pointers are 1 byte each
   229  0003  1BFF               	btfsc	btemp+1,7
   230  0004  280D               	ljmp	stringcode
   231  0005  1383               	bcf	3,7
   232  0006  187F               	btfsc	btemp+1,0
   233  0007  1783               	bsf	3,7
   234  0008  0800               	movf	0,w
   235  0009  0A84               	incf	4,f
   236  000A  1903               	skipnz
   237  000B  0AFF               	incf	btemp+1,f
   238  000C  0008               	return
   239  000D                     stringcode:	
   240  000D                     stringdir:	
   241  000D  3000               	movlw	high stringdir
   242  000E  008A               	movwf	10
   243  000F  0804               	movf	4,w
   244  0010  0A84               	incf	4,f
   245  0011  0782               	addwf	2,f
   246  0012                     __stringbase:	
   247  0012  3400               	retlw	0
   248  0013                     __end_of__stringtab:	
   249  0013                     STR_12:	
   250  0013  3465               	retlw	101	;'e'
   251  0014  3463               	retlw	99	;'c'
   252  0015  346F               	retlw	111	;'o'
   253  0016  3420               	retlw	32	;' '
   254  0017  3472               	retlw	114	;'r'
   255  0018  3469               	retlw	105	;'i'
   256  0019  3463               	retlw	99	;'c'
   257  001A  3465               	retlw	101	;'e'
   258  001B  347A               	retlw	122	;'z'
   259  001C  3469               	retlw	105	;'i'
   260  001D  346F               	retlw	111	;'o'
   261  001E  346E               	retlw	110	;'n'
   262  001F  3465               	retlw	101	;'e'
   263  0020  343A               	retlw	58	;':'
   264  0021  3420               	retlw	32	;' '
   265  0022  3400               	retlw	0
   266  0023                     STR_7:	
   267  0023  3474               	retlw	116	;'t'
   268  0024  346F               	retlw	111	;'o'
   269  0025  3464               	retlw	100	;'d'
   270  0026  346F               	retlw	111	;'o'
   271  0027  3420               	retlw	32	;' '
   272  0028  3458               	retlw	88	;'X'
   273  0029  343A               	retlw	58	;':'
   274  002A  3420               	retlw	32	;' '
   275  002B  3400               	retlw	0
   276  002C                     STR_8:	
   277  002C  3474               	retlw	116	;'t'
   278  002D  346F               	retlw	111	;'o'
   279  002E  3464               	retlw	100	;'d'
   280  002F  346F               	retlw	111	;'o'
   281  0030  3420               	retlw	32	;' '
   282  0031  3459               	retlw	89	;'Y'
   283  0032  343A               	retlw	58	;':'
   284  0033  3420               	retlw	32	;' '
   285  0034  3400               	retlw	0
   286  0035                     STR_4:	
   287  0035  3465               	retlw	101	;'e'
   288  0036  3463               	retlw	99	;'c'
   289  0037  346F               	retlw	111	;'o'
   290  0038  3458               	retlw	88	;'X'
   291  0039  343A               	retlw	58	;':'
   292  003A  3420               	retlw	32	;' '
   293  003B  3400               	retlw	0
   294  003C                     STR_5:	
   295  003C  3465               	retlw	101	;'e'
   296  003D  3463               	retlw	99	;'c'
   297  003E  346F               	retlw	111	;'o'
   298  003F  3459               	retlw	89	;'Y'
   299  0040  343A               	retlw	58	;':'
   300  0041  3420               	retlw	32	;' '
   301  0042  3400               	retlw	0
   302  0043                     STR_6:	
   303  0043  3465               	retlw	101	;'e'
   304  0044  3463               	retlw	99	;'c'
   305  0045  346F               	retlw	111	;'o'
   306  0046  345A               	retlw	90	;'Z'
   307  0047  343A               	retlw	58	;':'
   308  0048  3420               	retlw	32	;' '
   309  0049  3400               	retlw	0
   310  004A                     STR_1:	
   311  004A  3465               	retlw	101	;'e'
   312  004B  3463               	retlw	99	;'c'
   313  004C  346F               	retlw	111	;'o'
   314  004D  343A               	retlw	58	;':'
   315  004E  3420               	retlw	32	;' '
   316  004F  3400               	retlw	0
   317  0050                     STR_9:	
   318  0050  3472               	retlw	114	;'r'
   319  0051  3465               	retlw	101	;'e'
   320  0052  3461               	retlw	97	;'a'
   321  0053  3464               	retlw	100	;'d'
   322  0054  3479               	retlw	121	;'y'
   323  0055  3400               	retlw	0
   324  0056                     STR_3:	
   325  0056  3465               	retlw	101	;'e'
   326  0057  346E               	retlw	110	;'n'
   327  0058  3464               	retlw	100	;'d'
   328  0059  3400               	retlw	0
   329  005A                     STR_2:	
   330  005A  346F               	retlw	111	;'o'
   331  005B  346B               	retlw	107	;'k'
   332  005C  3400               	retlw	0
   333  0028                     
   334                           ; #config settings
   335  0000                     
   336                           	psect	cinit
   337  07D9                     start_initialization:	
   338  07D9                     __initialization:	
   339                           
   340                           ; Clear objects allocated to COMMON
   341  07D9  01FD               	clrf	__pbssCOMMON& (0+127)
   342                           
   343                           ; Clear objects allocated to BANK0
   344  07DA  1383               	bcf	3,7	;select IRP bank0
   345  07DB  3020               	movlw	low __pbssBANK0
   346  07DC  0084               	movwf	4
   347  07DD  304E               	movlw	low (__pbssBANK0+46)
   348  07DE  120A  158A  267C  120A  118A  	fcall	clear_ram0
   349                           
   350                           ; Clear objects allocated to BANK1
   351  07E3  30CB               	movlw	low __pbssBANK1
   352  07E4  0084               	movwf	4
   353  07E5  30E1               	movlw	low (__pbssBANK1+22)
   354  07E6  120A  158A  267C  120A  118A  	fcall	clear_ram0
   355                           
   356                           ; Initialize objects allocated to BANK1
   357  07EB  30CB               	movlw	low (__pdataBANK1+43)
   358  07EC  00FD               	movwf	btemp+-1
   359  07ED  300F               	movlw	high __pidataBANK1
   360  07EE  00FE               	movwf	btemp
   361  07EF  30A2               	movlw	low __pidataBANK1
   362  07F0  00FF               	movwf	btemp+1
   363  07F1  30A0               	movlw	low __pdataBANK1
   364  07F2  0084               	movwf	4
   365  07F3  120A  158A  26A7  120A  118A  	fcall	init_ram0
   366                           
   367                           ; Initialize objects allocated to BANK0
   368  07F8  120A  118A  205D   	fcall	__pidataBANK0	;fetch initializer
   369  07FB  00EF               	movwf	__pdataBANK0& (0+127)
   370  07FC                     end_of_initialization:	
   371                           ;End of C runtime variable initialization code
   372                           
   373  07FC                     __end_of__initialization:	
   374  07FC  0183               	clrf	3
   375  07FD  120A  118A  2D52   	ljmp	_main	;jump to C main() function
   376                           
   377                           	psect	bssCOMMON
   378  007D                     __pbssCOMMON:	
   379  007D                     _defaultDirx:	
   380  007D                     	ds	1
   381                           
   382                           	psect	bssBANK0
   383  0020                     __pbssBANK0:	
   384  0020                     _motorX:	
   385  0020                     	ds	5
   386  0025                     _motorY:	
   387  0025                     	ds	5
   388  002A                     _motorZ:	
   389  002A                     	ds	5
   390  002F                     _canvasx:	
   391  002F                     	ds	2
   392  0031                     _canvasy:	
   393  0031                     	ds	2
   394  0033                     _stepXprec:	
   395  0033                     	ds	2
   396  0035                     _stepYprec:	
   397  0035                     	ds	2
   398  0037                     _stepZprec:	
   399  0037                     	ds	2
   400  0039                     _stepx:	
   401  0039                     	ds	2
   402  003B                     _stepxTodo:	
   403  003B                     	ds	2
   404  003D                     _stepy:	
   405  003D                     	ds	2
   406  003F                     _stepyTodo:	
   407  003F                     	ds	2
   408  0041                     _stepz:	
   409  0041                     	ds	2
   410  0043                     _stepzTodo:	
   411  0043                     	ds	2
   412  0045                     _defaultDiry:	
   413  0045                     	ds	1
   414  0046                     _defaultDirz:	
   415  0046                     	ds	1
   416  0047                     _limitX0:	
   417  0047                     	ds	1
   418  0048                     _limitX1:	
   419  0048                     	ds	1
   420  0049                     _limitY0:	
   421  0049                     	ds	1
   422  004A                     _limitY1:	
   423  004A                     	ds	1
   424  004B                     _limitZ0:	
   425  004B                     	ds	1
   426  004C                     _limitZ1:	
   427  004C                     	ds	1
   428  004D                     _speed:	
   429  004D                     	ds	1
   430                           
   431                           	psect	dataBANK0
   432  006F                     __pdataBANK0:	
   433  006F                     _steps:	
   434  006F                     	ds	1
   435                           
   436                           	psect	bssBANK1
   437  00CB                     __pbssBANK1:	
   438  00CB                     _MStepX:	
   439  00CB                     	ds	2
   440  00CD                     _MStepY:	
   441  00CD                     	ds	2
   442  00CF                     _MStepZ:	
   443  00CF                     	ds	2
   444  00D1                     _coords:	
   445  00D1                     	ds	9
   446  00DA                     _canvas:	
   447  00DA                     	ds	7
   448                           
   449                           	psect	dataBANK1
   450  00A0                     __pdataBANK1:	
   451  00A0                     modConversionFormNumberToMultiplier@F1996:	
   452  00A0                     	ds	16
   453  00B0                     _stepX:	
   454  00B0                     	ds	7
   455  00B7                     _stepY:	
   456  00B7                     	ds	7
   457  00BE                     _stepZ:	
   458  00BE                     	ds	7
   459  00C5                     _canvasX:	
   460  00C5                     	ds	3
   461  00C8                     _canvasY:	
   462  00C8                     	ds	3
   463                           
   464                           	psect	clrtext
   465  0E7C                     clear_ram0:	
   466                           ;	Called with FSR containing the base address, and
   467                           ;	W with the last address+1
   468                           
   469  0E7C  0064               	clrwdt	;clear the watchdog before getting into this loop
   470  0E7D                     clrloop0:	
   471  0E7D  0180               	clrf	0	;clear RAM location pointed to by FSR
   472  0E7E  0A84               	incf	4,f	;increment pointer
   473  0E7F  0604               	xorwf	4,w	;XOR with final address
   474  0E80  1903               	btfsc	3,2	;have we reached the end yet?
   475  0E81  3400               	retlw	0	;all done for this memory range, return
   476  0E82  0604               	xorwf	4,w	;XOR again to restore value
   477  0E83  2E7D               	goto	clrloop0	;do the next byte
   478                           
   479                           	psect	inittext
   480  0EA3                     init_fetch0:	
   481                           ;	Called with low address in FSR and high address in W
   482                           
   483  0EA3  087E               	movf	126,w
   484  0EA4  008A               	movwf	10
   485  0EA5  087F               	movf	127,w
   486  0EA6  0082               	movwf	2
   487  0EA7                     init_ram0:	
   488                           ;Called with:
   489                           ;	high address of idata address in btemp 
   490                           ;	low address of idata address in btemp+1 
   491                           ;	low address of data in FSR
   492                           ;	high address + 1 of data in btemp-1
   493                           
   494  0EA7  26A3  120A  158A   	fcall	init_fetch0
   495  0EAA  0080               	movwf	0
   496  0EAB  0A84               	incf	4,f
   497  0EAC  0804               	movf	4,w
   498  0EAD  067D               	xorwf	125,w
   499  0EAE  1903               	btfsc	3,2
   500  0EAF  3400               	retlw	0
   501  0EB0  0AFF               	incf	127,f
   502  0EB1  1903               	btfsc	3,2
   503  0EB2  0AFE               	incf	126,f
   504  0EB3  2EA7               	goto	init_ram0
   505                           
   506                           	psect	cstackCOMMON
   507  0070                     __pcstackCOMMON:	
   508  0070                     ?_contStepX:	
   509  0070                     ??_contStepX:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ?_contStepY:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ??_contStepY:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?_constSpeed:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_modM1:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ?_modM2:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_modM3:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ?_ms_delay:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ??_ms_delay:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ?_UART_Init:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ??_UART_Init:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ?_UART_TxChar:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ??_UART_TxChar:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ?_UART_RxChar:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ??_UART_RxChar:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ?_UART_RxString:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ??_UART_RxString:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_UART_GotoNewLine:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_main:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_getCanvasDim:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_strcmp:	
   570                           ; 2 bytes @ 0x0
   571                           
   572  0070                     ?_getCoords:	
   573                           ; 2 bytes @ 0x0
   574                           
   575  0070                     ?_strlen:	
   576                           ; 2 bytes @ 0x0
   577                           
   578  0070                     ?_maxStep:	
   579                           ; 2 bytes @ 0x0
   580                           
   581  0070                     ?_activeMotor:	
   582                           ; 2 bytes @ 0x0
   583                           
   584  0070                     ?___wmul:	
   585                           ; 2 bytes @ 0x0
   586                           
   587  0070                     UART_TxChar@ch:	
   588                           ; 2 bytes @ 0x0
   589                           
   590  0070                     strcmp@s2:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     modM1@m:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     modM2@m:	
   597                           ; 2 bytes @ 0x0
   598                           
   599  0070                     modM3@m:	
   600                           ; 2 bytes @ 0x0
   601                           
   602  0070                     maxStep@stepx:	
   603                           ; 2 bytes @ 0x0
   604                           
   605  0070                     activeMotor@i:	
   606                           ; 2 bytes @ 0x0
   607                           
   608  0070                     constSpeed@activeX:	
   609                           ; 2 bytes @ 0x0
   610                           
   611  0070                     ___wmul@multiplier:	
   612                           ; 2 bytes @ 0x0
   613                           
   614                           
   615                           ; 2 bytes @ 0x0
   616  0070                     	ds	1
   617  0071                     ?_UART_TxString:	
   618  0071                     ??_UART_GotoNewLine:	
   619                           ; 1 bytes @ 0x1
   620                           
   621  0071                     UART_TxString@str:	
   622                           ; 1 bytes @ 0x1
   623                           
   624                           
   625                           ; 2 bytes @ 0x1
   626  0071                     	ds	1
   627  0072                     ??_strcmp:	
   628  0072                     ??_strlen:	
   629                           ; 1 bytes @ 0x2
   630                           
   631  0072                     ??_modM1:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0072                     ??_modM2:	
   635                           ; 1 bytes @ 0x2
   636                           
   637  0072                     ??_modM3:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0072                     ms_delay@val:	
   641                           ; 1 bytes @ 0x2
   642                           
   643  0072                     UART_RxString@stringa:	
   644                           ; 1 bytes @ 0x2
   645                           
   646  0072                     maxStep@stepy:	
   647                           ; 1 bytes @ 0x2
   648                           
   649  0072                     activeMotor@step:	
   650                           ; 2 bytes @ 0x2
   651                           
   652  0072                     constSpeed@activeY:	
   653                           ; 2 bytes @ 0x2
   654                           
   655  0072                     ___wmul@multiplicand:	
   656                           ; 2 bytes @ 0x2
   657                           
   658                           
   659                           ; 2 bytes @ 0x2
   660  0072                     	ds	1
   661  0073                     ??_UART_TxString:	
   662  0073                     ms_delay@i:	
   663                           ; 1 bytes @ 0x3
   664                           
   665  0073                     UART_RxString@len:	
   666                           ; 1 bytes @ 0x3
   667                           
   668                           
   669                           ; 1 bytes @ 0x3
   670  0073                     	ds	1
   671  0074                     ?_stepMotorX:	
   672  0074                     ?_stepMotorY:	
   673                           ; 1 bytes @ 0x4
   674                           
   675  0074                     ?_stepMotorZ:	
   676                           ; 1 bytes @ 0x4
   677                           
   678  0074                     ??_activeMotor:	
   679                           ; 1 bytes @ 0x4
   680                           
   681  0074                     ??___wmul:	
   682                           ; 1 bytes @ 0x4
   683                           
   684  0074                     stepMotorX@speed:	
   685                           ; 1 bytes @ 0x4
   686                           
   687  0074                     stepMotorY@speed:	
   688                           ; 1 bytes @ 0x4
   689                           
   690  0074                     stepMotorZ@speed:	
   691                           ; 1 bytes @ 0x4
   692                           
   693  0074                     UART_RxString@ch:	
   694                           ; 1 bytes @ 0x4
   695                           
   696  0074                     strcmp@r:	
   697                           ; 1 bytes @ 0x4
   698                           
   699  0074                     maxStep@stepz:	
   700                           ; 1 bytes @ 0x4
   701                           
   702  0074                     constSpeed@activeZ:	
   703                           ; 2 bytes @ 0x4
   704                           
   705  0074                     ___wmul@product:	
   706                           ; 2 bytes @ 0x4
   707                           
   708                           
   709                           ; 2 bytes @ 0x4
   710  0074                     	ds	1
   711  0075                     ??_getCanvasDim:	
   712  0075                     ??_getCoords:	
   713                           ; 1 bytes @ 0x5
   714                           
   715  0075                     strcmp@s1:	
   716                           ; 1 bytes @ 0x5
   717                           
   718  0075                     stepMotorX@mod:	
   719                           ; 1 bytes @ 0x5
   720                           
   721  0075                     stepMotorY@mod:	
   722                           ; 2 bytes @ 0x5
   723                           
   724  0075                     stepMotorZ@mod:	
   725                           ; 2 bytes @ 0x5
   726                           
   727                           
   728                           ; 2 bytes @ 0x5
   729  0075                     	ds	1
   730  0076                     ??_constSpeed:	
   731  0076                     ??_maxStep:	
   732                           ; 1 bytes @ 0x6
   733                           
   734  0076                     ?_UART_TxInt:	
   735                           ; 1 bytes @ 0x6
   736                           
   737  0076                     ?___awdiv:	
   738                           ; 1 bytes @ 0x6
   739                           
   740  0076                     strlen@s:	
   741                           ; 2 bytes @ 0x6
   742                           
   743  0076                     UART_TxInt@val:	
   744                           ; 1 bytes @ 0x6
   745                           
   746  0076                     ___awdiv@divisor:	
   747                           ; 2 bytes @ 0x6
   748                           
   749                           
   750                           ; 2 bytes @ 0x6
   751  0076                     	ds	1
   752  0077                     ??_stepMotorX:	
   753  0077                     ??_stepMotorY:	
   754                           ; 1 bytes @ 0x7
   755                           
   756  0077                     ??_stepMotorZ:	
   757                           ; 1 bytes @ 0x7
   758                           
   759  0077                     stepMotorX@dir:	
   760                           ; 1 bytes @ 0x7
   761                           
   762  0077                     stepMotorY@dir:	
   763                           ; 1 bytes @ 0x7
   764                           
   765  0077                     stepMotorZ@dir:	
   766                           ; 1 bytes @ 0x7
   767                           
   768  0077                     getCanvasDim@canvas:	
   769                           ; 1 bytes @ 0x7
   770                           
   771  0077                     strlen@cp:	
   772                           ; 1 bytes @ 0x7
   773                           
   774  0077                     _maxStep$382:	
   775                           ; 1 bytes @ 0x7
   776                           
   777  0077                     constSpeed@nMotor:	
   778                           ; 2 bytes @ 0x7
   779                           
   780                           
   781                           ; 2 bytes @ 0x7
   782  0077                     	ds	1
   783  0078                     ??_UART_TxInt:	
   784  0078                     ?_toint:	
   785                           ; 1 bytes @ 0x8
   786                           
   787  0078                     getCoords@coords:	
   788                           ; 2 bytes @ 0x8
   789                           
   790  0078                     getCanvasDim@j:	
   791                           ; 1 bytes @ 0x8
   792                           
   793  0078                     ___awdiv@dividend:	
   794                           ; 2 bytes @ 0x8
   795                           
   796                           
   797                           ; 2 bytes @ 0x8
   798  0078                     	ds	1
   799  0079                     UART_TxInt@sig:	
   800  0079                     _maxStep$383:	
   801                           ; 1 bytes @ 0x9
   802                           
   803  0079                     getCoords@i:	
   804                           ; 2 bytes @ 0x9
   805                           
   806                           
   807                           ; 2 bytes @ 0x9
   808  0079                     	ds	1
   809  007A                     ??_toint:	
   810  007A                     ??___awdiv:	
   811                           ; 1 bytes @ 0xA
   812                           
   813  007A                     UART_TxInt@uni:	
   814                           ; 1 bytes @ 0xA
   815                           
   816                           
   817                           ; 1 bytes @ 0xA
   818  007A                     	ds	1
   819  007B                     ??_equivVal:	
   820  007B                     UART_TxInt@dec:	
   821                           ; 1 bytes @ 0xB
   822                           
   823  007B                     maxStep@l:	
   824                           ; 1 bytes @ 0xB
   825                           
   826                           
   827                           ; 2 bytes @ 0xB
   828  007B                     	ds	1
   829  007C                     UART_TxInt@cent:	
   830                           
   831                           ; 1 bytes @ 0xC
   832  007C                     	ds	1
   833                           
   834                           	psect	cstackBANK0
   835  004E                     __pcstackBANK0:	
   836  004E                     ___awdiv@counter:	
   837  004E                     toint@r:	
   838                           ; 1 bytes @ 0x0
   839                           
   840                           
   841                           ; 2 bytes @ 0x0
   842  004E                     	ds	1
   843  004F                     ___awdiv@sign:	
   844                           
   845                           ; 1 bytes @ 0x1
   846  004F                     	ds	1
   847  0050                     toint@flag:	
   848  0050                     ___awdiv@quotient:	
   849                           ; 2 bytes @ 0x2
   850                           
   851                           
   852                           ; 2 bytes @ 0x2
   853  0050                     	ds	2
   854  0052                     toint@value:	
   855                           
   856                           ; 2 bytes @ 0x4
   857  0052                     	ds	2
   858  0054                     toint@i:	
   859                           
   860                           ; 2 bytes @ 0x6
   861  0054                     	ds	2
   862  0056                     toint@c:	
   863                           
   864                           ; 1 bytes @ 0x8
   865  0056                     	ds	1
   866  0057                     ?_equivVal:	
   867  0057                     equivVal@Mcanvas:	
   868                           ; 2 bytes @ 0x9
   869                           
   870                           
   871                           ; 2 bytes @ 0x9
   872  0057                     	ds	2
   873  0059                     equivVal@Mstep:	
   874                           
   875                           ; 2 bytes @ 0xB
   876  0059                     	ds	2
   877  005B                     equivVal@canvas:	
   878                           
   879                           ; 2 bytes @ 0xD
   880  005B                     	ds	2
   881  005D                     ??_main:	
   882                           
   883                           ; 1 bytes @ 0xF
   884  005D                     	ds	3
   885  0060                     main@largest:	
   886                           
   887                           ; 2 bytes @ 0x12
   888  0060                     	ds	2
   889  0062                     main@activeZ:	
   890                           
   891                           ; 2 bytes @ 0x14
   892  0062                     	ds	2
   893  0064                     main@i_511:	
   894                           
   895                           ; 2 bytes @ 0x16
   896  0064                     	ds	2
   897  0066                     main@i_513:	
   898                           
   899                           ; 2 bytes @ 0x18
   900  0066                     	ds	2
   901  0068                     main@activeX:	
   902                           
   903                           ; 2 bytes @ 0x1A
   904  0068                     	ds	2
   905  006A                     main@activeY:	
   906                           
   907                           ; 2 bytes @ 0x1C
   908  006A                     	ds	2
   909  006C                     main@i:	
   910                           
   911                           ; 2 bytes @ 0x1E
   912  006C                     	ds	2
   913                           
   914                           	psect	maintext
   915  0552                     __pmaintext:	
   916 ;;
   917 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   918 ;;
   919 ;; *************** function _main *****************
   920 ;; Defined at:
   921 ;;		line 85 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  i               2   24[BANK0 ] int 
   926 ;;  i               2   22[BANK0 ] int 
   927 ;;  i               2   30[BANK0 ] int 
   928 ;;  activeY         2   28[BANK0 ] int 
   929 ;;  activeX         2   26[BANK0 ] int 
   930 ;;  activeZ         2   20[BANK0 ] int 
   931 ;;  largest         2   18[BANK0 ] int 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : B00/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       0       0       0       0
   942 ;;      Locals:         0      14       0       0       0
   943 ;;      Temps:          0       3       0       0       0
   944 ;;      Totals:         0      17       0       0       0
   945 ;;Total ram usage:       17 bytes
   946 ;; Hardware stack levels required when called:    3
   947 ;; This function calls:
   948 ;;		_UART_GotoNewLine
   949 ;;		_UART_Init
   950 ;;		_UART_RxString
   951 ;;		_UART_TxInt
   952 ;;		_UART_TxString
   953 ;;		_activeMotor
   954 ;;		_constSpeed
   955 ;;		_contStepX
   956 ;;		_contStepY
   957 ;;		_equivVal
   958 ;;		_getCanvasDim
   959 ;;		_getCoords
   960 ;;		_maxStep
   961 ;;		_stepMotorX
   962 ;;		_stepMotorY
   963 ;;		_stepMotorZ
   964 ;;		_strcmp
   965 ;;		_toint
   966 ;; This function is called by:
   967 ;;		Startup code after reset
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           
   972                           ;psect for function _main
   973  0552                     _main:	
   974                           
   975                           ;main.c: 86: PORTA = 0x00;
   976                           
   977                           ;incstack = 0
   978                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   979  0552  1283               	bcf	3,5	;RP0=0, select bank0
   980  0553  1303               	bcf	3,6	;RP1=0, select bank0
   981  0554  0185               	clrf	5	;volatile
   982                           
   983                           ;main.c: 87: PORTB = 0x00;
   984  0555  0186               	clrf	6	;volatile
   985                           
   986                           ;main.c: 88: PORTC = 0x00;
   987  0556  0187               	clrf	7	;volatile
   988                           
   989                           ;main.c: 89: PORTD = 0x00;
   990  0557  0188               	clrf	8	;volatile
   991                           
   992                           ;main.c: 90: PORTE = 0x00;
   993  0558  0189               	clrf	9	;volatile
   994                           
   995                           ;main.c: 92: TRISA = 0b00000000;
   996  0559  1683               	bsf	3,5	;RP0=1, select bank1
   997  055A  1303               	bcf	3,6	;RP1=0, select bank1
   998  055B  0185               	clrf	5	;volatile
   999                           
  1000                           ;main.c: 93: TRISB = 0b01100111;
  1001  055C  3067               	movlw	103
  1002  055D  0086               	movwf	6	;volatile
  1003                           
  1004                           ;main.c: 94: TRISC = 0b10000000;
  1005  055E  3080               	movlw	128
  1006  055F  0087               	movwf	7	;volatile
  1007                           
  1008                           ;main.c: 95: TRISD = 0b00000000;
  1009  0560  0188               	clrf	8	;volatile
  1010                           
  1011                           ;main.c: 96: TRISE = 0b00000000;
  1012  0561  0189               	clrf	9	;volatile
  1013                           
  1014                           ;main.c: 98: ANSEL = 0x00;
  1015  0562  1683               	bsf	3,5	;RP0=1, select bank3
  1016  0563  1703               	bsf	3,6	;RP1=1, select bank3
  1017  0564  0188               	clrf	8	;volatile
  1018                           
  1019                           ;main.c: 99: ANSELH = 0x00;
  1020  0565  0189               	clrf	9	;volatile
  1021                           
  1022                           ;main.c: 102: UART_Init();
  1023  0566  120A  158A  26DC  120A  118A  	fcall	_UART_Init
  1024                           
  1025                           ;main.c: 104: motorX.dir = 1;
  1026  056B  1283               	bcf	3,5	;RP0=0, select bank0
  1027  056C  1303               	bcf	3,6	;RP1=0, select bank0
  1028  056D  01A0               	clrf	_motorX
  1029  056E  0AA0               	incf	_motorX,f
  1030                           
  1031                           ;main.c: 105: motorX.speed = 1;
  1032  056F  01A1               	clrf	_motorX+1
  1033  0570  0AA1               	incf	_motorX+1,f
  1034                           
  1035                           ;main.c: 106: motorX.mod = 1;
  1036  0571  01A2               	clrf	_motorX+2
  1037  0572  0AA2               	incf	_motorX+2,f
  1038                           
  1039                           ;main.c: 108: motorY.dir = 1;
  1040  0573  01A5               	clrf	_motorY
  1041  0574  0AA5               	incf	_motorY,f
  1042                           
  1043                           ;main.c: 109: motorY.speed = 1;
  1044  0575  01A6               	clrf	_motorY+1
  1045  0576  0AA6               	incf	_motorY+1,f
  1046                           
  1047                           ;main.c: 110: motorY.mod = 1;
  1048  0577  01A7               	clrf	_motorY+2
  1049  0578  0AA7               	incf	_motorY+2,f
  1050                           
  1051                           ;main.c: 112: motorZ.dir = 1;
  1052  0579  01AA               	clrf	_motorZ
  1053  057A  0AAA               	incf	_motorZ,f
  1054                           
  1055                           ;main.c: 113: motorZ.speed = 1;
  1056  057B  01AB               	clrf	_motorZ+1
  1057  057C  0AAB               	incf	_motorZ+1,f
  1058                           
  1059                           ;main.c: 114: motorZ.mod = 1;
  1060  057D  01AC               	clrf	_motorZ+2
  1061  057E  0AAC               	incf	_motorZ+2,f
  1062  057F                     l2761:	
  1063                           ;main.c: 131: while(1){
  1064                           
  1065                           
  1066                           ;main.c: 133: end = 0;
  1067  057F  01EE               	clrf	_end
  1068                           
  1069                           ;main.c: 136: getCanvasDim(canvas);
  1070  0580  30DA               	movlw	(low (_canvas| 0))& (0+255)
  1071  0581  120A  118A  2315  120A  118A  	fcall	_getCanvasDim
  1072                           
  1073                           ;main.c: 137: canvasx = toint(canvasX);
  1074  0586  30C5               	movlw	(low (_canvasX| 0))& (0+255)
  1075  0587  120A  118A  2458  120A  118A  	fcall	_toint
  1076  058C  0879               	movf	?_toint+1,w
  1077  058D  1283               	bcf	3,5	;RP0=0, select bank0
  1078  058E  1303               	bcf	3,6	;RP1=0, select bank0
  1079  058F  00B0               	movwf	_canvasx+1
  1080  0590  0878               	movf	?_toint,w
  1081  0591  00AF               	movwf	_canvasx
  1082                           
  1083                           ;main.c: 138: UART_TxInt(canvasx);
  1084  0592  0830               	movf	_canvasx+1,w
  1085  0593  00F7               	movwf	UART_TxInt@val+1
  1086  0594  082F               	movf	_canvasx,w
  1087  0595  00F6               	movwf	UART_TxInt@val
  1088  0596  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1089                           
  1090                           ;main.c: 139: canvasy = toint(canvasY);
  1091  059B  30C8               	movlw	(low (_canvasY| 0))& (0+255)
  1092  059C  120A  118A  2458  120A  118A  	fcall	_toint
  1093  05A1  0879               	movf	?_toint+1,w
  1094  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1095  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1096  05A4  00B2               	movwf	_canvasy+1
  1097  05A5  0878               	movf	?_toint,w
  1098  05A6  00B1               	movwf	_canvasy
  1099                           
  1100                           ;main.c: 140: UART_TxInt(canvasy);
  1101  05A7  0832               	movf	_canvasy+1,w
  1102  05A8  00F7               	movwf	UART_TxInt@val+1
  1103  05A9  0831               	movf	_canvasy,w
  1104  05AA  00F6               	movwf	UART_TxInt@val
  1105  05AB  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1106  05B0                     l353:	
  1107                           ;main.c: 142: do{
  1108                           
  1109                           
  1110                           ;main.c: 143: UART_RxString(coords);
  1111  05B0  30D1               	movlw	(low (_coords| 0))& (0+255)
  1112  05B1  120A  158A  27CD  120A  118A  	fcall	_UART_RxString
  1113                           
  1114                           ;main.c: 144: UART_TxString("eco: ");
  1115  05B6  3038               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1116  05B7  00F1               	movwf	UART_TxString@str
  1117  05B8  3080               	movlw	128
  1118  05B9  00F2               	movwf	UART_TxString@str+1
  1119  05BA  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1120                           
  1121                           ;main.c: 145: UART_TxString(coords);
  1122  05BF  30D1               	movlw	(low (_coords| 0))& (0+255)
  1123  05C0  00F1               	movwf	UART_TxString@str
  1124  05C1  3000               	movlw	0
  1125  05C2  00F2               	movwf	UART_TxString@str+1
  1126  05C3  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1127                           
  1128                           ;main.c: 148: if(!strcmp(coords,"ok"))
  1129  05C8  3048               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1130  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  1131  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  1132  05CB  00DD               	movwf	??_main
  1133  05CC  085D               	movf	??_main,w
  1134  05CD  00F0               	movwf	strcmp@s2
  1135  05CE  30D1               	movlw	(low (_coords| 0))& (0+255)
  1136  05CF  120A  158A  2778  120A  118A  	fcall	_strcmp
  1137  05D4  0870               	movf	?_strcmp,w
  1138  05D5  0471               	iorwf	?_strcmp+1,w
  1139  05D6  1D03               	btfss	3,2
  1140  05D7  2DDE               	goto	l2777
  1141                           
  1142                           ;main.c: 149: getCoords(coords);
  1143  05D8  30D1               	movlw	(low (_coords| 0))& (0+255)
  1144  05D9  120A  118A  22B4  120A  118A  	fcall	_getCoords
  1145  05DE                     l2777:	
  1146                           
  1147                           ;main.c: 152: if(!strcmp(coords,"end"))
  1148  05DE  3044               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1149  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  1150  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  1151  05E1  00DD               	movwf	??_main
  1152  05E2  085D               	movf	??_main,w
  1153  05E3  00F0               	movwf	strcmp@s2
  1154  05E4  30D1               	movlw	(low (_coords| 0))& (0+255)
  1155  05E5  120A  158A  2778  120A  118A  	fcall	_strcmp
  1156  05EA  0870               	movf	?_strcmp,w
  1157  05EB  0471               	iorwf	?_strcmp+1,w
  1158  05EC  1D03               	btfss	3,2
  1159  05ED  2DF2               	goto	l2781
  1160                           
  1161                           ;main.c: 153: end = 1;
  1162  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1163  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1164  05F0  01EE               	clrf	_end
  1165  05F1  0AEE               	incf	_end,f
  1166  05F2                     l2781:	
  1167                           
  1168                           ;main.c: 155: if(end != 1){
  1169  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1170  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  1171  05F4  036E               	decf	_end,w
  1172  05F5  1903               	btfsc	3,2
  1173  05F6  2FD4               	goto	l2863
  1174                           
  1175                           ;main.c: 157: stepx = equivVal( 1, 1,toint(stepX));
  1176  05F7  3001               	movlw	1
  1177  05F8  00D7               	movwf	equivVal@Mcanvas
  1178  05F9  3000               	movlw	0
  1179  05FA  00D8               	movwf	equivVal@Mcanvas+1
  1180  05FB  3001               	movlw	1
  1181  05FC  00D9               	movwf	equivVal@Mstep
  1182  05FD  3000               	movlw	0
  1183  05FE  00DA               	movwf	equivVal@Mstep+1
  1184  05FF  30B0               	movlw	(low (_stepX| 0))& (0+255)
  1185  0600  120A  118A  2458  120A  118A  	fcall	_toint
  1186  0605  0879               	movf	?_toint+1,w
  1187  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1188  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1189  0608  00DC               	movwf	equivVal@canvas+1
  1190  0609  0878               	movf	?_toint,w
  1191  060A  00DB               	movwf	equivVal@canvas
  1192  060B  120A  158A  2712  120A  118A  	fcall	_equivVal
  1193  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0611  1303               	bcf	3,6	;RP1=0, select bank0
  1195  0612  0858               	movf	?_equivVal+1,w
  1196  0613  00BA               	movwf	_stepx+1
  1197  0614  0857               	movf	?_equivVal,w
  1198  0615  00B9               	movwf	_stepx
  1199                           
  1200                           ;main.c: 158: UART_GotoNewLine();
  1201  0616  120A  158A  268D  120A  118A  	fcall	_UART_GotoNewLine
  1202                           
  1203                           ;main.c: 159: UART_TxString("ecoX: ");
  1204  061B  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1205  061C  00F1               	movwf	UART_TxString@str
  1206  061D  3080               	movlw	128
  1207  061E  00F2               	movwf	UART_TxString@str+1
  1208  061F  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1209                           
  1210                           ;main.c: 160: UART_TxInt(stepx);
  1211  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1212  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0626  083A               	movf	_stepx+1,w
  1214  0627  00F7               	movwf	UART_TxInt@val+1
  1215  0628  0839               	movf	_stepx,w
  1216  0629  00F6               	movwf	UART_TxInt@val
  1217  062A  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1218                           
  1219                           ;main.c: 162: stepy = equivVal( 1, 1,toint(stepY));
  1220  062F  3001               	movlw	1
  1221  0630  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0631  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0632  00D7               	movwf	equivVal@Mcanvas
  1224  0633  3000               	movlw	0
  1225  0634  00D8               	movwf	equivVal@Mcanvas+1
  1226  0635  3001               	movlw	1
  1227  0636  00D9               	movwf	equivVal@Mstep
  1228  0637  3000               	movlw	0
  1229  0638  00DA               	movwf	equivVal@Mstep+1
  1230  0639  30B7               	movlw	(low (_stepY| 0))& (0+255)
  1231  063A  120A  118A  2458  120A  118A  	fcall	_toint
  1232  063F  0879               	movf	?_toint+1,w
  1233  0640  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0641  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0642  00DC               	movwf	equivVal@canvas+1
  1236  0643  0878               	movf	?_toint,w
  1237  0644  00DB               	movwf	equivVal@canvas
  1238  0645  120A  158A  2712  120A  118A  	fcall	_equivVal
  1239  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1240  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1241  064C  0858               	movf	?_equivVal+1,w
  1242  064D  00BE               	movwf	_stepy+1
  1243  064E  0857               	movf	?_equivVal,w
  1244  064F  00BD               	movwf	_stepy
  1245                           
  1246                           ;main.c: 163: UART_GotoNewLine();
  1247  0650  120A  158A  268D  120A  118A  	fcall	_UART_GotoNewLine
  1248                           
  1249                           ;main.c: 164: UART_TxString("ecoY: ");
  1250  0655  302A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1251  0656  00F1               	movwf	UART_TxString@str
  1252  0657  3080               	movlw	128
  1253  0658  00F2               	movwf	UART_TxString@str+1
  1254  0659  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1255                           
  1256                           ;main.c: 165: UART_TxInt(stepy);
  1257  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1258  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0660  083E               	movf	_stepy+1,w
  1260  0661  00F7               	movwf	UART_TxInt@val+1
  1261  0662  083D               	movf	_stepy,w
  1262  0663  00F6               	movwf	UART_TxInt@val
  1263  0664  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1264                           
  1265                           ;main.c: 168: stepz = toint(stepZ);
  1266  0669  30BE               	movlw	(low (_stepZ| 0))& (0+255)
  1267  066A  120A  118A  2458  120A  118A  	fcall	_toint
  1268  066F  0879               	movf	?_toint+1,w
  1269  0670  1283               	bcf	3,5	;RP0=0, select bank0
  1270  0671  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0672  00C2               	movwf	_stepz+1
  1272  0673  0878               	movf	?_toint,w
  1273  0674  00C1               	movwf	_stepz
  1274                           
  1275                           ;main.c: 169: UART_GotoNewLine();
  1276  0675  120A  158A  268D  120A  118A  	fcall	_UART_GotoNewLine
  1277                           
  1278                           ;main.c: 170: UART_TxString("ecoZ: ");
  1279  067A  3031               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1280  067B  00F1               	movwf	UART_TxString@str
  1281  067C  3080               	movlw	128
  1282  067D  00F2               	movwf	UART_TxString@str+1
  1283  067E  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1284                           
  1285                           ;main.c: 171: UART_TxInt(stepz);
  1286  0683  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0684  1303               	bcf	3,6	;RP1=0, select bank0
  1288  0685  0842               	movf	_stepz+1,w
  1289  0686  00F7               	movwf	UART_TxInt@val+1
  1290  0687  0841               	movf	_stepz,w
  1291  0688  00F6               	movwf	UART_TxInt@val
  1292  0689  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1293                           
  1294                           ;main.c: 175: contStepX();
  1295  068E  120A  118A  2380  120A  118A  	fcall	_contStepX
  1296                           
  1297                           ;main.c: 176: UART_GotoNewLine();
  1298  0693  120A  158A  268D  120A  118A  	fcall	_UART_GotoNewLine
  1299                           
  1300                           ;main.c: 177: UART_TxString("todo X: ");
  1301  0698  3011               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1302  0699  00F1               	movwf	UART_TxString@str
  1303  069A  3080               	movlw	128
  1304  069B  00F2               	movwf	UART_TxString@str+1
  1305  069C  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1306                           
  1307                           ;main.c: 178: UART_TxInt(stepxTodo);
  1308  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  1309  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  1310  06A3  083C               	movf	_stepxTodo+1,w
  1311  06A4  00F7               	movwf	UART_TxInt@val+1
  1312  06A5  083B               	movf	_stepxTodo,w
  1313  06A6  00F6               	movwf	UART_TxInt@val
  1314  06A7  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1315                           
  1316                           ;main.c: 179: contStepY();
  1317  06AC  120A  118A  23EC  120A  118A  	fcall	_contStepY
  1318                           
  1319                           ;main.c: 180: UART_GotoNewLine();
  1320  06B1  120A  158A  268D  120A  118A  	fcall	_UART_GotoNewLine
  1321                           
  1322                           ;main.c: 181: UART_TxString("todo Y: ");
  1323  06B6  301A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1324  06B7  00F1               	movwf	UART_TxString@str
  1325  06B8  3080               	movlw	128
  1326  06B9  00F2               	movwf	UART_TxString@str+1
  1327  06BA  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  1328                           
  1329                           ;main.c: 182: UART_TxInt(stepyTodo);
  1330  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  1331  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  1332  06C1  0840               	movf	_stepyTodo+1,w
  1333  06C2  00F7               	movwf	UART_TxInt@val+1
  1334  06C3  083F               	movf	_stepyTodo,w
  1335  06C4  00F6               	movwf	UART_TxInt@val
  1336  06C5  120A  118A  24C9  120A  118A  	fcall	_UART_TxInt
  1337                           
  1338                           ;main.c: 187: int largest = maxStep(stepxTodo, stepyTodo, stepzTodo);
  1339  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1340  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1341  06CC  083C               	movf	_stepxTodo+1,w
  1342  06CD  00F1               	movwf	maxStep@stepx+1
  1343  06CE  083B               	movf	_stepxTodo,w
  1344  06CF  00F0               	movwf	maxStep@stepx
  1345  06D0  0840               	movf	_stepyTodo+1,w
  1346  06D1  00F3               	movwf	maxStep@stepy+1
  1347  06D2  083F               	movf	_stepyTodo,w
  1348  06D3  00F2               	movwf	maxStep@stepy
  1349  06D4  0844               	movf	_stepzTodo+1,w
  1350  06D5  00F5               	movwf	maxStep@stepz+1
  1351  06D6  0843               	movf	_stepzTodo,w
  1352  06D7  00F4               	movwf	maxStep@stepz
  1353  06D8  120A  118A  2126  120A  118A  	fcall	_maxStep
  1354  06DD  0871               	movf	?_maxStep+1,w
  1355  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  1356  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  1357  06E0  00E1               	movwf	main@largest+1
  1358  06E1  0870               	movf	?_maxStep,w
  1359  06E2  00E0               	movwf	main@largest
  1360                           
  1361                           ;main.c: 188: int activeX = 0, activeY = 0, activeZ = 0;
  1362  06E3  01E8               	clrf	main@activeX
  1363  06E4  01E9               	clrf	main@activeX+1
  1364  06E5  01EA               	clrf	main@activeY
  1365  06E6  01EB               	clrf	main@activeY+1
  1366  06E7  01E2               	clrf	main@activeZ
  1367  06E8  01E3               	clrf	main@activeZ+1
  1368                           
  1369                           ;main.c: 191: for(int i = 0; i<= largest ; i++){
  1370  06E9  01EC               	clrf	main@i
  1371  06EA  01ED               	clrf	main@i+1
  1372  06EB                     l2837:	
  1373  06EB  0861               	movf	main@largest+1,w
  1374  06EC  3A80               	xorlw	128
  1375  06ED  00DD               	movwf	??_main
  1376  06EE  086D               	movf	main@i+1,w
  1377  06EF  3A80               	xorlw	128
  1378  06F0  025D               	subwf	??_main,w
  1379  06F1  1D03               	skipz
  1380  06F2  2EF5               	goto	u2895
  1381  06F3  086C               	movf	main@i,w
  1382  06F4  0260               	subwf	main@largest,w
  1383  06F5                     u2895:	
  1384  06F5  1C03               	btfss	3,0
  1385  06F6  2F67               	goto	l2839
  1386                           
  1387                           ;main.c: 192: activeX = activeMotor(i, stepxTodo);
  1388  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1389  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1390  06F9  086D               	movf	main@i+1,w
  1391  06FA  00F1               	movwf	activeMotor@i+1
  1392  06FB  086C               	movf	main@i,w
  1393  06FC  00F0               	movwf	activeMotor@i
  1394  06FD  083C               	movf	_stepxTodo+1,w
  1395  06FE  00F3               	movwf	activeMotor@step+1
  1396  06FF  083B               	movf	_stepxTodo,w
  1397  0700  00F2               	movwf	activeMotor@step
  1398  0701  120A  158A  26B4  120A  118A  	fcall	_activeMotor
  1399  0706  0871               	movf	?_activeMotor+1,w
  1400  0707  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0708  1303               	bcf	3,6	;RP1=0, select bank0
  1402  0709  00E9               	movwf	main@activeX+1
  1403  070A  0870               	movf	?_activeMotor,w
  1404  070B  00E8               	movwf	main@activeX
  1405                           
  1406                           ;main.c: 193: activeY = activeMotor(i, stepyTodo);
  1407  070C  086D               	movf	main@i+1,w
  1408  070D  00F1               	movwf	activeMotor@i+1
  1409  070E  086C               	movf	main@i,w
  1410  070F  00F0               	movwf	activeMotor@i
  1411  0710  0840               	movf	_stepyTodo+1,w
  1412  0711  00F3               	movwf	activeMotor@step+1
  1413  0712  083F               	movf	_stepyTodo,w
  1414  0713  00F2               	movwf	activeMotor@step
  1415  0714  120A  158A  26B4  120A  118A  	fcall	_activeMotor
  1416  0719  0871               	movf	?_activeMotor+1,w
  1417  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1418  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1419  071C  00EB               	movwf	main@activeY+1
  1420  071D  0870               	movf	?_activeMotor,w
  1421  071E  00EA               	movwf	main@activeY
  1422                           
  1423                           ;main.c: 195: constSpeed(activeX, activeY, activeZ);
  1424  071F  0869               	movf	main@activeX+1,w
  1425  0720  00F1               	movwf	constSpeed@activeX+1
  1426  0721  0868               	movf	main@activeX,w
  1427  0722  00F0               	movwf	constSpeed@activeX
  1428  0723  086B               	movf	main@activeY+1,w
  1429  0724  00F3               	movwf	constSpeed@activeY+1
  1430  0725  086A               	movf	main@activeY,w
  1431  0726  00F2               	movwf	constSpeed@activeY
  1432  0727  0863               	movf	main@activeZ+1,w
  1433  0728  00F5               	movwf	constSpeed@activeZ+1
  1434  0729  0862               	movf	main@activeZ,w
  1435  072A  00F4               	movwf	constSpeed@activeZ
  1436  072B  120A  158A  2733  120A  118A  	fcall	_constSpeed
  1437                           
  1438                           ;main.c: 197: if(activeX == 1)
  1439  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1440  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1441  0732  0368               	decf	main@activeX,w
  1442  0733  0469               	iorwf	main@activeX+1,w
  1443  0734  1D03               	btfss	3,2
  1444  0735  2F47               	goto	l2831
  1445                           
  1446                           ;main.c: 198: stepMotorX(motorX.dir, motorX.speed, motorX.mod);
  1447  0736  0821               	movf	_motorX+1,w
  1448  0737  00DD               	movwf	??_main
  1449  0738  085D               	movf	??_main,w
  1450  0739  00F4               	movwf	stepMotorX@speed
  1451  073A  0822               	movf	_motorX+2,w
  1452  073B  00DE               	movwf	??_main+1
  1453  073C  01DF               	clrf	??_main+2
  1454  073D  085E               	movf	??_main+1,w
  1455  073E  00F5               	movwf	stepMotorX@mod
  1456  073F  085F               	movf	??_main+2,w
  1457  0740  00F6               	movwf	stepMotorX@mod+1
  1458  0741  0820               	movf	_motorX,w
  1459  0742  120A  118A  2084  120A  118A  	fcall	_stepMotorX
  1460  0747                     l2831:	
  1461                           
  1462                           ;main.c: 200: if(activeY == 1)
  1463  0747  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0748  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0749  036A               	decf	main@activeY,w
  1466  074A  046B               	iorwf	main@activeY+1,w
  1467  074B  1D03               	btfss	3,2
  1468  074C  2F5E               	goto	l2835
  1469                           
  1470                           ;main.c: 201: stepMotorY(motorY.dir, motorY.speed, motorY.mod);
  1471  074D  0826               	movf	_motorY+1,w
  1472  074E  00DD               	movwf	??_main
  1473  074F  085D               	movf	??_main,w
  1474  0750  00F4               	movwf	stepMotorY@speed
  1475  0751  0827               	movf	_motorY+2,w
  1476  0752  00DE               	movwf	??_main+1
  1477  0753  01DF               	clrf	??_main+2
  1478  0754  085E               	movf	??_main+1,w
  1479  0755  00F5               	movwf	stepMotorY@mod
  1480  0756  085F               	movf	??_main+2,w
  1481  0757  00F6               	movwf	stepMotorY@mod+1
  1482  0758  0825               	movf	_motorY,w
  1483  0759  120A  118A  20BA  120A  118A  	fcall	_stepMotorY
  1484  075E                     l2835:	
  1485  075E  3001               	movlw	1
  1486  075F  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0760  1303               	bcf	3,6	;RP1=0, select bank0
  1488  0761  07EC               	addwf	main@i,f
  1489  0762  1803               	skipnc
  1490  0763  0AED               	incf	main@i+1,f
  1491  0764  3000               	movlw	0
  1492  0765  07ED               	addwf	main@i+1,f
  1493  0766  2EEB               	goto	l2837
  1494  0767                     l2839:	
  1495                           
  1496                           ;main.c: 202: }
  1497                           ;main.c: 205: for(int i = 0; i<= stepz; i++){
  1498  0767  1283               	bcf	3,5	;RP0=0, select bank0
  1499  0768  1303               	bcf	3,6	;RP1=0, select bank0
  1500  0769  01E4               	clrf	main@i_511
  1501  076A  01E5               	clrf	main@i_511+1
  1502  076B                     l2847:	
  1503  076B  0842               	movf	_stepz+1,w
  1504  076C  3A80               	xorlw	128
  1505  076D  00DD               	movwf	??_main
  1506  076E  0865               	movf	main@i_511+1,w
  1507  076F  3A80               	xorlw	128
  1508  0770  025D               	subwf	??_main,w
  1509  0771  1D03               	skipz
  1510  0772  2F75               	goto	u2905
  1511  0773  0864               	movf	main@i_511,w
  1512  0774  0241               	subwf	_stepz,w
  1513  0775                     u2905:	
  1514  0775  1C03               	btfss	3,0
  1515  0776  2F97               	goto	l2849
  1516                           
  1517                           ;main.c: 206: motorZ.dir = defaultDirz;
  1518  0777  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0778  1303               	bcf	3,6	;RP1=0, select bank0
  1520  0779  0846               	movf	_defaultDirz,w
  1521  077A  00DD               	movwf	??_main
  1522  077B  085D               	movf	??_main,w
  1523  077C  00AA               	movwf	_motorZ
  1524                           
  1525                           ;main.c: 207: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  1526  077D  082B               	movf	_motorZ+1,w
  1527  077E  00DD               	movwf	??_main
  1528  077F  085D               	movf	??_main,w
  1529  0780  00F4               	movwf	stepMotorZ@speed
  1530  0781  082C               	movf	_motorZ+2,w
  1531  0782  00DE               	movwf	??_main+1
  1532  0783  01DF               	clrf	??_main+2
  1533  0784  085E               	movf	??_main+1,w
  1534  0785  00F5               	movwf	stepMotorZ@mod
  1535  0786  085F               	movf	??_main+2,w
  1536  0787  00F6               	movwf	stepMotorZ@mod+1
  1537  0788  082A               	movf	_motorZ,w
  1538  0789  120A  118A  20F0  120A  118A  	fcall	_stepMotorZ
  1539  078E  3001               	movlw	1
  1540  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0791  07E4               	addwf	main@i_511,f
  1543  0792  1803               	skipnc
  1544  0793  0AE5               	incf	main@i_511+1,f
  1545  0794  3000               	movlw	0
  1546  0795  07E5               	addwf	main@i_511+1,f
  1547  0796  2F6B               	goto	l2847
  1548  0797                     l2849:	
  1549                           
  1550                           ;main.c: 208: }
  1551                           ;main.c: 209: for(int i = 0; i<= stepz; i++){
  1552  0797  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0798  1303               	bcf	3,6	;RP1=0, select bank0
  1554  0799  01E6               	clrf	main@i_513
  1555  079A  01E7               	clrf	main@i_513+1
  1556  079B                     l2859:	
  1557  079B  0842               	movf	_stepz+1,w
  1558  079C  3A80               	xorlw	128
  1559  079D  00DD               	movwf	??_main
  1560  079E  0867               	movf	main@i_513+1,w
  1561  079F  3A80               	xorlw	128
  1562  07A0  025D               	subwf	??_main,w
  1563  07A1  1D03               	skipz
  1564  07A2  2FA5               	goto	u2925
  1565  07A3  0866               	movf	main@i_513,w
  1566  07A4  0241               	subwf	_stepz,w
  1567  07A5                     u2925:	
  1568  07A5  1C03               	btfss	3,0
  1569  07A6  2FCA               	goto	l2861
  1570                           
  1571                           ;main.c: 210: if(motorZ.dir == 1) motorZ.dir = 0;
  1572  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  1573  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  1574  07A9  032A               	decf	_motorZ,w
  1575  07AA  1D03               	btfss	3,2
  1576  07AB  2FAE               	goto	l367
  1577  07AC  01AA               	clrf	_motorZ
  1578  07AD  2FB0               	goto	l2855
  1579  07AE                     l367:	
  1580                           
  1581                           ;main.c: 211: else motorZ.dir = 1;
  1582  07AE  01AA               	clrf	_motorZ
  1583  07AF  0AAA               	incf	_motorZ,f
  1584  07B0                     l2855:	
  1585                           
  1586                           ;main.c: 212: stepMotorZ(motorZ.dir, motorZ.speed, motorZ.mod);
  1587  07B0  082B               	movf	_motorZ+1,w
  1588  07B1  00DD               	movwf	??_main
  1589  07B2  085D               	movf	??_main,w
  1590  07B3  00F4               	movwf	stepMotorZ@speed
  1591  07B4  082C               	movf	_motorZ+2,w
  1592  07B5  00DE               	movwf	??_main+1
  1593  07B6  01DF               	clrf	??_main+2
  1594  07B7  085E               	movf	??_main+1,w
  1595  07B8  00F5               	movwf	stepMotorZ@mod
  1596  07B9  085F               	movf	??_main+2,w
  1597  07BA  00F6               	movwf	stepMotorZ@mod+1
  1598  07BB  082A               	movf	_motorZ,w
  1599  07BC  120A  118A  20F0  120A  118A  	fcall	_stepMotorZ
  1600  07C1  3001               	movlw	1
  1601  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1602  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1603  07C4  07E6               	addwf	main@i_513,f
  1604  07C5  1803               	skipnc
  1605  07C6  0AE7               	incf	main@i_513+1,f
  1606  07C7  3000               	movlw	0
  1607  07C8  07E7               	addwf	main@i_513+1,f
  1608  07C9  2F9B               	goto	l2859
  1609  07CA                     l2861:	
  1610                           
  1611                           ;main.c: 213: }
  1612                           ;main.c: 218: stepXprec = stepx;
  1613  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  1614  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  1615  07CC  083A               	movf	_stepx+1,w
  1616  07CD  00B4               	movwf	_stepXprec+1
  1617  07CE  0839               	movf	_stepx,w
  1618  07CF  00B3               	movwf	_stepXprec
  1619                           
  1620                           ;main.c: 219: stepYprec = stepy;
  1621  07D0  083E               	movf	_stepy+1,w
  1622  07D1  00B6               	movwf	_stepYprec+1
  1623  07D2  083D               	movf	_stepy,w
  1624  07D3  00B5               	movwf	_stepYprec
  1625  07D4                     l2863:	
  1626                           
  1627                           ;main.c: 222: }
  1628                           ;main.c: 225: }while(end!=1);
  1629  07D4  036E               	decf	_end,w
  1630  07D5  1D03               	btfss	3,2
  1631  07D6  2DB0               	goto	l353
  1632                           
  1633                           ;main.c: 227: PORTBbits.RB3 = 0;
  1634  07D7  1186               	bcf	6,3	;volatile
  1635  07D8  2D7F               	goto	l2761
  1636  07D9                     __end_of_main:	
  1637                           
  1638                           	psect	text1
  1639  0458                     __ptext1:	
  1640 ;; *************** function _toint *****************
  1641 ;; Defined at:
  1642 ;;		line 276 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  c               1    wreg     PTR unsigned char 
  1645 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1646 ;;		 -> canvasX(3), 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  c               1    8[BANK0 ] PTR unsigned char 
  1649 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1650 ;;		 -> canvasX(3), 
  1651 ;;  i               2    6[BANK0 ] int 
  1652 ;;  value           2    4[BANK0 ] int 
  1653 ;;  flag            2    2[BANK0 ] int 
  1654 ;;  r               2    0[BANK0 ] int 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2    8[COMMON] int 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1664 ;;      Params:         2       0       0       0       0
  1665 ;;      Locals:         0       9       0       0       0
  1666 ;;      Temps:          1       0       0       0       0
  1667 ;;      Totals:         3       9       0       0       0
  1668 ;;Total ram usage:       12 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		___wmul
  1673 ;;		_strlen
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _toint
  1681  0458                     _toint:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _toint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1685                           ;toint@c stored from wreg
  1686  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0459  1303               	bcf	3,6	;RP1=0, select bank0
  1688  045A  00D6               	movwf	toint@c
  1689                           
  1690                           ;main.c: 277: int i, value, r, flag;
  1691                           ;main.c: 279: flag = 1;
  1692  045B  3001               	movlw	1
  1693  045C  00D0               	movwf	toint@flag
  1694  045D  3000               	movlw	0
  1695  045E  00D1               	movwf	toint@flag+1
  1696                           
  1697                           ;main.c: 280: i = value = 0;
  1698  045F  01D2               	clrf	toint@value
  1699  0460  01D3               	clrf	toint@value+1
  1700  0461  01D4               	clrf	toint@i
  1701  0462  01D5               	clrf	toint@i+1
  1702                           
  1703                           ;main.c: 282: for( i = 0 ; i<strlen(c) ; ++i){
  1704  0463  01D4               	clrf	toint@i
  1705  0464  01D5               	clrf	toint@i+1
  1706  0465                     l2549:	
  1707  0465  0856               	movf	toint@c,w
  1708  0466  120A  118A  205E  120A  118A  	fcall	_strlen
  1709  046B  0871               	movf	?_strlen+1,w
  1710  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1711  046D  1303               	bcf	3,6	;RP1=0, select bank0
  1712  046E  0255               	subwf	toint@i+1,w
  1713  046F  1D03               	skipz
  1714  0470  2C73               	goto	u2565
  1715  0471  0870               	movf	?_strlen,w
  1716  0472  0254               	subwf	toint@i,w
  1717  0473                     u2565:	
  1718  0473  1803               	btfsc	3,0
  1719  0474  2CB3               	goto	l2551
  1720                           
  1721                           ;main.c: 285: if( i==0 && c[i]=='-' ){
  1722  0475  0854               	movf	toint@i,w
  1723  0476  0455               	iorwf	toint@i+1,w
  1724  0477  1D03               	btfss	3,2
  1725  0478  2C88               	goto	l2543
  1726  0479  0854               	movf	toint@i,w
  1727  047A  0756               	addwf	toint@c,w
  1728  047B  00FA               	movwf	??_toint
  1729  047C  087A               	movf	??_toint,w
  1730  047D  0084               	movwf	4
  1731  047E  302D               	movlw	45
  1732  047F  1383               	bcf	3,7	;select IRP bank0
  1733  0480  0600               	xorwf	0,w
  1734  0481  1D03               	btfss	3,2
  1735  0482  2C88               	goto	l2543
  1736                           
  1737                           ;main.c: 286: flag = -1;
  1738  0483  30FF               	movlw	255
  1739  0484  00D0               	movwf	toint@flag
  1740  0485  30FF               	movlw	255
  1741  0486  00D1               	movwf	toint@flag+1
  1742                           
  1743                           ;main.c: 287: continue;
  1744  0487  2CAC               	goto	l2547
  1745  0488                     l2543:	
  1746                           
  1747                           ;main.c: 288: }
  1748                           ;main.c: 290: r = c[i] - '0';
  1749  0488  0854               	movf	toint@i,w
  1750  0489  0756               	addwf	toint@c,w
  1751  048A  00FA               	movwf	??_toint
  1752  048B  087A               	movf	??_toint,w
  1753  048C  0084               	movwf	4
  1754  048D  1383               	bcf	3,7	;select IRP bank0
  1755  048E  0800               	movf	0,w
  1756  048F  3ED0               	addlw	208
  1757  0490  00CE               	movwf	toint@r
  1758  0491  30FF               	movlw	255
  1759  0492  1803               	skipnc
  1760  0493  3000               	movlw	0
  1761  0494  00CF               	movwf	toint@r+1
  1762                           
  1763                           ;main.c: 291: value = value * 10 + r;
  1764  0495  0853               	movf	toint@value+1,w
  1765  0496  00F1               	movwf	___wmul@multiplier+1
  1766  0497  0852               	movf	toint@value,w
  1767  0498  00F0               	movwf	___wmul@multiplier
  1768  0499  300A               	movlw	10
  1769  049A  00F2               	movwf	___wmul@multiplicand
  1770  049B  3000               	movlw	0
  1771  049C  00F3               	movwf	___wmul@multiplicand+1
  1772  049D  120A  158A  26F1  120A  118A  	fcall	___wmul
  1773  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  1774  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  1775  04A4  084E               	movf	toint@r,w
  1776  04A5  0770               	addwf	?___wmul,w
  1777  04A6  00D2               	movwf	toint@value
  1778  04A7  084F               	movf	toint@r+1,w
  1779  04A8  1803               	skipnc
  1780  04A9  0A4F               	incf	toint@r+1,w
  1781  04AA  0771               	addwf	?___wmul+1,w
  1782  04AB  00D3               	movwf	toint@value+1
  1783  04AC                     l2547:	
  1784  04AC  3001               	movlw	1
  1785  04AD  07D4               	addwf	toint@i,f
  1786  04AE  1803               	skipnc
  1787  04AF  0AD5               	incf	toint@i+1,f
  1788  04B0  3000               	movlw	0
  1789  04B1  07D5               	addwf	toint@i+1,f
  1790  04B2  2C65               	goto	l2549
  1791  04B3                     l2551:	
  1792                           
  1793                           ;main.c: 292: }
  1794                           ;main.c: 294: value = value * flag;
  1795  04B3  0853               	movf	toint@value+1,w
  1796  04B4  00F1               	movwf	___wmul@multiplier+1
  1797  04B5  0852               	movf	toint@value,w
  1798  04B6  00F0               	movwf	___wmul@multiplier
  1799  04B7  0851               	movf	toint@flag+1,w
  1800  04B8  00F3               	movwf	___wmul@multiplicand+1
  1801  04B9  0850               	movf	toint@flag,w
  1802  04BA  00F2               	movwf	___wmul@multiplicand
  1803  04BB  120A  158A  26F1   	fcall	___wmul
  1804  04BE  0871               	movf	?___wmul+1,w
  1805  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1806  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  1807  04C1  00D3               	movwf	toint@value+1
  1808  04C2  0870               	movf	?___wmul,w
  1809  04C3  00D2               	movwf	toint@value
  1810                           
  1811                           ;main.c: 296: return value;
  1812  04C4  0853               	movf	toint@value+1,w
  1813  04C5  00F9               	movwf	?_toint+1
  1814  04C6  0852               	movf	toint@value,w
  1815  04C7  00F8               	movwf	?_toint
  1816  04C8  0008               	return
  1817  04C9                     __end_of_toint:	
  1818                           
  1819                           	psect	text2
  1820  005E                     __ptext2:	
  1821 ;; *************** function _strlen *****************
  1822 ;; Defined at:
  1823 ;;		line 4 in file "/opt/microchip/xc8/v1.36/sources/common/strlen.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  s               1    wreg     PTR const unsigned char 
  1826 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1827 ;;		 -> canvasX(3), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  s               1    6[COMMON] PTR const unsigned char 
  1830 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1831 ;;		 -> canvasX(3), 
  1832 ;;  cp              1    7[COMMON] PTR const unsigned char 
  1833 ;;		 -> stepZ(7), stepY(7), stepX(7), canvasY(3), 
  1834 ;;		 -> canvasX(3), 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  2    0[COMMON] unsigned int 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1844 ;;      Params:         2       0       0       0       0
  1845 ;;      Locals:         2       0       0       0       0
  1846 ;;      Temps:          4       0       0       0       0
  1847 ;;      Totals:         8       0       0       0       0
  1848 ;;Total ram usage:        8 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_toint
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           
  1858                           ;psect for function _strlen
  1859  005E                     _strlen:	
  1860                           
  1861                           ;incstack = 0
  1862                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1863                           ;strlen@s stored from wreg
  1864  005E  00F6               	movwf	strlen@s
  1865  005F  0876               	movf	strlen@s,w
  1866  0060  00F2               	movwf	??_strlen
  1867  0061  0872               	movf	??_strlen,w
  1868  0062  00F7               	movwf	strlen@cp
  1869  0063                     l2195:	
  1870  0063  0877               	movf	strlen@cp,w
  1871  0064  0084               	movwf	4
  1872  0065  1383               	bcf	3,7	;select IRP bank0
  1873  0066  0800               	movf	0,w
  1874  0067  1903               	btfsc	3,2
  1875  0068  286E               	goto	l2197
  1876  0069  3001               	movlw	1
  1877  006A  00F2               	movwf	??_strlen
  1878  006B  0872               	movf	??_strlen,w
  1879  006C  07F7               	addwf	strlen@cp,f
  1880  006D  2863               	goto	l2195
  1881  006E                     l2197:	
  1882  006E  0876               	movf	strlen@s,w
  1883  006F  00F2               	movwf	??_strlen
  1884  0070  3000               	movlw	0
  1885  0071  00F3               	movwf	??_strlen+1
  1886  0072  09F2               	comf	??_strlen,f
  1887  0073  09F3               	comf	??_strlen+1,f
  1888  0074  0AF2               	incf	??_strlen,f
  1889  0075  1903               	skipnz
  1890  0076  0AF3               	incf	??_strlen+1,f
  1891  0077  0877               	movf	strlen@cp,w
  1892  0078  00F4               	movwf	??_strlen+2
  1893  0079  3000               	movlw	0
  1894  007A  00F5               	movwf	??_strlen+3
  1895  007B  0872               	movf	??_strlen,w
  1896  007C  0774               	addwf	??_strlen+2,w
  1897  007D  00F0               	movwf	?_strlen
  1898  007E  0873               	movf	??_strlen+1,w
  1899  007F  1803               	skipnc
  1900  0080  0A73               	incf	??_strlen+1,w
  1901  0081  0775               	addwf	??_strlen+3,w
  1902  0082  00F1               	movwf	?_strlen+1
  1903  0083  0008               	return
  1904  0084                     __end_of_strlen:	
  1905                           
  1906                           	psect	text3
  1907  0F78                     __ptext3:	
  1908 ;; *************** function _strcmp *****************
  1909 ;; Defined at:
  1910 ;;		line 33 in file "/opt/microchip/xc8/v1.36/sources/common/strcmp.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  s1              1    wreg     PTR const unsigned char 
  1913 ;;		 -> coords(9), 
  1914 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1915 ;;		 -> STR_3(4), STR_2(3), 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  s1              1    5[COMMON] PTR const unsigned char 
  1918 ;;		 -> coords(9), 
  1919 ;;  r               1    4[COMMON] char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2    0[COMMON] int 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         2       0       0       0       0
  1930 ;;      Locals:         2       0       0       0       0
  1931 ;;      Temps:          2       0       0       0       0
  1932 ;;      Totals:         6       0       0       0       0
  1933 ;;Total ram usage:        6 bytes
  1934 ;; Hardware stack levels used:    2
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           
  1943                           ;psect for function _strcmp
  1944  0F78                     _strcmp:	
  1945                           
  1946                           ;incstack = 0
  1947                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1948                           ;strcmp@s1 stored from wreg
  1949  0F78  00F5               	movwf	strcmp@s1
  1950  0F79  2F82               	goto	l2563
  1951  0F7A                     l2559:	
  1952  0F7A  3001               	movlw	1
  1953  0F7B  00F2               	movwf	??_strcmp
  1954  0F7C  0872               	movf	??_strcmp,w
  1955  0F7D  07F5               	addwf	strcmp@s1,f
  1956  0F7E  3001               	movlw	1
  1957  0F7F  00F2               	movwf	??_strcmp
  1958  0F80  0872               	movf	??_strcmp,w
  1959  0F81  07F0               	addwf	strcmp@s2,f
  1960  0F82                     l2563:	
  1961  0F82  0875               	movf	strcmp@s1,w
  1962  0F83  0084               	movwf	4
  1963  0F84  1383               	bcf	3,7	;select IRP bank0
  1964  0F85  0800               	movf	0,w
  1965  0F86  00F2               	movwf	??_strcmp
  1966  0F87  0870               	movf	strcmp@s2,w
  1967  0F88  0084               	movwf	4
  1968  0F89  120A  118A  200D  120A  158A  	fcall	stringdir
  1969  0F8E  3AFF               	xorlw	255
  1970  0F8F  3E01               	addlw	1
  1971  0F90  0772               	addwf	??_strcmp,w
  1972  0F91  00F3               	movwf	??_strcmp+1
  1973  0F92  0873               	movf	??_strcmp+1,w
  1974  0F93  00F4               	movwf	strcmp@r
  1975  0F94  0874               	movf	strcmp@r,w
  1976  0F95  1D03               	btfss	3,2
  1977  0F96  2F9C               	goto	l2567
  1978  0F97  0875               	movf	strcmp@s1,w
  1979  0F98  0084               	movwf	4
  1980  0F99  0800               	movf	0,w
  1981  0F9A  1D03               	btfss	3,2
  1982  0F9B  2F7A               	goto	l2559
  1983  0F9C                     l2567:	
  1984  0F9C  0874               	movf	strcmp@r,w
  1985  0F9D  00F0               	movwf	?_strcmp
  1986  0F9E  01F1               	clrf	?_strcmp+1
  1987  0F9F  1BF0               	btfsc	?_strcmp,7
  1988  0FA0  03F1               	decf	?_strcmp+1,f
  1989  0FA1  0008               	return
  1990  0FA2                     __end_of_strcmp:	
  1991                           
  1992                           	psect	text4
  1993  00F0                     __ptext4:	
  1994 ;; *************** function _stepMotorZ *****************
  1995 ;; Defined at:
  1996 ;;		line 202 in file "stepMotor.h"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  dir             1    wreg     unsigned char 
  1999 ;;  speed           1    4[COMMON] unsigned char 
  2000 ;;  mod             2    5[COMMON] int 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  dir             1    7[COMMON] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, pclath, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         3       0       0       0       0
  2013 ;;      Locals:         1       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0
  2015 ;;      Totals:         4       0       0       0       0
  2016 ;;Total ram usage:        4 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    1
  2019 ;; This function calls:
  2020 ;;		_modM3
  2021 ;;		_ms_delay
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;;		_motorZInit
  2025 ;;		_reset
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _stepMotorZ
  2031  00F0                     _stepMotorZ:	
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _stepMotorZ: [wreg+status,2+status,0+pclath+cstack]
  2035                           ;stepMotorZ@dir stored from wreg
  2036  00F0  00F7               	movwf	stepMotorZ@dir
  2037                           
  2038                           ;stepMotor.h: 203: modM3(mod);
  2039  00F1  0876               	movf	stepMotorZ@mod+1,w
  2040  00F2  00F1               	movwf	modM3@m+1
  2041  00F3  0875               	movf	stepMotorZ@mod,w
  2042  00F4  00F0               	movwf	modM3@m
  2043  00F5  120A  118A  2209  120A  118A  	fcall	_modM3
  2044                           
  2045                           ;stepMotor.h: 205: if (dir == 1) {
  2046  00FA  0377               	decf	stepMotorZ@dir,w
  2047  00FB  1D03               	btfss	3,2
  2048  00FC  2910               	goto	l2315
  2049                           
  2050                           ;stepMotor.h: 207: PORTCbits.RC2 = 1;
  2051  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  2052  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  2053  00FF  1507               	bsf	7,2	;volatile
  2054                           
  2055                           ;stepMotor.h: 208: PORTCbits.RC1 = 1;
  2056  0100  1487               	bsf	7,1	;volatile
  2057                           
  2058                           ;stepMotor.h: 209: ms_delay(speed);
  2059  0101  0874               	movf	stepMotorZ@speed,w
  2060  0102  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2061                           
  2062                           ;stepMotor.h: 211: PORTCbits.RC2= 0;
  2063  0107  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0108  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0109  1107               	bcf	7,2	;volatile
  2066                           
  2067                           ;stepMotor.h: 212: PORTCbits.RC1 = 1;
  2068  010A  1487               	bsf	7,1	;volatile
  2069                           
  2070                           ;stepMotor.h: 213: ms_delay(speed);
  2071  010B  0874               	movf	stepMotorZ@speed,w
  2072  010C  120A  158A  26C8   	fcall	_ms_delay
  2073                           
  2074                           ;stepMotor.h: 214: }
  2075  010F  0008               	return
  2076  0110                     l2315:	
  2077                           
  2078                           ;stepMotor.h: 215: else if(dir == 0){
  2079  0110  0877               	movf	stepMotorZ@dir,w
  2080  0111  1D03               	btfss	3,2
  2081  0112  0008               	return
  2082                           
  2083                           ;stepMotor.h: 217: PORTCbits.RC2 = 1;
  2084  0113  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0114  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0115  1507               	bsf	7,2	;volatile
  2087                           
  2088                           ;stepMotor.h: 218: PORTCbits.RC1 = 0;
  2089  0116  1087               	bcf	7,1	;volatile
  2090                           
  2091                           ;stepMotor.h: 219: ms_delay(speed);
  2092  0117  0874               	movf	stepMotorZ@speed,w
  2093  0118  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2094                           
  2095                           ;stepMotor.h: 221: PORTCbits.RC2 = 0;
  2096  011D  1283               	bcf	3,5	;RP0=0, select bank0
  2097  011E  1303               	bcf	3,6	;RP1=0, select bank0
  2098  011F  1107               	bcf	7,2	;volatile
  2099                           
  2100                           ;stepMotor.h: 222: PORTCbits.RC1 = 0;
  2101  0120  1087               	bcf	7,1	;volatile
  2102                           
  2103                           ;stepMotor.h: 223: ms_delay(speed);
  2104  0121  0874               	movf	stepMotorZ@speed,w
  2105  0122  120A  158A  26C8   	fcall	_ms_delay
  2106  0125  0008               	return
  2107  0126                     __end_of_stepMotorZ:	
  2108                           
  2109                           	psect	text5
  2110  0209                     __ptext5:	
  2111 ;; *************** function _modM3 *****************
  2112 ;; Defined at:
  2113 ;;		line 95 in file "motor_mode.h"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  m               2    0[COMMON] int 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         2       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0
  2130 ;;      Totals:         2       0       0       0       0
  2131 ;;Total ram usage:        2 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_stepMotorZ
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           
  2141                           ;psect for function _modM3
  2142  0209                     _modM3:	
  2143                           
  2144                           ;motor_mode.h: 97: if(m == 1){
  2145                           
  2146                           ;incstack = 0
  2147                           ; Regs used in _modM3: [wreg+status,2+status,0]
  2148  0209  0370               	decf	modM3@m,w
  2149  020A  0471               	iorwf	modM3@m+1,w
  2150  020B  1D03               	btfss	3,2
  2151  020C  2A12               	goto	l2125
  2152                           
  2153                           ;motor_mode.h: 98: PORTDbits.RD1 = 0;
  2154  020D  1283               	bcf	3,5	;RP0=0, select bank0
  2155  020E  1303               	bcf	3,6	;RP1=0, select bank0
  2156  020F  1088               	bcf	8,1	;volatile
  2157                           
  2158                           ;motor_mode.h: 99: PORTDbits.RD0 = 0;
  2159  0210  1008               	bcf	8,0	;volatile
  2160                           
  2161                           ;motor_mode.h: 100: PORTCbits.RC3 = 0;
  2162  0211  1187               	bcf	7,3	;volatile
  2163  0212                     l2125:	
  2164                           
  2165                           ;motor_mode.h: 101: }
  2166                           ;motor_mode.h: 103: if(m == 2){
  2167  0212  3002               	movlw	2
  2168  0213  0670               	xorwf	modM3@m,w
  2169  0214  0471               	iorwf	modM3@m+1,w
  2170  0215  1D03               	btfss	3,2
  2171  0216  2A1C               	goto	l2129
  2172                           
  2173                           ;motor_mode.h: 104: PORTDbits.RD1 = 1;
  2174  0217  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0218  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0219  1488               	bsf	8,1	;volatile
  2177                           
  2178                           ;motor_mode.h: 105: PORTDbits.RD0 = 0;
  2179  021A  1008               	bcf	8,0	;volatile
  2180                           
  2181                           ;motor_mode.h: 106: PORTCbits.RC3 = 0;
  2182  021B  1187               	bcf	7,3	;volatile
  2183  021C                     l2129:	
  2184                           
  2185                           ;motor_mode.h: 107: }
  2186                           ;motor_mode.h: 108: if(m == 3){
  2187  021C  3003               	movlw	3
  2188  021D  0670               	xorwf	modM3@m,w
  2189  021E  0471               	iorwf	modM3@m+1,w
  2190  021F  1D03               	btfss	3,2
  2191  0220  2A26               	goto	l2133
  2192                           
  2193                           ;motor_mode.h: 109: PORTDbits.RD1 = 0;
  2194  0221  1283               	bcf	3,5	;RP0=0, select bank0
  2195  0222  1303               	bcf	3,6	;RP1=0, select bank0
  2196  0223  1088               	bcf	8,1	;volatile
  2197                           
  2198                           ;motor_mode.h: 110: PORTDbits.RD0 = 1;
  2199  0224  1408               	bsf	8,0	;volatile
  2200                           
  2201                           ;motor_mode.h: 111: PORTCbits.RC3 = 0;
  2202  0225  1187               	bcf	7,3	;volatile
  2203  0226                     l2133:	
  2204                           
  2205                           ;motor_mode.h: 112: }
  2206                           ;motor_mode.h: 113: if(m == 4){
  2207  0226  3004               	movlw	4
  2208  0227  0670               	xorwf	modM3@m,w
  2209  0228  0471               	iorwf	modM3@m+1,w
  2210  0229  1D03               	btfss	3,2
  2211  022A  2A30               	goto	l2137
  2212                           
  2213                           ;motor_mode.h: 114: PORTDbits.RD1 = 1;
  2214  022B  1283               	bcf	3,5	;RP0=0, select bank0
  2215  022C  1303               	bcf	3,6	;RP1=0, select bank0
  2216  022D  1488               	bsf	8,1	;volatile
  2217                           
  2218                           ;motor_mode.h: 115: PORTDbits.RD0 = 1;
  2219  022E  1408               	bsf	8,0	;volatile
  2220                           
  2221                           ;motor_mode.h: 116: PORTCbits.RC3 = 0;
  2222  022F  1187               	bcf	7,3	;volatile
  2223  0230                     l2137:	
  2224                           
  2225                           ;motor_mode.h: 117: }
  2226                           ;motor_mode.h: 118: if(m == 5){
  2227  0230  3005               	movlw	5
  2228  0231  0670               	xorwf	modM3@m,w
  2229  0232  0471               	iorwf	modM3@m+1,w
  2230  0233  1D03               	btfss	3,2
  2231  0234  2A3A               	goto	l2141
  2232                           
  2233                           ;motor_mode.h: 119: PORTDbits.RD1 = 0;
  2234  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2235  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2236  0237  1088               	bcf	8,1	;volatile
  2237                           
  2238                           ;motor_mode.h: 120: PORTDbits.RD0 = 0;
  2239  0238  1008               	bcf	8,0	;volatile
  2240                           
  2241                           ;motor_mode.h: 121: PORTCbits.RC3 = 1;
  2242  0239  1587               	bsf	7,3	;volatile
  2243  023A                     l2141:	
  2244                           
  2245                           ;motor_mode.h: 122: }
  2246                           ;motor_mode.h: 123: if(m == 6){
  2247  023A  3006               	movlw	6
  2248  023B  0670               	xorwf	modM3@m,w
  2249  023C  0471               	iorwf	modM3@m+1,w
  2250  023D  1D03               	btfss	3,2
  2251  023E  2A44               	goto	l2145
  2252                           
  2253                           ;motor_mode.h: 124: PORTDbits.RD1 = 1;
  2254  023F  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0240  1303               	bcf	3,6	;RP1=0, select bank0
  2256  0241  1488               	bsf	8,1	;volatile
  2257                           
  2258                           ;motor_mode.h: 125: PORTDbits.RD0 = 0;
  2259  0242  1008               	bcf	8,0	;volatile
  2260                           
  2261                           ;motor_mode.h: 126: PORTCbits.RC3 = 1;
  2262  0243  1587               	bsf	7,3	;volatile
  2263  0244                     l2145:	
  2264                           
  2265                           ;motor_mode.h: 127: }
  2266                           ;motor_mode.h: 128: if(m == 7){
  2267  0244  3007               	movlw	7
  2268  0245  0670               	xorwf	modM3@m,w
  2269  0246  0471               	iorwf	modM3@m+1,w
  2270  0247  1D03               	btfss	3,2
  2271  0248  2A4E               	goto	l2149
  2272                           
  2273                           ;motor_mode.h: 129: PORTDbits.RD1 = 0;
  2274  0249  1283               	bcf	3,5	;RP0=0, select bank0
  2275  024A  1303               	bcf	3,6	;RP1=0, select bank0
  2276  024B  1088               	bcf	8,1	;volatile
  2277                           
  2278                           ;motor_mode.h: 130: PORTDbits.RD0 = 1;
  2279  024C  1408               	bsf	8,0	;volatile
  2280                           
  2281                           ;motor_mode.h: 131: PORTCbits.RC3 = 1;
  2282  024D  1587               	bsf	7,3	;volatile
  2283  024E                     l2149:	
  2284                           
  2285                           ;motor_mode.h: 132: }
  2286                           ;motor_mode.h: 133: if(m == 8){
  2287  024E  3008               	movlw	8
  2288  024F  0670               	xorwf	modM3@m,w
  2289  0250  0471               	iorwf	modM3@m+1,w
  2290  0251  1D03               	btfss	3,2
  2291  0252  0008               	return
  2292                           
  2293                           ;motor_mode.h: 134: PORTDbits.RD1 = 1;
  2294  0253  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0254  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0255  1488               	bsf	8,1	;volatile
  2297                           
  2298                           ;motor_mode.h: 135: PORTDbits.RD0 = 1;
  2299  0256  1408               	bsf	8,0	;volatile
  2300                           
  2301                           ;motor_mode.h: 136: PORTCbits.RC3 = 1;
  2302  0257  1587               	bsf	7,3	;volatile
  2303  0258  0008               	return
  2304  0259                     __end_of_modM3:	
  2305                           
  2306                           	psect	text6
  2307  00BA                     __ptext6:	
  2308 ;; *************** function _stepMotorY *****************
  2309 ;; Defined at:
  2310 ;;		line 181 in file "stepMotor.h"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  dir             1    wreg     unsigned char 
  2313 ;;  speed           1    4[COMMON] unsigned char 
  2314 ;;  mod             2    5[COMMON] int 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  dir             1    7[COMMON] unsigned char 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0, pclath, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2326 ;;      Params:         3       0       0       0       0
  2327 ;;      Locals:         1       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0
  2329 ;;      Totals:         4       0       0       0       0
  2330 ;;Total ram usage:        4 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    1
  2333 ;; This function calls:
  2334 ;;		_modM2
  2335 ;;		_ms_delay
  2336 ;; This function is called by:
  2337 ;;		_main
  2338 ;;		_motorYInit
  2339 ;;		_reset
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           
  2344                           ;psect for function _stepMotorY
  2345  00BA                     _stepMotorY:	
  2346                           
  2347                           ;incstack = 0
  2348                           ; Regs used in _stepMotorY: [wreg+status,2+status,0+pclath+cstack]
  2349                           ;stepMotorY@dir stored from wreg
  2350  00BA  00F7               	movwf	stepMotorY@dir
  2351                           
  2352                           ;stepMotor.h: 182: modM2(mod);
  2353  00BB  0876               	movf	stepMotorY@mod+1,w
  2354  00BC  00F1               	movwf	modM2@m+1
  2355  00BD  0875               	movf	stepMotorY@mod,w
  2356  00BE  00F0               	movwf	modM2@m
  2357  00BF  120A  118A  21B9  120A  118A  	fcall	_modM2
  2358                           
  2359                           ;stepMotor.h: 184: if (dir == 1) {
  2360  00C4  0377               	decf	stepMotorY@dir,w
  2361  00C5  1D03               	btfss	3,2
  2362  00C6  28DA               	goto	l2293
  2363                           
  2364                           ;stepMotor.h: 185: PORTEbits.RE0 = 1;
  2365  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  2366  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  2367  00C9  1409               	bsf	9,0	;volatile
  2368                           
  2369                           ;stepMotor.h: 186: PORTAbits.RA5 = 1;
  2370  00CA  1685               	bsf	5,5	;volatile
  2371                           
  2372                           ;stepMotor.h: 187: ms_delay(speed);
  2373  00CB  0874               	movf	stepMotorY@speed,w
  2374  00CC  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2375                           
  2376                           ;stepMotor.h: 188: PORTEbits.RE0 = 0;
  2377  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  2378  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  2379  00D3  1009               	bcf	9,0	;volatile
  2380                           
  2381                           ;stepMotor.h: 189: PORTAbits.RA5= 1;
  2382  00D4  1685               	bsf	5,5	;volatile
  2383                           
  2384                           ;stepMotor.h: 190: ms_delay(speed);
  2385  00D5  0874               	movf	stepMotorY@speed,w
  2386  00D6  120A  158A  26C8   	fcall	_ms_delay
  2387                           
  2388                           ;stepMotor.h: 191: }
  2389  00D9  0008               	return
  2390  00DA                     l2293:	
  2391                           
  2392                           ;stepMotor.h: 192: else if(dir == 0){
  2393  00DA  0877               	movf	stepMotorY@dir,w
  2394  00DB  1D03               	btfss	3,2
  2395  00DC  0008               	return
  2396                           
  2397                           ;stepMotor.h: 193: PORTEbits.RE0 = 1;
  2398  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  2399  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  2400  00DF  1409               	bsf	9,0	;volatile
  2401                           
  2402                           ;stepMotor.h: 194: PORTAbits.RA5 = 0;
  2403  00E0  1285               	bcf	5,5	;volatile
  2404                           
  2405                           ;stepMotor.h: 195: ms_delay(speed);
  2406  00E1  0874               	movf	stepMotorY@speed,w
  2407  00E2  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2408                           
  2409                           ;stepMotor.h: 196: PORTEbits.RE0 = 0;
  2410  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  2411  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  2412  00E9  1009               	bcf	9,0	;volatile
  2413                           
  2414                           ;stepMotor.h: 197: PORTAbits.RA5 = 0;
  2415  00EA  1285               	bcf	5,5	;volatile
  2416                           
  2417                           ;stepMotor.h: 198: ms_delay(speed);
  2418  00EB  0874               	movf	stepMotorY@speed,w
  2419  00EC  120A  158A  26C8   	fcall	_ms_delay
  2420  00EF  0008               	return
  2421  00F0                     __end_of_stepMotorY:	
  2422                           
  2423                           	psect	text7
  2424  01B9                     __ptext7:	
  2425 ;; *************** function _modM2 *****************
  2426 ;; Defined at:
  2427 ;;		line 47 in file "motor_mode.h"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  m               2    0[COMMON] int 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2441 ;;      Params:         2       0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0
  2444 ;;      Totals:         2       0       0       0       0
  2445 ;;Total ram usage:        2 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		_stepMotorY
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           
  2455                           ;psect for function _modM2
  2456  01B9                     _modM2:	
  2457                           
  2458                           ;motor_mode.h: 49: if(m == 1){
  2459                           
  2460                           ;incstack = 0
  2461                           ; Regs used in _modM2: [wreg+status,2+status,0]
  2462  01B9  0370               	decf	modM2@m,w
  2463  01BA  0471               	iorwf	modM2@m+1,w
  2464  01BB  1D03               	btfss	3,2
  2465  01BC  29C2               	goto	l2093
  2466                           
  2467                           ;motor_mode.h: 50: PORTCbits.RC0 = 0;
  2468  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  2469  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  2470  01BF  1007               	bcf	7,0	;volatile
  2471                           
  2472                           ;motor_mode.h: 51: PORTEbits.RE2 = 0;
  2473  01C0  1109               	bcf	9,2	;volatile
  2474                           
  2475                           ;motor_mode.h: 52: PORTEbits.RE1 = 0;
  2476  01C1  1089               	bcf	9,1	;volatile
  2477  01C2                     l2093:	
  2478                           
  2479                           ;motor_mode.h: 53: }
  2480                           ;motor_mode.h: 55: if(m == 2){
  2481  01C2  3002               	movlw	2
  2482  01C3  0670               	xorwf	modM2@m,w
  2483  01C4  0471               	iorwf	modM2@m+1,w
  2484  01C5  1D03               	btfss	3,2
  2485  01C6  29CC               	goto	l2097
  2486                           
  2487                           ;motor_mode.h: 56: PORTCbits.RC0 = 1;
  2488  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2489  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2490  01C9  1407               	bsf	7,0	;volatile
  2491                           
  2492                           ;motor_mode.h: 57: PORTEbits.RE2 = 0;
  2493  01CA  1109               	bcf	9,2	;volatile
  2494                           
  2495                           ;motor_mode.h: 58: PORTEbits.RE1 = 0;
  2496  01CB  1089               	bcf	9,1	;volatile
  2497  01CC                     l2097:	
  2498                           
  2499                           ;motor_mode.h: 59: }
  2500                           ;motor_mode.h: 60: if(m == 3){
  2501  01CC  3003               	movlw	3
  2502  01CD  0670               	xorwf	modM2@m,w
  2503  01CE  0471               	iorwf	modM2@m+1,w
  2504  01CF  1D03               	btfss	3,2
  2505  01D0  29D6               	goto	l2101
  2506                           
  2507                           ;motor_mode.h: 61: PORTCbits.RC0 = 0;
  2508  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2509  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  2510  01D3  1007               	bcf	7,0	;volatile
  2511                           
  2512                           ;motor_mode.h: 62: PORTEbits.RE2 = 1;
  2513  01D4  1509               	bsf	9,2	;volatile
  2514                           
  2515                           ;motor_mode.h: 63: PORTEbits.RE1 = 0;
  2516  01D5  1089               	bcf	9,1	;volatile
  2517  01D6                     l2101:	
  2518                           
  2519                           ;motor_mode.h: 64: }
  2520                           ;motor_mode.h: 65: if(m == 4){
  2521  01D6  3004               	movlw	4
  2522  01D7  0670               	xorwf	modM2@m,w
  2523  01D8  0471               	iorwf	modM2@m+1,w
  2524  01D9  1D03               	btfss	3,2
  2525  01DA  29E0               	goto	l2105
  2526                           
  2527                           ;motor_mode.h: 66: PORTCbits.RC0 = 1;
  2528  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  2529  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  2530  01DD  1407               	bsf	7,0	;volatile
  2531                           
  2532                           ;motor_mode.h: 67: PORTEbits.RE2 = 1;
  2533  01DE  1509               	bsf	9,2	;volatile
  2534                           
  2535                           ;motor_mode.h: 68: PORTEbits.RE1 = 0;
  2536  01DF  1089               	bcf	9,1	;volatile
  2537  01E0                     l2105:	
  2538                           
  2539                           ;motor_mode.h: 69: }
  2540                           ;motor_mode.h: 70: if(m == 5){
  2541  01E0  3005               	movlw	5
  2542  01E1  0670               	xorwf	modM2@m,w
  2543  01E2  0471               	iorwf	modM2@m+1,w
  2544  01E3  1D03               	btfss	3,2
  2545  01E4  29EA               	goto	l2109
  2546                           
  2547                           ;motor_mode.h: 71: PORTCbits.RC0 = 0;
  2548  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2549  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2550  01E7  1007               	bcf	7,0	;volatile
  2551                           
  2552                           ;motor_mode.h: 72: PORTEbits.RE2 = 0;
  2553  01E8  1109               	bcf	9,2	;volatile
  2554                           
  2555                           ;motor_mode.h: 73: PORTEbits.RE1 = 1;
  2556  01E9  1489               	bsf	9,1	;volatile
  2557  01EA                     l2109:	
  2558                           
  2559                           ;motor_mode.h: 74: }
  2560                           ;motor_mode.h: 75: if(m == 6){
  2561  01EA  3006               	movlw	6
  2562  01EB  0670               	xorwf	modM2@m,w
  2563  01EC  0471               	iorwf	modM2@m+1,w
  2564  01ED  1D03               	btfss	3,2
  2565  01EE  29F4               	goto	l2113
  2566                           
  2567                           ;motor_mode.h: 76: PORTCbits.RC0 = 1;
  2568  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2569  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  2570  01F1  1407               	bsf	7,0	;volatile
  2571                           
  2572                           ;motor_mode.h: 77: PORTEbits.RE2 = 0;
  2573  01F2  1109               	bcf	9,2	;volatile
  2574                           
  2575                           ;motor_mode.h: 78: PORTEbits.RE1 = 1;
  2576  01F3  1489               	bsf	9,1	;volatile
  2577  01F4                     l2113:	
  2578                           
  2579                           ;motor_mode.h: 79: }
  2580                           ;motor_mode.h: 80: if(m == 7){
  2581  01F4  3007               	movlw	7
  2582  01F5  0670               	xorwf	modM2@m,w
  2583  01F6  0471               	iorwf	modM2@m+1,w
  2584  01F7  1D03               	btfss	3,2
  2585  01F8  29FE               	goto	l2117
  2586                           
  2587                           ;motor_mode.h: 81: PORTCbits.RC0 = 0;
  2588  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2589  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2590  01FB  1007               	bcf	7,0	;volatile
  2591                           
  2592                           ;motor_mode.h: 82: PORTEbits.RE2 = 1;
  2593  01FC  1509               	bsf	9,2	;volatile
  2594                           
  2595                           ;motor_mode.h: 83: PORTEbits.RE1 = 1;
  2596  01FD  1489               	bsf	9,1	;volatile
  2597  01FE                     l2117:	
  2598                           
  2599                           ;motor_mode.h: 84: }
  2600                           ;motor_mode.h: 85: if(m == 8){
  2601  01FE  3008               	movlw	8
  2602  01FF  0670               	xorwf	modM2@m,w
  2603  0200  0471               	iorwf	modM2@m+1,w
  2604  0201  1D03               	btfss	3,2
  2605  0202  0008               	return
  2606                           
  2607                           ;motor_mode.h: 86: PORTCbits.RC0 = 1;
  2608  0203  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0204  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0205  1407               	bsf	7,0	;volatile
  2611                           
  2612                           ;motor_mode.h: 87: PORTEbits.RE2 = 1;
  2613  0206  1509               	bsf	9,2	;volatile
  2614                           
  2615                           ;motor_mode.h: 88: PORTEbits.RE1 = 1;
  2616  0207  1489               	bsf	9,1	;volatile
  2617  0208  0008               	return
  2618  0209                     __end_of_modM2:	
  2619                           
  2620                           	psect	text8
  2621  0084                     __ptext8:	
  2622 ;; *************** function _stepMotorX *****************
  2623 ;; Defined at:
  2624 ;;		line 159 in file "stepMotor.h"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  dir             1    wreg     unsigned char 
  2627 ;;  speed           1    4[COMMON] unsigned char 
  2628 ;;  mod             2    5[COMMON] int 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  dir             1    7[COMMON] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, status,2, status,0, pclath, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2640 ;;      Params:         3       0       0       0       0
  2641 ;;      Locals:         1       0       0       0       0
  2642 ;;      Temps:          0       0       0       0       0
  2643 ;;      Totals:         4       0       0       0       0
  2644 ;;Total ram usage:        4 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    1
  2647 ;; This function calls:
  2648 ;;		_modM1
  2649 ;;		_ms_delay
  2650 ;; This function is called by:
  2651 ;;		_main
  2652 ;;		_motorXInit
  2653 ;;		_reset
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _stepMotorX
  2659  0084                     _stepMotorX:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _stepMotorX: [wreg+status,2+status,0+pclath+cstack]
  2663                           ;stepMotorX@dir stored from wreg
  2664  0084  00F7               	movwf	stepMotorX@dir
  2665                           
  2666                           ;stepMotor.h: 160: modM1(mod);
  2667  0085  0876               	movf	stepMotorX@mod+1,w
  2668  0086  00F1               	movwf	modM1@m+1
  2669  0087  0875               	movf	stepMotorX@mod,w
  2670  0088  00F0               	movwf	modM1@m
  2671  0089  120A  118A  2169  120A  118A  	fcall	_modM1
  2672                           
  2673                           ;stepMotor.h: 162: if (dir == 1) {
  2674  008E  0377               	decf	stepMotorX@dir,w
  2675  008F  1D03               	btfss	3,2
  2676  0090  28A4               	goto	l2271
  2677                           
  2678                           ;stepMotor.h: 163: PORTAbits.RA1 = 1;
  2679  0091  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0092  1303               	bcf	3,6	;RP1=0, select bank0
  2681  0093  1485               	bsf	5,1	;volatile
  2682                           
  2683                           ;stepMotor.h: 164: PORTAbits.RA0 = 1;
  2684  0094  1405               	bsf	5,0	;volatile
  2685                           
  2686                           ;stepMotor.h: 165: ms_delay(speed);
  2687  0095  0874               	movf	stepMotorX@speed,w
  2688  0096  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2689                           
  2690                           ;stepMotor.h: 166: PORTAbits.RA1 = 0;
  2691  009B  1283               	bcf	3,5	;RP0=0, select bank0
  2692  009C  1303               	bcf	3,6	;RP1=0, select bank0
  2693  009D  1085               	bcf	5,1	;volatile
  2694                           
  2695                           ;stepMotor.h: 167: PORTAbits.RA0 = 1;
  2696  009E  1405               	bsf	5,0	;volatile
  2697                           
  2698                           ;stepMotor.h: 168: ms_delay(speed);
  2699  009F  0874               	movf	stepMotorX@speed,w
  2700  00A0  120A  158A  26C8   	fcall	_ms_delay
  2701                           
  2702                           ;stepMotor.h: 169: }
  2703  00A3  0008               	return
  2704  00A4                     l2271:	
  2705                           
  2706                           ;stepMotor.h: 170: else if(dir == 0){
  2707  00A4  0877               	movf	stepMotorX@dir,w
  2708  00A5  1D03               	btfss	3,2
  2709  00A6  0008               	return
  2710                           
  2711                           ;stepMotor.h: 171: PORTAbits.RA1 = 1;
  2712  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2713  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  2714  00A9  1485               	bsf	5,1	;volatile
  2715                           
  2716                           ;stepMotor.h: 172: PORTAbits.RA0 = 0;
  2717  00AA  1005               	bcf	5,0	;volatile
  2718                           
  2719                           ;stepMotor.h: 173: ms_delay(speed);
  2720  00AB  0874               	movf	stepMotorX@speed,w
  2721  00AC  120A  158A  26C8  120A  118A  	fcall	_ms_delay
  2722                           
  2723                           ;stepMotor.h: 174: PORTAbits.RA1 = 0;
  2724  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2725  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  2726  00B3  1085               	bcf	5,1	;volatile
  2727                           
  2728                           ;stepMotor.h: 175: PORTAbits.RA0 = 0;
  2729  00B4  1005               	bcf	5,0	;volatile
  2730                           
  2731                           ;stepMotor.h: 176: ms_delay(speed);
  2732  00B5  0874               	movf	stepMotorX@speed,w
  2733  00B6  120A  158A  26C8   	fcall	_ms_delay
  2734  00B9  0008               	return
  2735  00BA                     __end_of_stepMotorX:	
  2736                           
  2737                           	psect	text9
  2738  0EC8                     __ptext9:	
  2739 ;; *************** function _ms_delay *****************
  2740 ;; Defined at:
  2741 ;;		line 67 in file "stepMotor.h"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  val             1    wreg     unsigned char 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  val             1    2[COMMON] unsigned char 
  2746 ;;  i               1    3[COMMON] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2756 ;;      Params:         0       0       0       0       0
  2757 ;;      Locals:         2       0       0       0       0
  2758 ;;      Temps:          2       0       0       0       0
  2759 ;;      Totals:         4       0       0       0       0
  2760 ;;Total ram usage:        4 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_stepMotorX
  2766 ;;		_stepMotorY
  2767 ;;		_stepMotorZ
  2768 ;;		_full_drive
  2769 ;;		_half_drive
  2770 ;;		_microstep8
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _ms_delay
  2776  0EC8                     _ms_delay:	
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _ms_delay: [wreg+status,2+status,0]
  2780                           ;ms_delay@val stored from wreg
  2781  0EC8  00F2               	movwf	ms_delay@val
  2782                           
  2783                           ;stepMotor.h: 68: unsigned char i;
  2784                           ;stepMotor.h: 69: for (i = 0; i < val; i++)
  2785  0EC9  01F3               	clrf	ms_delay@i
  2786  0ECA                     l2159:	
  2787  0ECA  0872               	movf	ms_delay@val,w
  2788  0ECB  0273               	subwf	ms_delay@i,w
  2789  0ECC  1803               	btfsc	3,0
  2790  0ECD  0008               	return
  2791                           
  2792                           ;stepMotor.h: 70: _delay((unsigned long)((1)*(8000000/4000.0)));
  2793  0ECE  3003               	movlw	3
  2794  0ECF  00F1               	movwf	??_ms_delay+1
  2795  0ED0  3097               	movlw	151
  2796  0ED1  00F0               	movwf	??_ms_delay
  2797  0ED2                     u3407:	
  2798  0ED2  0BF0               	decfsz	??_ms_delay,f
  2799  0ED3  2ED2               	goto	u3407
  2800  0ED4  0BF1               	decfsz	??_ms_delay+1,f
  2801  0ED5  2ED2               	goto	u3407
  2802  0ED6  2ED7               	nop2
  2803  0ED7  3001               	movlw	1
  2804  0ED8  00F0               	movwf	??_ms_delay
  2805  0ED9  0870               	movf	??_ms_delay,w
  2806  0EDA  07F3               	addwf	ms_delay@i,f
  2807  0EDB  2ECA               	goto	l2159
  2808  0EDC                     __end_of_ms_delay:	
  2809                           
  2810                           	psect	text10
  2811  0169                     __ptext10:	
  2812 ;; *************** function _modM1 *****************
  2813 ;; Defined at:
  2814 ;;		line 1 in file "motor_mode.h"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;  m               2    0[COMMON] int 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2828 ;;      Params:         2       0       0       0       0
  2829 ;;      Locals:         0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0
  2831 ;;      Totals:         2       0       0       0       0
  2832 ;;Total ram usage:        2 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_stepMotorX
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _modM1
  2843  0169                     _modM1:	
  2844                           
  2845                           ;motor_mode.h: 3: if(m == 1){
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _modM1: [wreg+status,2+status,0]
  2849  0169  0370               	decf	modM1@m,w
  2850  016A  0471               	iorwf	modM1@m+1,w
  2851  016B  1D03               	btfss	3,2
  2852  016C  2972               	goto	l2061
  2853                           
  2854                           ;motor_mode.h: 4: PORTAbits.RA4 = 0;
  2855  016D  1283               	bcf	3,5	;RP0=0, select bank0
  2856  016E  1303               	bcf	3,6	;RP1=0, select bank0
  2857  016F  1205               	bcf	5,4	;volatile
  2858                           
  2859                           ;motor_mode.h: 5: PORTAbits.RA3 = 0;
  2860  0170  1185               	bcf	5,3	;volatile
  2861                           
  2862                           ;motor_mode.h: 6: PORTAbits.RA2 = 0;
  2863  0171  1105               	bcf	5,2	;volatile
  2864  0172                     l2061:	
  2865                           
  2866                           ;motor_mode.h: 7: }
  2867                           ;motor_mode.h: 9: if(m == 2){
  2868  0172  3002               	movlw	2
  2869  0173  0670               	xorwf	modM1@m,w
  2870  0174  0471               	iorwf	modM1@m+1,w
  2871  0175  1D03               	btfss	3,2
  2872  0176  297C               	goto	l2065
  2873                           
  2874                           ;motor_mode.h: 10: PORTAbits.RA4 = 1;
  2875  0177  1283               	bcf	3,5	;RP0=0, select bank0
  2876  0178  1303               	bcf	3,6	;RP1=0, select bank0
  2877  0179  1605               	bsf	5,4	;volatile
  2878                           
  2879                           ;motor_mode.h: 11: PORTAbits.RA3 = 0;
  2880  017A  1185               	bcf	5,3	;volatile
  2881                           
  2882                           ;motor_mode.h: 12: PORTAbits.RA2 = 0;
  2883  017B  1105               	bcf	5,2	;volatile
  2884  017C                     l2065:	
  2885                           
  2886                           ;motor_mode.h: 13: }
  2887                           ;motor_mode.h: 14: if(m == 3){
  2888  017C  3003               	movlw	3
  2889  017D  0670               	xorwf	modM1@m,w
  2890  017E  0471               	iorwf	modM1@m+1,w
  2891  017F  1D03               	btfss	3,2
  2892  0180  2986               	goto	l2069
  2893                           
  2894                           ;motor_mode.h: 15: PORTAbits.RA4 = 0;
  2895  0181  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0182  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0183  1205               	bcf	5,4	;volatile
  2898                           
  2899                           ;motor_mode.h: 16: PORTAbits.RA3 = 1;
  2900  0184  1585               	bsf	5,3	;volatile
  2901                           
  2902                           ;motor_mode.h: 17: PORTAbits.RA2 = 0;
  2903  0185  1105               	bcf	5,2	;volatile
  2904  0186                     l2069:	
  2905                           
  2906                           ;motor_mode.h: 18: }
  2907                           ;motor_mode.h: 19: if(m == 4){
  2908  0186  3004               	movlw	4
  2909  0187  0670               	xorwf	modM1@m,w
  2910  0188  0471               	iorwf	modM1@m+1,w
  2911  0189  1D03               	btfss	3,2
  2912  018A  2990               	goto	l2073
  2913                           
  2914                           ;motor_mode.h: 20: PORTAbits.RA4 = 1;
  2915  018B  1283               	bcf	3,5	;RP0=0, select bank0
  2916  018C  1303               	bcf	3,6	;RP1=0, select bank0
  2917  018D  1605               	bsf	5,4	;volatile
  2918                           
  2919                           ;motor_mode.h: 21: PORTAbits.RA3 = 1;
  2920  018E  1585               	bsf	5,3	;volatile
  2921                           
  2922                           ;motor_mode.h: 22: PORTAbits.RA2 = 0;
  2923  018F  1105               	bcf	5,2	;volatile
  2924  0190                     l2073:	
  2925                           
  2926                           ;motor_mode.h: 23: }
  2927                           ;motor_mode.h: 24: if(m == 5){
  2928  0190  3005               	movlw	5
  2929  0191  0670               	xorwf	modM1@m,w
  2930  0192  0471               	iorwf	modM1@m+1,w
  2931  0193  1D03               	btfss	3,2
  2932  0194  299A               	goto	l2077
  2933                           
  2934                           ;motor_mode.h: 25: PORTAbits.RA4 = 0;
  2935  0195  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0196  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0197  1205               	bcf	5,4	;volatile
  2938                           
  2939                           ;motor_mode.h: 26: PORTAbits.RA3 = 0;
  2940  0198  1185               	bcf	5,3	;volatile
  2941                           
  2942                           ;motor_mode.h: 27: PORTAbits.RA2 = 1;
  2943  0199  1505               	bsf	5,2	;volatile
  2944  019A                     l2077:	
  2945                           
  2946                           ;motor_mode.h: 28: }
  2947                           ;motor_mode.h: 29: if(m == 6){
  2948  019A  3006               	movlw	6
  2949  019B  0670               	xorwf	modM1@m,w
  2950  019C  0471               	iorwf	modM1@m+1,w
  2951  019D  1D03               	btfss	3,2
  2952  019E  29A4               	goto	l2081
  2953                           
  2954                           ;motor_mode.h: 30: PORTAbits.RA4 = 1;
  2955  019F  1283               	bcf	3,5	;RP0=0, select bank0
  2956  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  2957  01A1  1605               	bsf	5,4	;volatile
  2958                           
  2959                           ;motor_mode.h: 31: PORTAbits.RA3 = 0;
  2960  01A2  1185               	bcf	5,3	;volatile
  2961                           
  2962                           ;motor_mode.h: 32: PORTAbits.RA2 = 1;
  2963  01A3  1505               	bsf	5,2	;volatile
  2964  01A4                     l2081:	
  2965                           
  2966                           ;motor_mode.h: 33: }
  2967                           ;motor_mode.h: 34: if(m == 7){
  2968  01A4  3007               	movlw	7
  2969  01A5  0670               	xorwf	modM1@m,w
  2970  01A6  0471               	iorwf	modM1@m+1,w
  2971  01A7  1D03               	btfss	3,2
  2972  01A8  29AE               	goto	l2085
  2973                           
  2974                           ;motor_mode.h: 35: PORTAbits.RA4 = 0;
  2975  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  2976  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  2977  01AB  1205               	bcf	5,4	;volatile
  2978                           
  2979                           ;motor_mode.h: 36: PORTAbits.RA3 = 1;
  2980  01AC  1585               	bsf	5,3	;volatile
  2981                           
  2982                           ;motor_mode.h: 37: PORTAbits.RA2 = 1;
  2983  01AD  1505               	bsf	5,2	;volatile
  2984  01AE                     l2085:	
  2985                           
  2986                           ;motor_mode.h: 38: }
  2987                           ;motor_mode.h: 39: if(m == 8){
  2988  01AE  3008               	movlw	8
  2989  01AF  0670               	xorwf	modM1@m,w
  2990  01B0  0471               	iorwf	modM1@m+1,w
  2991  01B1  1D03               	btfss	3,2
  2992  01B2  0008               	return
  2993                           
  2994                           ;motor_mode.h: 40: PORTAbits.RA4 = 1;
  2995  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  2996  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  2997  01B5  1605               	bsf	5,4	;volatile
  2998                           
  2999                           ;motor_mode.h: 41: PORTAbits.RA3 = 1;
  3000  01B6  1585               	bsf	5,3	;volatile
  3001                           
  3002                           ;motor_mode.h: 42: PORTAbits.RA2 = 1;
  3003  01B7  1505               	bsf	5,2	;volatile
  3004  01B8  0008               	return
  3005  01B9                     __end_of_modM1:	
  3006                           
  3007                           	psect	text11
  3008  0126                     __ptext11:	
  3009 ;; *************** function _maxStep *****************
  3010 ;; Defined at:
  3011 ;;		line 231 in file "stepMotor.h"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  stepx           2    0[COMMON] int 
  3014 ;;  stepy           2    2[COMMON] int 
  3015 ;;  stepz           2    4[COMMON] int 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  l               2   11[COMMON] int 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  2    0[COMMON] int 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3027 ;;      Params:         6       0       0       0       0
  3028 ;;      Locals:         6       0       0       0       0
  3029 ;;      Temps:          1       0       0       0       0
  3030 ;;      Totals:        13       0       0       0       0
  3031 ;;Total ram usage:       13 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function _maxStep
  3042  0126                     _maxStep:	
  3043                           
  3044                           ;stepMotor.h: 232: int l = 0;
  3045                           
  3046                           ;incstack = 0
  3047                           ; Regs used in _maxStep: [wreg+status,2]
  3048  0126  01FB               	clrf	maxStep@l
  3049  0127  01FC               	clrf	maxStep@l+1
  3050                           
  3051                           ;stepMotor.h: 233: return l = stepx > stepy ? (stepx > stepz ? stepx : stepz) : (stepy >
      +                           stepz ? stepy : stepz);
  3052  0128  0873               	movf	maxStep@stepy+1,w
  3053  0129  3A80               	xorlw	128
  3054  012A  00F6               	movwf	??_maxStep
  3055  012B  0871               	movf	maxStep@stepx+1,w
  3056  012C  3A80               	xorlw	128
  3057  012D  0276               	subwf	??_maxStep,w
  3058  012E  1D03               	skipz
  3059  012F  2932               	goto	u2265
  3060  0130  0870               	movf	maxStep@stepx,w
  3061  0131  0272               	subwf	maxStep@stepy,w
  3062  0132                     u2265:	
  3063  0132  1C03               	skipc
  3064  0133  294C               	goto	l2335
  3065  0134  0875               	movf	maxStep@stepz+1,w
  3066  0135  3A80               	xorlw	128
  3067  0136  00F6               	movwf	??_maxStep
  3068  0137  0873               	movf	maxStep@stepy+1,w
  3069  0138  3A80               	xorlw	128
  3070  0139  0276               	subwf	??_maxStep,w
  3071  013A  1D03               	skipz
  3072  013B  293E               	goto	u2275
  3073  013C  0872               	movf	maxStep@stepy,w
  3074  013D  0274               	subwf	maxStep@stepz,w
  3075  013E                     u2275:	
  3076  013E  1C03               	skipc
  3077  013F  2944               	goto	l2333
  3078  0140  0875               	movf	maxStep@stepz+1,w
  3079  0141  00F8               	movwf	_maxStep$382+1
  3080  0142  0874               	movf	maxStep@stepz,w
  3081  0143  2947               	goto	L1
  3082  0144                     l2333:	
  3083  0144  0873               	movf	maxStep@stepy+1,w
  3084  0145  00F8               	movwf	_maxStep$382+1
  3085  0146  0872               	movf	maxStep@stepy,w
  3086  0147                     L1:	
  3087  0147  00F7               	movwf	_maxStep$382
  3088  0148  0878               	movf	_maxStep$382+1,w
  3089  0149  00FC               	movwf	maxStep@l+1
  3090  014A  0877               	movf	_maxStep$382,w
  3091  014B  2963               	goto	L2
  3092  014C                     l2335:	
  3093  014C  0875               	movf	maxStep@stepz+1,w
  3094  014D  3A80               	xorlw	128
  3095  014E  00F6               	movwf	??_maxStep
  3096  014F  0871               	movf	maxStep@stepx+1,w
  3097  0150  3A80               	xorlw	128
  3098  0151  0276               	subwf	??_maxStep,w
  3099  0152  1D03               	skipz
  3100  0153  2956               	goto	u2285
  3101  0154  0870               	movf	maxStep@stepx,w
  3102  0155  0274               	subwf	maxStep@stepz,w
  3103  0156                     u2285:	
  3104  0156  1C03               	skipc
  3105  0157  295C               	goto	l2339
  3106  0158  0875               	movf	maxStep@stepz+1,w
  3107  0159  00FA               	movwf	_maxStep$383+1
  3108  015A  0874               	movf	maxStep@stepz,w
  3109  015B  295F               	goto	L3
  3110  015C                     l2339:	
  3111  015C  0871               	movf	maxStep@stepx+1,w
  3112  015D  00FA               	movwf	_maxStep$383+1
  3113  015E  0870               	movf	maxStep@stepx,w
  3114  015F                     L3:	
  3115  015F  00F9               	movwf	_maxStep$383
  3116  0160  087A               	movf	_maxStep$383+1,w
  3117  0161  00FC               	movwf	maxStep@l+1
  3118  0162  0879               	movf	_maxStep$383,w
  3119  0163                     L2:	
  3120  0163  00FB               	movwf	maxStep@l
  3121  0164  087C               	movf	maxStep@l+1,w
  3122  0165  00F1               	movwf	?_maxStep+1
  3123  0166  087B               	movf	maxStep@l,w
  3124  0167  00F0               	movwf	?_maxStep
  3125  0168  0008               	return
  3126  0169                     __end_of_maxStep:	
  3127                           
  3128                           	psect	text12
  3129  02B4                     __ptext12:	
  3130 ;; *************** function _getCoords *****************
  3131 ;; Defined at:
  3132 ;;		line 250 in file "main.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  coords          1    wreg     PTR unsigned char 
  3135 ;;		 -> coords(9), 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  coords          1    8[COMMON] PTR unsigned char 
  3138 ;;		 -> coords(9), 
  3139 ;;  i               2    9[COMMON] int 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  2   66[None  ] int 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       0       0       0
  3150 ;;      Locals:         3       0       0       0       0
  3151 ;;      Temps:          3       0       0       0       0
  3152 ;;      Totals:         6       0       0       0       0
  3153 ;;Total ram usage:        6 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    2
  3156 ;; This function calls:
  3157 ;;		_UART_RxString
  3158 ;;		_UART_TxString
  3159 ;; This function is called by:
  3160 ;;		_main
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _getCoords
  3166  02B4                     _getCoords:	
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _getCoords: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3170                           ;getCoords@coords stored from wreg
  3171  02B4  00F8               	movwf	getCoords@coords
  3172                           
  3173                           ;main.c: 253: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3174  02B5  300B               	movlw	11
  3175  02B6  00F7               	movwf	??_getCoords+2
  3176  02B7  3026               	movlw	38
  3177  02B8  00F6               	movwf	??_getCoords+1
  3178  02B9  3066               	movlw	102
  3179  02BA  00F5               	movwf	??_getCoords
  3180  02BB                     u3417:	
  3181  02BB  0BF5               	decfsz	??_getCoords,f
  3182  02BC  2ABB               	goto	u3417
  3183  02BD  0BF6               	decfsz	??_getCoords+1,f
  3184  02BE  2ABB               	goto	u3417
  3185  02BF  0BF7               	decfsz	??_getCoords+2,f
  3186  02C0  2ABB               	goto	u3417
  3187  02C1  2AC2               	nop2
  3188                           
  3189                           ;main.c: 254: UART_RxString(coords);
  3190  02C2  0878               	movf	getCoords@coords,w
  3191  02C3  120A  158A  27CD  120A  118A  	fcall	_UART_RxString
  3192                           
  3193                           ;main.c: 255: UART_TxString("eco ricezione: ");
  3194  02C8  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3195  02C9  00F1               	movwf	UART_TxString@str
  3196  02CA  3080               	movlw	128
  3197  02CB  00F2               	movwf	UART_TxString@str+1
  3198  02CC  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3199                           
  3200                           ;main.c: 256: UART_TxString(coords);
  3201  02D1  0878               	movf	getCoords@coords,w
  3202  02D2  00F1               	movwf	UART_TxString@str
  3203  02D3  3000               	movlw	0
  3204  02D4  00F2               	movwf	UART_TxString@str+1
  3205  02D5  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3206                           
  3207                           ;main.c: 259: for(int i = 0; i<3; i++){
  3208  02DA  01F9               	clrf	getCoords@i
  3209  02DB  01FA               	clrf	getCoords@i+1
  3210  02DC                     L4:	
  3211  02DC  087A               	movf	getCoords@i+1,w
  3212  02DD  3A80               	xorlw	128
  3213  02DE  00FF               	movwf	127
  3214  02DF  3080               	movlw	128
  3215  02E0  027F               	subwf	127,w
  3216  02E1  1D03               	skipz
  3217  02E2  2AE5               	goto	u2595
  3218  02E3  3003               	movlw	3
  3219  02E4  0279               	subwf	getCoords@i,w
  3220  02E5                     u2595:	
  3221  02E5  1803               	btfsc	3,0
  3222  02E6  0008               	return
  3223                           
  3224                           ;main.c: 260: stepX[i] = coords[i];
  3225  02E7  0879               	movf	getCoords@i,w
  3226  02E8  0778               	addwf	getCoords@coords,w
  3227  02E9  00F5               	movwf	??_getCoords
  3228  02EA  0875               	movf	??_getCoords,w
  3229  02EB  0084               	movwf	4
  3230  02EC  1383               	bcf	3,7	;select IRP bank0
  3231  02ED  0800               	movf	0,w
  3232  02EE  00F6               	movwf	??_getCoords+1
  3233  02EF  0879               	movf	getCoords@i,w
  3234  02F0  3EB0               	addlw	(low (_stepX| 0))& (0+255)
  3235  02F1  0084               	movwf	4
  3236  02F2  0876               	movf	??_getCoords+1,w
  3237  02F3  0080               	movwf	0
  3238                           
  3239                           ;main.c: 261: stepY[i] = coords[3+i];
  3240  02F4  0879               	movf	getCoords@i,w
  3241  02F5  3E03               	addlw	3
  3242  02F6  0778               	addwf	getCoords@coords,w
  3243  02F7  00F5               	movwf	??_getCoords
  3244  02F8  0875               	movf	??_getCoords,w
  3245  02F9  0084               	movwf	4
  3246  02FA  0800               	movf	0,w
  3247  02FB  00F6               	movwf	??_getCoords+1
  3248  02FC  0879               	movf	getCoords@i,w
  3249  02FD  3EB7               	addlw	(low (_stepY| 0))& (0+255)
  3250  02FE  0084               	movwf	4
  3251  02FF  0876               	movf	??_getCoords+1,w
  3252  0300  0080               	movwf	0
  3253                           
  3254                           ;main.c: 262: stepZ[i] = coords[6+i];
  3255  0301  0879               	movf	getCoords@i,w
  3256  0302  3E06               	addlw	6
  3257  0303  0778               	addwf	getCoords@coords,w
  3258  0304  00F5               	movwf	??_getCoords
  3259  0305  0875               	movf	??_getCoords,w
  3260  0306  0084               	movwf	4
  3261  0307  0800               	movf	0,w
  3262  0308  00F6               	movwf	??_getCoords+1
  3263  0309  0879               	movf	getCoords@i,w
  3264  030A  3EBE               	addlw	(low (_stepZ| 0))& (0+255)
  3265  030B  0084               	movwf	4
  3266  030C  0876               	movf	??_getCoords+1,w
  3267  030D  0080               	movwf	0
  3268  030E  3001               	movlw	1
  3269  030F  07F9               	addwf	getCoords@i,f
  3270  0310  1803               	skipnc
  3271  0311  0AFA               	incf	getCoords@i+1,f
  3272  0312  3000               	movlw	0
  3273  0313  07FA               	addwf	getCoords@i+1,f
  3274  0314  2ADC               	goto	L4
  3275  0315                     __end_of_getCoords:	
  3276                           
  3277                           	psect	text13
  3278  0315                     __ptext13:	
  3279 ;; *************** function _getCanvasDim *****************
  3280 ;; Defined at:
  3281 ;;		line 231 in file "main.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  canvas          1    wreg     PTR unsigned char 
  3284 ;;		 -> canvas(7), 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  canvas          1    7[COMMON] PTR unsigned char 
  3287 ;;		 -> canvas(7), 
  3288 ;;  j               2    8[COMMON] int 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2   60[None  ] int 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3298 ;;      Params:         0       0       0       0       0
  3299 ;;      Locals:         3       0       0       0       0
  3300 ;;      Temps:          2       0       0       0       0
  3301 ;;      Totals:         5       0       0       0       0
  3302 ;;Total ram usage:        5 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    2
  3305 ;; This function calls:
  3306 ;;		_UART_RxString
  3307 ;;		_UART_TxString
  3308 ;; This function is called by:
  3309 ;;		_main
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function _getCanvasDim
  3315  0315                     _getCanvasDim:	
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _getCanvasDim: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3319                           ;getCanvasDim@canvas stored from wreg
  3320  0315  00F7               	movwf	getCanvasDim@canvas
  3321                           
  3322                           ;main.c: 234: UART_TxString("ready");
  3323  0316  303E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3324  0317  00F1               	movwf	UART_TxString@str
  3325  0318  3080               	movlw	128
  3326  0319  00F2               	movwf	UART_TxString@str+1
  3327  031A  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3328                           
  3329                           ;main.c: 235: UART_RxString(canvas);
  3330  031F  0877               	movf	getCanvasDim@canvas,w
  3331  0320  120A  158A  27CD  120A  118A  	fcall	_UART_RxString
  3332                           
  3333                           ;main.c: 237: for(int j = 0; j<3; j++){
  3334  0325  01F8               	clrf	getCanvasDim@j
  3335  0326  01F9               	clrf	getCanvasDim@j+1
  3336  0327  0879               	movf	getCanvasDim@j+1,w
  3337  0328  3A80               	xorlw	128
  3338  0329  00FF               	movwf	127
  3339  032A  3080               	movlw	128
  3340  032B  027F               	subwf	127,w
  3341  032C  1D03               	skipz
  3342  032D  2B30               	goto	u2525
  3343  032E  3003               	movlw	3
  3344  032F  0278               	subwf	getCanvasDim@j,w
  3345  0330                     u2525:	
  3346  0330  1803               	btfsc	3,0
  3347  0331  2B5D               	goto	l2531
  3348  0332                     l2525:	
  3349                           
  3350                           ;main.c: 238: canvasX[j] = canvas[j];
  3351  0332  0878               	movf	getCanvasDim@j,w
  3352  0333  0777               	addwf	getCanvasDim@canvas,w
  3353  0334  00F5               	movwf	??_getCanvasDim
  3354  0335  0875               	movf	??_getCanvasDim,w
  3355  0336  0084               	movwf	4
  3356  0337  1383               	bcf	3,7	;select IRP bank0
  3357  0338  0800               	movf	0,w
  3358  0339  00F6               	movwf	??_getCanvasDim+1
  3359  033A  0878               	movf	getCanvasDim@j,w
  3360  033B  3EC5               	addlw	(low (_canvasX| 0))& (0+255)
  3361  033C  0084               	movwf	4
  3362  033D  0876               	movf	??_getCanvasDim+1,w
  3363  033E  0080               	movwf	0
  3364                           
  3365                           ;main.c: 239: canvasY[j] = canvas[3+j];
  3366  033F  0878               	movf	getCanvasDim@j,w
  3367  0340  3E03               	addlw	3
  3368  0341  0777               	addwf	getCanvasDim@canvas,w
  3369  0342  00F5               	movwf	??_getCanvasDim
  3370  0343  0875               	movf	??_getCanvasDim,w
  3371  0344  0084               	movwf	4
  3372  0345  0800               	movf	0,w
  3373  0346  00F6               	movwf	??_getCanvasDim+1
  3374  0347  0878               	movf	getCanvasDim@j,w
  3375  0348  3EC8               	addlw	(low (_canvasY| 0))& (0+255)
  3376  0349  0084               	movwf	4
  3377  034A  0876               	movf	??_getCanvasDim+1,w
  3378  034B  0080               	movwf	0
  3379  034C  3001               	movlw	1
  3380  034D  07F8               	addwf	getCanvasDim@j,f
  3381  034E  1803               	skipnc
  3382  034F  0AF9               	incf	getCanvasDim@j+1,f
  3383  0350  3000               	movlw	0
  3384  0351  07F9               	addwf	getCanvasDim@j+1,f
  3385  0352  0879               	movf	getCanvasDim@j+1,w
  3386  0353  3A80               	xorlw	128
  3387  0354  00FF               	movwf	127
  3388  0355  3080               	movlw	128
  3389  0356  027F               	subwf	127,w
  3390  0357  1D03               	skipz
  3391  0358  2B5B               	goto	u2535
  3392  0359  3003               	movlw	3
  3393  035A  0278               	subwf	getCanvasDim@j,w
  3394  035B                     u2535:	
  3395  035B  1C03               	skipc
  3396  035C  2B32               	goto	l2525
  3397  035D                     l2531:	
  3398                           
  3399                           ;main.c: 240: }
  3400                           ;main.c: 243: UART_TxString("X: ");
  3401  035D  3016               	movlw	(low (((STR_7+5)-__stringbase)| (0+32768)))& (0+255)
  3402  035E  00F1               	movwf	UART_TxString@str
  3403  035F  3080               	movlw	128
  3404  0360  00F2               	movwf	UART_TxString@str+1
  3405  0361  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3406                           
  3407                           ;main.c: 244: UART_TxString(canvasX);
  3408  0366  30C5               	movlw	(low (_canvasX| 0))& (0+255)
  3409  0367  00F1               	movwf	UART_TxString@str
  3410  0368  3000               	movlw	0
  3411  0369  00F2               	movwf	UART_TxString@str+1
  3412  036A  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3413                           
  3414                           ;main.c: 245: UART_TxString("Y: ");
  3415  036F  301F               	movlw	(low (((STR_8+5)-__stringbase)| (0+32768)))& (0+255)
  3416  0370  00F1               	movwf	UART_TxString@str
  3417  0371  3080               	movlw	128
  3418  0372  00F2               	movwf	UART_TxString@str+1
  3419  0373  120A  158A  2755  120A  118A  	fcall	_UART_TxString
  3420                           
  3421                           ;main.c: 246: UART_TxString(canvasY);
  3422  0378  30C8               	movlw	(low (_canvasY| 0))& (0+255)
  3423  0379  00F1               	movwf	UART_TxString@str
  3424  037A  3000               	movlw	0
  3425  037B  00F2               	movwf	UART_TxString@str+1
  3426  037C  120A  158A  2755   	fcall	_UART_TxString
  3427  037F  0008               	return
  3428  0380                     __end_of_getCanvasDim:	
  3429                           
  3430                           	psect	text14
  3431  0F55                     __ptext14:	
  3432 ;; *************** function _UART_TxString *****************
  3433 ;; Defined at:
  3434 ;;		line 41 in file "UART.h"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  str             2    1[COMMON] PTR const unsigned char 
  3437 ;;		 -> STR_12(16), STR_11(4), STR_10(4), STR_9(6), 
  3438 ;;		 -> STR_8(9), STR_7(9), STR_6(7), STR_5(7), 
  3439 ;;		 -> STR_4(7), STR_1(6), coords(9), canvasY(3), 
  3440 ;;		 -> canvasX(3), 
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3452 ;;      Params:         2       0       0       0       0
  3453 ;;      Locals:         0       0       0       0       0
  3454 ;;      Temps:          0       0       0       0       0
  3455 ;;      Totals:         2       0       0       0       0
  3456 ;;Total ram usage:        2 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    1
  3459 ;; This function calls:
  3460 ;;		_UART_TxChar
  3461 ;; This function is called by:
  3462 ;;		_main
  3463 ;;		_getCanvasDim
  3464 ;;		_getCoords
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _UART_TxString
  3470  0F55                     _UART_TxString:	
  3471  0F55                     l2167:	
  3472                           ;UART.h: 42: while(*str)
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3476                           
  3477  0F55  0872               	movf	UART_TxString@str+1,w
  3478  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0F58  00FF               	movwf	127
  3481  0F59  0871               	movf	UART_TxString@str,w
  3482  0F5A  0084               	movwf	4
  3483  0F5B  120A  118A  2003  120A  158A  	fcall	stringtab
  3484  0F60  3A00               	xorlw	0
  3485  0F61  1903               	btfsc	3,2
  3486  0F62  0008               	return
  3487                           
  3488                           ;UART.h: 43: {
  3489                           ;UART.h: 44: UART_TxChar(*str);
  3490  0F63  0872               	movf	UART_TxString@str+1,w
  3491  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0F66  00FF               	movwf	127
  3494  0F67  0871               	movf	UART_TxString@str,w
  3495  0F68  0084               	movwf	4
  3496  0F69  120A  118A  2003  120A  158A  	fcall	stringtab
  3497  0F6E  120A  158A  2684  120A  158A  	fcall	_UART_TxChar
  3498                           
  3499                           ;UART.h: 45: str++;
  3500  0F73  3001               	movlw	1
  3501  0F74  07F1               	addwf	UART_TxString@str,f
  3502  0F75  1803               	skipnc
  3503  0F76  0AF2               	incf	UART_TxString@str+1,f
  3504  0F77  2F55               	goto	l2167
  3505  0F78                     __end_of_UART_TxString:	
  3506                           
  3507                           	psect	text15
  3508  0FCD                     __ptext15:	
  3509 ;; *************** function _UART_RxString *****************
  3510 ;; Defined at:
  3511 ;;		line 64 in file "UART.h"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  stringa         1    wreg     PTR unsigned char 
  3514 ;;		 -> coords(9), canvas(7), 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  stringa         1    2[COMMON] PTR unsigned char 
  3517 ;;		 -> coords(9), canvas(7), 
  3518 ;;  ch              1    4[COMMON] unsigned char 
  3519 ;;  len             1    3[COMMON] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      unsigned char 
  3522 ;; Registers used:
  3523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3529 ;;      Params:         0       0       0       0       0
  3530 ;;      Locals:         3       0       0       0       0
  3531 ;;      Temps:          2       0       0       0       0
  3532 ;;      Totals:         5       0       0       0       0
  3533 ;;Total ram usage:        5 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    1
  3536 ;; This function calls:
  3537 ;;		_UART_RxChar
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;;		_getCanvasDim
  3541 ;;		_getCoords
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function _UART_RxString
  3547  0FCD                     _UART_RxString:	
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in _UART_RxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3551                           ;UART_RxString@stringa stored from wreg
  3552  0FCD  00F2               	movwf	UART_RxString@stringa
  3553                           
  3554                           ;UART.h: 66: char ch;
  3555                           ;UART.h: 67: char len = 0;
  3556  0FCE  01F3               	clrf	UART_RxString@len
  3557  0FCF                     l2171:	
  3558                           ;UART.h: 69: while(1)
  3559                           
  3560                           
  3561                           ;UART.h: 70: {
  3562                           ;UART.h: 71: ch=UART_RxChar();
  3563  0FCF  120A  158A  2698  120A  158A  	fcall	_UART_RxChar
  3564  0FD4  00F0               	movwf	??_UART_RxString
  3565  0FD5  0870               	movf	??_UART_RxString,w
  3566  0FD6  00F4               	movwf	UART_RxString@ch
  3567                           
  3568                           ;UART.h: 73: if((ch=='\r') || (ch=='\n'))
  3569  0FD7  300D               	movlw	13
  3570  0FD8  0674               	xorwf	UART_RxString@ch,w
  3571  0FD9  1903               	btfsc	3,2
  3572  0FDA  2FDF               	goto	l2177
  3573  0FDB  300A               	movlw	10
  3574  0FDC  0674               	xorwf	UART_RxString@ch,w
  3575  0FDD  1D03               	btfss	3,2
  3576  0FDE  2FE7               	goto	l2181
  3577  0FDF                     l2177:	
  3578                           
  3579                           ;UART.h: 74: {
  3580                           ;UART.h: 75: stringa[len]='\0';
  3581  0FDF  0873               	movf	UART_RxString@len,w
  3582  0FE0  0772               	addwf	UART_RxString@stringa,w
  3583  0FE1  00F0               	movwf	??_UART_RxString
  3584  0FE2  0870               	movf	??_UART_RxString,w
  3585  0FE3  0084               	movwf	4
  3586  0FE4  1383               	bcf	3,7	;select IRP bank0
  3587  0FE5  0180               	clrf	0
  3588                           
  3589                           ;UART.h: 76: break;
  3590  0FE6  0008               	return
  3591  0FE7                     l2181:	
  3592                           ;UART.h: 78: }
  3593                           
  3594                           
  3595                           ;UART.h: 79: else if((ch=='\b') && (len!=0))
  3596  0FE7  3008               	movlw	8
  3597  0FE8  0674               	xorwf	UART_RxString@ch,w
  3598  0FE9  1D03               	btfss	3,2
  3599  0FEA  2FF1               	goto	l2187
  3600  0FEB  0873               	movf	UART_RxString@len,w
  3601  0FEC  1903               	btfsc	3,2
  3602  0FED  2FF1               	goto	l2187
  3603                           
  3604                           ;UART.h: 80: {
  3605                           ;UART.h: 81: len--;
  3606  0FEE  3001               	movlw	1
  3607  0FEF  02F3               	subwf	UART_RxString@len,f
  3608                           
  3609                           ;UART.h: 82: }
  3610  0FF0  2FCF               	goto	l2171
  3611  0FF1                     l2187:	
  3612                           
  3613                           ;UART.h: 83: else
  3614                           ;UART.h: 84: {
  3615                           ;UART.h: 85: stringa[len]=ch;
  3616  0FF1  0874               	movf	UART_RxString@ch,w
  3617  0FF2  00F0               	movwf	??_UART_RxString
  3618  0FF3  0873               	movf	UART_RxString@len,w
  3619  0FF4  0772               	addwf	UART_RxString@stringa,w
  3620  0FF5  00F1               	movwf	??_UART_RxString+1
  3621  0FF6  0871               	movf	??_UART_RxString+1,w
  3622  0FF7  0084               	movwf	4
  3623  0FF8  0870               	movf	??_UART_RxString,w
  3624  0FF9  1383               	bcf	3,7	;select IRP bank0
  3625  0FFA  0080               	movwf	0
  3626                           
  3627                           ;UART.h: 86: len++;
  3628  0FFB  3001               	movlw	1
  3629  0FFC  00F0               	movwf	??_UART_RxString
  3630  0FFD  0870               	movf	??_UART_RxString,w
  3631  0FFE  07F3               	addwf	UART_RxString@len,f
  3632  0FFF  2FCF               	goto	l2171
  3633  1000                     __end_of_UART_RxString:	
  3634                           ;UART.h: 87: }
  3635                           ;UART.h: 89: }
  3636                           ;UART.h: 91: return len;
  3637                           ;	Return value of _UART_RxString is never used
  3638                           
  3639                           
  3640                           	psect	text16
  3641  0E98                     __ptext16:	
  3642 ;; *************** function _UART_RxChar *****************
  3643 ;; Defined at:
  3644 ;;		line 50 in file "UART.h"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      unsigned char 
  3651 ;; Registers used:
  3652 ;;		wreg
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_UART_RxString
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _UART_RxChar
  3673  0E98                     _UART_RxChar:	
  3674                           
  3675                           ;UART.h: 52: if(OERR)
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _UART_RxChar: [wreg]
  3679  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0E9A  1C98               	btfss	24,1	;volatile
  3682  0E9B  2E9E               	goto	l227
  3683                           
  3684                           ;UART.h: 53: {
  3685                           ;UART.h: 54: CREN = 0;
  3686  0E9C  1218               	bcf	24,4	;volatile
  3687                           
  3688                           ;UART.h: 55: CREN = 1;
  3689  0E9D  1618               	bsf	24,4	;volatile
  3690  0E9E                     l227:	
  3691                           ;UART.h: 56: }
  3692                           ;UART.h: 58: while(!RCIF);
  3693                           
  3694  0E9E  1E8C               	btfss	12,5	;volatile
  3695  0E9F  2E9E               	goto	l227
  3696                           
  3697                           ;UART.h: 59: RCIF=0;
  3698  0EA0  128C               	bcf	12,5	;volatile
  3699                           
  3700                           ;UART.h: 60: return RCREG;
  3701  0EA1  081A               	movf	26,w	;volatile
  3702  0EA2  0008               	return
  3703  0EA3                     __end_of_UART_RxChar:	
  3704                           
  3705                           	psect	text17
  3706  0F12                     __ptext17:	
  3707 ;; *************** function _equivVal *****************
  3708 ;; Defined at:
  3709 ;;		line 266 in file "main.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  Mcanvas         2    9[BANK0 ] int 
  3712 ;;  Mstep           2   11[BANK0 ] int 
  3713 ;;  canvas          2   13[BANK0 ] int 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  2    9[BANK0 ] int 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0, pclath, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3725 ;;      Params:         0       6       0       0       0
  3726 ;;      Locals:         0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0
  3728 ;;      Totals:         0       6       0       0       0
  3729 ;;Total ram usage:        6 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    1
  3732 ;; This function calls:
  3733 ;;		___awdiv
  3734 ;;		___wmul
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function _equivVal
  3742  0F12                     _equivVal:	
  3743                           
  3744                           ;main.c: 273: return (Mstep * canvas) / Mcanvas;
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _equivVal: [wreg+status,2+status,0+pclath+cstack]
  3748  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  3749  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0F14  0858               	movf	equivVal@Mcanvas+1,w
  3751  0F15  00F7               	movwf	___awdiv@divisor+1
  3752  0F16  0857               	movf	equivVal@Mcanvas,w
  3753  0F17  00F6               	movwf	___awdiv@divisor
  3754  0F18  085A               	movf	equivVal@Mstep+1,w
  3755  0F19  00F1               	movwf	___wmul@multiplier+1
  3756  0F1A  0859               	movf	equivVal@Mstep,w
  3757  0F1B  00F0               	movwf	___wmul@multiplier
  3758  0F1C  085C               	movf	equivVal@canvas+1,w
  3759  0F1D  00F3               	movwf	___wmul@multiplicand+1
  3760  0F1E  085B               	movf	equivVal@canvas,w
  3761  0F1F  00F2               	movwf	___wmul@multiplicand
  3762  0F20  120A  158A  26F1  120A  158A  	fcall	___wmul
  3763  0F25  0871               	movf	?___wmul+1,w
  3764  0F26  00F9               	movwf	___awdiv@dividend+1
  3765  0F27  0870               	movf	?___wmul,w
  3766  0F28  00F8               	movwf	___awdiv@dividend
  3767  0F29  120A  118A  2259   	fcall	___awdiv
  3768  0F2C  0877               	movf	?___awdiv+1,w
  3769  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  3770  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  3771  0F2F  00D8               	movwf	?_equivVal+1
  3772  0F30  0876               	movf	?___awdiv,w
  3773  0F31  00D7               	movwf	?_equivVal
  3774  0F32  0008               	return
  3775  0F33                     __end_of_equivVal:	
  3776                           
  3777                           	psect	text18
  3778  0259                     __ptext18:	
  3779 ;; *************** function ___awdiv *****************
  3780 ;; Defined at:
  3781 ;;		line 6 in file "/opt/microchip/xc8/v1.36/sources/common/awdiv.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  divisor         2    6[COMMON] int 
  3784 ;;  dividend        2    8[COMMON] int 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  quotient        2    2[BANK0 ] int 
  3787 ;;  sign            1    1[BANK0 ] unsigned char 
  3788 ;;  counter         1    0[BANK0 ] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  2    6[COMMON] int 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3798 ;;      Params:         4       0       0       0       0
  3799 ;;      Locals:         0       4       0       0       0
  3800 ;;      Temps:          1       0       0       0       0
  3801 ;;      Totals:         5       4       0       0       0
  3802 ;;Total ram usage:        9 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; This function calls:
  3805 ;;		Nothing
  3806 ;; This function is called by:
  3807 ;;		_equivVal
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function ___awdiv
  3813  0259                     ___awdiv:	
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3817  0259  1283               	bcf	3,5	;RP0=0, select bank0
  3818  025A  1303               	bcf	3,6	;RP1=0, select bank0
  3819  025B  01CF               	clrf	___awdiv@sign
  3820  025C  1FF7               	btfss	___awdiv@divisor+1,7
  3821  025D  2A65               	goto	l2223
  3822  025E  09F6               	comf	___awdiv@divisor,f
  3823  025F  09F7               	comf	___awdiv@divisor+1,f
  3824  0260  0AF6               	incf	___awdiv@divisor,f
  3825  0261  1903               	skipnz
  3826  0262  0AF7               	incf	___awdiv@divisor+1,f
  3827  0263  01CF               	clrf	___awdiv@sign
  3828  0264  0ACF               	incf	___awdiv@sign,f
  3829  0265                     l2223:	
  3830  0265  1FF9               	btfss	___awdiv@dividend+1,7
  3831  0266  2A70               	goto	l2229
  3832  0267  09F8               	comf	___awdiv@dividend,f
  3833  0268  09F9               	comf	___awdiv@dividend+1,f
  3834  0269  0AF8               	incf	___awdiv@dividend,f
  3835  026A  1903               	skipnz
  3836  026B  0AF9               	incf	___awdiv@dividend+1,f
  3837  026C  3001               	movlw	1
  3838  026D  00FA               	movwf	??___awdiv
  3839  026E  087A               	movf	??___awdiv,w
  3840  026F  06CF               	xorwf	___awdiv@sign,f
  3841  0270                     l2229:	
  3842  0270  01D0               	clrf	___awdiv@quotient
  3843  0271  01D1               	clrf	___awdiv@quotient+1
  3844  0272  0876               	movf	___awdiv@divisor,w
  3845  0273  0477               	iorwf	___awdiv@divisor+1,w
  3846  0274  1903               	btfsc	3,2
  3847  0275  2AA7               	goto	l2251
  3848  0276  01CE               	clrf	___awdiv@counter
  3849  0277  0ACE               	incf	___awdiv@counter,f
  3850  0278                     l2239:	
  3851  0278  1BF7               	btfsc	___awdiv@divisor+1,7
  3852  0279  2A86               	goto	l2241
  3853  027A  3001               	movlw	1
  3854  027B                     u2135:	
  3855  027B  1003               	clrc
  3856  027C  0DF6               	rlf	___awdiv@divisor,f
  3857  027D  0DF7               	rlf	___awdiv@divisor+1,f
  3858  027E  3EFF               	addlw	-1
  3859  027F  1D03               	skipz
  3860  0280  2A7B               	goto	u2135
  3861  0281  3001               	movlw	1
  3862  0282  00FA               	movwf	??___awdiv
  3863  0283  087A               	movf	??___awdiv,w
  3864  0284  07CE               	addwf	___awdiv@counter,f
  3865  0285  2A78               	goto	l2239
  3866  0286                     l2241:	
  3867  0286  3001               	movlw	1
  3868  0287                     u2155:	
  3869  0287  1003               	clrc
  3870  0288  0DD0               	rlf	___awdiv@quotient,f
  3871  0289  0DD1               	rlf	___awdiv@quotient+1,f
  3872  028A  3EFF               	addlw	-1
  3873  028B  1D03               	skipz
  3874  028C  2A87               	goto	u2155
  3875  028D  0877               	movf	___awdiv@divisor+1,w
  3876  028E  0279               	subwf	___awdiv@dividend+1,w
  3877  028F  1D03               	skipz
  3878  0290  2A93               	goto	u2165
  3879  0291  0876               	movf	___awdiv@divisor,w
  3880  0292  0278               	subwf	___awdiv@dividend,w
  3881  0293                     u2165:	
  3882  0293  1C03               	skipc
  3883  0294  2A9C               	goto	l2247
  3884  0295  0876               	movf	___awdiv@divisor,w
  3885  0296  02F8               	subwf	___awdiv@dividend,f
  3886  0297  0877               	movf	___awdiv@divisor+1,w
  3887  0298  1C03               	skipc
  3888  0299  03F9               	decf	___awdiv@dividend+1,f
  3889  029A  02F9               	subwf	___awdiv@dividend+1,f
  3890  029B  1450               	bsf	___awdiv@quotient,0
  3891  029C                     l2247:	
  3892  029C  3001               	movlw	1
  3893  029D                     u2175:	
  3894  029D  1003               	clrc
  3895  029E  0CF7               	rrf	___awdiv@divisor+1,f
  3896  029F  0CF6               	rrf	___awdiv@divisor,f
  3897  02A0  3EFF               	addlw	-1
  3898  02A1  1D03               	skipz
  3899  02A2  2A9D               	goto	u2175
  3900  02A3  3001               	movlw	1
  3901  02A4  02CE               	subwf	___awdiv@counter,f
  3902  02A5  1D03               	btfss	3,2
  3903  02A6  2A86               	goto	l2241
  3904  02A7                     l2251:	
  3905  02A7  084F               	movf	___awdiv@sign,w
  3906  02A8  1903               	btfsc	3,2
  3907  02A9  2AAF               	goto	l2255
  3908  02AA  09D0               	comf	___awdiv@quotient,f
  3909  02AB  09D1               	comf	___awdiv@quotient+1,f
  3910  02AC  0AD0               	incf	___awdiv@quotient,f
  3911  02AD  1903               	skipnz
  3912  02AE  0AD1               	incf	___awdiv@quotient+1,f
  3913  02AF                     l2255:	
  3914  02AF  0851               	movf	___awdiv@quotient+1,w
  3915  02B0  00F7               	movwf	?___awdiv+1
  3916  02B1  0850               	movf	___awdiv@quotient,w
  3917  02B2  00F6               	movwf	?___awdiv
  3918  02B3  0008               	return
  3919  02B4                     __end_of___awdiv:	
  3920                           
  3921                           	psect	text19
  3922  03EC                     __ptext19:	
  3923 ;; *************** function _contStepY *****************
  3924 ;; Defined at:
  3925 ;;		line 354 in file "main.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0
  3941 ;;      Temps:          2       0       0       0       0
  3942 ;;      Totals:         2       0       0       0       0
  3943 ;;Total ram usage:        2 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_main
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           
  3953                           ;psect for function _contStepY
  3954  03EC                     _contStepY:	
  3955                           
  3956                           ;main.c: 358: if(stepYprec > stepy){
  3957                           
  3958                           ;incstack = 0
  3959                           ; Regs used in _contStepY: [wreg+status,2+status,0]
  3960  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3961  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3962  03EE  083E               	movf	_stepy+1,w
  3963  03EF  3A80               	xorlw	128
  3964  03F0  00F0               	movwf	??_contStepY
  3965  03F1  0836               	movf	_stepYprec+1,w
  3966  03F2  3A80               	xorlw	128
  3967  03F3  0270               	subwf	??_contStepY,w
  3968  03F4  1D03               	skipz
  3969  03F5  2BF8               	goto	u2675
  3970  03F6  0835               	movf	_stepYprec,w
  3971  03F7  023D               	subwf	_stepy,w
  3972  03F8                     u2675:	
  3973  03F8  1803               	skipnc
  3974  03F9  2C13               	goto	l2621
  3975                           
  3976                           ;main.c: 359: stepyTodo = stepYprec - stepy;
  3977  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3978  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3979  03FC  093D               	comf	_stepy,w
  3980  03FD  00F0               	movwf	??_contStepY
  3981  03FE  093E               	comf	_stepy+1,w
  3982  03FF  00F1               	movwf	??_contStepY+1
  3983  0400  0AF0               	incf	??_contStepY,f
  3984  0401  1903               	skipnz
  3985  0402  0AF1               	incf	??_contStepY+1,f
  3986  0403  0835               	movf	_stepYprec,w
  3987  0404  0770               	addwf	??_contStepY,w
  3988  0405  00BF               	movwf	_stepyTodo
  3989  0406  0836               	movf	_stepYprec+1,w
  3990  0407  1803               	skipnc
  3991  0408  0A36               	incf	_stepYprec+1,w
  3992  0409  0771               	addwf	??_contStepY+1,w
  3993  040A  00C0               	movwf	_stepyTodo+1
  3994                           
  3995                           ;main.c: 360: if(motorY.dir == 1) motorY.dir = 0;
  3996  040B  0325               	decf	_motorY,w
  3997  040C  1D03               	btfss	3,2
  3998  040D  2C10               	goto	l429
  3999  040E  01A5               	clrf	_motorY
  4000  040F  0008               	return
  4001  0410                     l429:	
  4002                           
  4003                           ;main.c: 361: else motorY.dir = 1;
  4004  0410  01A5               	clrf	_motorY
  4005  0411  0AA5               	incf	_motorY,f
  4006                           
  4007                           ;main.c: 362: } else if (stepYprec < stepy){
  4008  0412  0008               	return
  4009  0413                     l2621:	
  4010  0413  1283               	bcf	3,5	;RP0=0, select bank0
  4011  0414  1303               	bcf	3,6	;RP1=0, select bank0
  4012  0415  0836               	movf	_stepYprec+1,w
  4013  0416  3A80               	xorlw	128
  4014  0417  00F0               	movwf	??_contStepY
  4015  0418  083E               	movf	_stepy+1,w
  4016  0419  3A80               	xorlw	128
  4017  041A  0270               	subwf	??_contStepY,w
  4018  041B  1D03               	skipz
  4019  041C  2C1F               	goto	u2695
  4020  041D  083D               	movf	_stepy,w
  4021  041E  0235               	subwf	_stepYprec,w
  4022  041F                     u2695:	
  4023  041F  1803               	skipnc
  4024  0420  2C3E               	goto	l2631
  4025                           
  4026                           ;main.c: 363: stepyTodo = stepy - stepYprec;
  4027  0421  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0422  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0423  0935               	comf	_stepYprec,w
  4030  0424  00F0               	movwf	??_contStepY
  4031  0425  0936               	comf	_stepYprec+1,w
  4032  0426  00F1               	movwf	??_contStepY+1
  4033  0427  0AF0               	incf	??_contStepY,f
  4034  0428  1903               	skipnz
  4035  0429  0AF1               	incf	??_contStepY+1,f
  4036  042A  083D               	movf	_stepy,w
  4037  042B  0770               	addwf	??_contStepY,w
  4038  042C  00BF               	movwf	_stepyTodo
  4039  042D  083E               	movf	_stepy+1,w
  4040  042E  1803               	skipnc
  4041  042F  0A3E               	incf	_stepy+1,w
  4042  0430  0771               	addwf	??_contStepY+1,w
  4043  0431  00C0               	movwf	_stepyTodo+1
  4044                           
  4045                           ;main.c: 364: if(motorY.dir != defaultDiry){
  4046  0432  0825               	movf	_motorY,w
  4047  0433  0645               	xorwf	_defaultDiry,w
  4048  0434  1903               	skipnz
  4049  0435  0008               	return
  4050                           
  4051                           ;main.c: 365: if(motorY.dir == 1) motorY.dir = 0;
  4052  0436  0325               	decf	_motorY,w
  4053  0437  1D03               	btfss	3,2
  4054  0438  2C3B               	goto	l434
  4055  0439  01A5               	clrf	_motorY
  4056  043A  0008               	return
  4057  043B                     l434:	
  4058                           
  4059                           ;main.c: 366: else motorY.dir = 1;
  4060  043B  01A5               	clrf	_motorY
  4061  043C  0AA5               	incf	_motorY,f
  4062                           
  4063                           ;main.c: 367: }
  4064                           ;main.c: 368: } else if (stepYprec == stepy){
  4065  043D  0008               	return
  4066  043E                     l2631:	
  4067  043E  1283               	bcf	3,5	;RP0=0, select bank0
  4068  043F  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0440  083E               	movf	_stepy+1,w
  4070  0441  0636               	xorwf	_stepYprec+1,w
  4071  0442  1D03               	skipz
  4072  0443  2C46               	goto	u2725
  4073  0444  083D               	movf	_stepy,w
  4074  0445  0635               	xorwf	_stepYprec,w
  4075  0446                     u2725:	
  4076  0446  1D03               	skipz
  4077  0447  0008               	return
  4078                           
  4079                           ;main.c: 369: stepyTodo = stepy - stepYprec;
  4080  0448  0935               	comf	_stepYprec,w
  4081  0449  00F0               	movwf	??_contStepY
  4082  044A  0936               	comf	_stepYprec+1,w
  4083  044B  00F1               	movwf	??_contStepY+1
  4084  044C  0AF0               	incf	??_contStepY,f
  4085  044D  1903               	skipnz
  4086  044E  0AF1               	incf	??_contStepY+1,f
  4087  044F  083D               	movf	_stepy,w
  4088  0450  0770               	addwf	??_contStepY,w
  4089  0451  00BF               	movwf	_stepyTodo
  4090  0452  083E               	movf	_stepy+1,w
  4091  0453  1803               	skipnc
  4092  0454  0A3E               	incf	_stepy+1,w
  4093  0455  0771               	addwf	??_contStepY+1,w
  4094  0456  00C0               	movwf	_stepyTodo+1
  4095  0457  0008               	return
  4096  0458                     __end_of_contStepY:	
  4097                           
  4098                           	psect	text20
  4099  0380                     __ptext20:	
  4100 ;; *************** function _contStepX *****************
  4101 ;; Defined at:
  4102 ;;		line 315 in file "main.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;		None
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4116 ;;      Params:         0       0       0       0       0
  4117 ;;      Locals:         0       0       0       0       0
  4118 ;;      Temps:          2       0       0       0       0
  4119 ;;      Totals:         2       0       0       0       0
  4120 ;;Total ram usage:        2 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _contStepX
  4131  0380                     _contStepX:	
  4132                           
  4133                           ;main.c: 318: if(stepXprec > stepx){
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _contStepX: [wreg+status,2+status,0]
  4137  0380  1283               	bcf	3,5	;RP0=0, select bank0
  4138  0381  1303               	bcf	3,6	;RP1=0, select bank0
  4139  0382  083A               	movf	_stepx+1,w
  4140  0383  3A80               	xorlw	128
  4141  0384  00F0               	movwf	??_contStepX
  4142  0385  0834               	movf	_stepXprec+1,w
  4143  0386  3A80               	xorlw	128
  4144  0387  0270               	subwf	??_contStepX,w
  4145  0388  1D03               	skipz
  4146  0389  2B8C               	goto	u2615
  4147  038A  0833               	movf	_stepXprec,w
  4148  038B  0239               	subwf	_stepx,w
  4149  038C                     u2615:	
  4150  038C  1803               	skipnc
  4151  038D  2BA7               	goto	l2601
  4152                           
  4153                           ;main.c: 319: stepxTodo = stepXprec - stepx;
  4154  038E  1283               	bcf	3,5	;RP0=0, select bank0
  4155  038F  1303               	bcf	3,6	;RP1=0, select bank0
  4156  0390  0939               	comf	_stepx,w
  4157  0391  00F0               	movwf	??_contStepX
  4158  0392  093A               	comf	_stepx+1,w
  4159  0393  00F1               	movwf	??_contStepX+1
  4160  0394  0AF0               	incf	??_contStepX,f
  4161  0395  1903               	skipnz
  4162  0396  0AF1               	incf	??_contStepX+1,f
  4163  0397  0833               	movf	_stepXprec,w
  4164  0398  0770               	addwf	??_contStepX,w
  4165  0399  00BB               	movwf	_stepxTodo
  4166  039A  0834               	movf	_stepXprec+1,w
  4167  039B  1803               	skipnc
  4168  039C  0A34               	incf	_stepXprec+1,w
  4169  039D  0771               	addwf	??_contStepX+1,w
  4170  039E  00BC               	movwf	_stepxTodo+1
  4171                           
  4172                           ;main.c: 320: if(motorX.dir == 1) motorX.dir = 0;
  4173  039F  0320               	decf	_motorX,w
  4174  03A0  1D03               	btfss	3,2
  4175  03A1  2BA4               	goto	l403
  4176  03A2  01A0               	clrf	_motorX
  4177  03A3  0008               	return
  4178  03A4                     l403:	
  4179                           
  4180                           ;main.c: 321: else motorX.dir = 1;
  4181  03A4  01A0               	clrf	_motorX
  4182  03A5  0AA0               	incf	_motorX,f
  4183                           
  4184                           ;main.c: 322: } else if (stepXprec < stepx){
  4185  03A6  0008               	return
  4186  03A7                     l2601:	
  4187  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  4188  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  4189  03A9  0834               	movf	_stepXprec+1,w
  4190  03AA  3A80               	xorlw	128
  4191  03AB  00F0               	movwf	??_contStepX
  4192  03AC  083A               	movf	_stepx+1,w
  4193  03AD  3A80               	xorlw	128
  4194  03AE  0270               	subwf	??_contStepX,w
  4195  03AF  1D03               	skipz
  4196  03B0  2BB3               	goto	u2635
  4197  03B1  0839               	movf	_stepx,w
  4198  03B2  0233               	subwf	_stepXprec,w
  4199  03B3                     u2635:	
  4200  03B3  1803               	skipnc
  4201  03B4  2BD2               	goto	l2611
  4202                           
  4203                           ;main.c: 323: stepxTodo = stepx - stepXprec;
  4204  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  4205  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  4206  03B7  0933               	comf	_stepXprec,w
  4207  03B8  00F0               	movwf	??_contStepX
  4208  03B9  0934               	comf	_stepXprec+1,w
  4209  03BA  00F1               	movwf	??_contStepX+1
  4210  03BB  0AF0               	incf	??_contStepX,f
  4211  03BC  1903               	skipnz
  4212  03BD  0AF1               	incf	??_contStepX+1,f
  4213  03BE  0839               	movf	_stepx,w
  4214  03BF  0770               	addwf	??_contStepX,w
  4215  03C0  00BB               	movwf	_stepxTodo
  4216  03C1  083A               	movf	_stepx+1,w
  4217  03C2  1803               	skipnc
  4218  03C3  0A3A               	incf	_stepx+1,w
  4219  03C4  0771               	addwf	??_contStepX+1,w
  4220  03C5  00BC               	movwf	_stepxTodo+1
  4221                           
  4222                           ;main.c: 324: if(motorX.dir != defaultDirx){
  4223  03C6  0820               	movf	_motorX,w
  4224  03C7  067D               	xorwf	_defaultDirx,w
  4225  03C8  1903               	skipnz
  4226  03C9  0008               	return
  4227                           
  4228                           ;main.c: 325: if(motorX.dir == 1) motorX.dir = 0;
  4229  03CA  0320               	decf	_motorX,w
  4230  03CB  1D03               	btfss	3,2
  4231  03CC  2BCF               	goto	l408
  4232  03CD  01A0               	clrf	_motorX
  4233  03CE  0008               	return
  4234  03CF                     l408:	
  4235                           
  4236                           ;main.c: 326: else motorX.dir = 1;
  4237  03CF  01A0               	clrf	_motorX
  4238  03D0  0AA0               	incf	_motorX,f
  4239                           
  4240                           ;main.c: 327: }
  4241                           ;main.c: 328: } else if (stepXprec == stepx){
  4242  03D1  0008               	return
  4243  03D2                     l2611:	
  4244  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  4245  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  4246  03D4  083A               	movf	_stepx+1,w
  4247  03D5  0634               	xorwf	_stepXprec+1,w
  4248  03D6  1D03               	skipz
  4249  03D7  2BDA               	goto	u2665
  4250  03D8  0839               	movf	_stepx,w
  4251  03D9  0633               	xorwf	_stepXprec,w
  4252  03DA                     u2665:	
  4253  03DA  1D03               	skipz
  4254  03DB  0008               	return
  4255                           
  4256                           ;main.c: 329: stepxTodo = stepx - stepXprec;
  4257  03DC  0933               	comf	_stepXprec,w
  4258  03DD  00F0               	movwf	??_contStepX
  4259  03DE  0934               	comf	_stepXprec+1,w
  4260  03DF  00F1               	movwf	??_contStepX+1
  4261  03E0  0AF0               	incf	??_contStepX,f
  4262  03E1  1903               	skipnz
  4263  03E2  0AF1               	incf	??_contStepX+1,f
  4264  03E3  0839               	movf	_stepx,w
  4265  03E4  0770               	addwf	??_contStepX,w
  4266  03E5  00BB               	movwf	_stepxTodo
  4267  03E6  083A               	movf	_stepx+1,w
  4268  03E7  1803               	skipnc
  4269  03E8  0A3A               	incf	_stepx+1,w
  4270  03E9  0771               	addwf	??_contStepX+1,w
  4271  03EA  00BC               	movwf	_stepxTodo+1
  4272  03EB  0008               	return
  4273  03EC                     __end_of_contStepX:	
  4274                           
  4275                           	psect	text21
  4276  0F33                     __ptext21:	
  4277 ;; *************** function _constSpeed *****************
  4278 ;; Defined at:
  4279 ;;		line 301 in file "main.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  activeX         2    0[COMMON] int 
  4282 ;;  activeY         2    2[COMMON] int 
  4283 ;;  activeZ         2    4[COMMON] int 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  nMotor          2    7[COMMON] int 
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg, status,2, status,0
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4295 ;;      Params:         6       0       0       0       0
  4296 ;;      Locals:         2       0       0       0       0
  4297 ;;      Temps:          1       0       0       0       0
  4298 ;;      Totals:         9       0       0       0       0
  4299 ;;Total ram usage:        9 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _constSpeed
  4310  0F33                     _constSpeed:	
  4311                           
  4312                           ;main.c: 303: int nMotor = activeX + activeY;
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _constSpeed: [wreg+status,2+status,0]
  4316  0F33  0872               	movf	constSpeed@activeY,w
  4317  0F34  0770               	addwf	constSpeed@activeX,w
  4318  0F35  00F7               	movwf	constSpeed@nMotor
  4319  0F36  0873               	movf	constSpeed@activeY+1,w
  4320  0F37  1803               	skipnc
  4321  0F38  0A73               	incf	constSpeed@activeY+1,w
  4322  0F39  0771               	addwf	constSpeed@activeX+1,w
  4323  0F3A  00F8               	movwf	constSpeed@nMotor+1
  4324                           
  4325                           ;main.c: 307: if(nMotor == 2)
  4326  0F3B  3002               	movlw	2
  4327  0F3C  0677               	xorwf	constSpeed@nMotor,w
  4328  0F3D  0478               	iorwf	constSpeed@nMotor+1,w
  4329  0F3E  1D03               	btfss	3,2
  4330  0F3F  2F48               	goto	l2639
  4331                           
  4332                           ;main.c: 308: motorX.speed = motorY.speed = motorZ.speed = 1;
  4333  0F40  3001               	movlw	1
  4334  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  4335  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  4336  0F43  00AB               	movwf	_motorZ+1
  4337  0F44  00A6               	movwf	_motorY+1
  4338  0F45  00F6               	movwf	??_constSpeed
  4339  0F46  0876               	movf	??_constSpeed,w
  4340  0F47  00A1               	movwf	_motorX+1
  4341  0F48                     l2639:	
  4342                           
  4343                           ;main.c: 309: if(nMotor == 1)
  4344  0F48  0377               	decf	constSpeed@nMotor,w
  4345  0F49  0478               	iorwf	constSpeed@nMotor+1,w
  4346  0F4A  1D03               	btfss	3,2
  4347  0F4B  0008               	return
  4348                           
  4349                           ;main.c: 310: motorX.speed = motorY.speed = motorZ.speed = 2;
  4350  0F4C  3002               	movlw	2
  4351  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0F4F  00AB               	movwf	_motorZ+1
  4354  0F50  00A6               	movwf	_motorY+1
  4355  0F51  00F6               	movwf	??_constSpeed
  4356  0F52  0876               	movf	??_constSpeed,w
  4357  0F53  00A1               	movwf	_motorX+1
  4358  0F54  0008               	return
  4359  0F55                     __end_of_constSpeed:	
  4360                           
  4361                           	psect	text22
  4362  0EB4                     __ptext22:	
  4363 ;; *************** function _activeMotor *****************
  4364 ;; Defined at:
  4365 ;;		line 237 in file "stepMotor.h"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  i               2    0[COMMON] int 
  4368 ;;  step            2    2[COMMON] int 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  2    0[COMMON] int 
  4373 ;; Registers used:
  4374 ;;		wreg, status,2
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4380 ;;      Params:         4       0       0       0       0
  4381 ;;      Locals:         0       0       0       0       0
  4382 ;;      Temps:          1       0       0       0       0
  4383 ;;      Totals:         5       0       0       0       0
  4384 ;;Total ram usage:        5 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; This function calls:
  4387 ;;		Nothing
  4388 ;; This function is called by:
  4389 ;;		_main
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           
  4394                           ;psect for function _activeMotor
  4395  0EB4                     _activeMotor:	
  4396                           
  4397                           ;stepMotor.h: 238: if(i<step)
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in _activeMotor: [wreg+status,2]
  4401  0EB4  0871               	movf	activeMotor@i+1,w
  4402  0EB5  3A80               	xorlw	128
  4403  0EB6  00F4               	movwf	??_activeMotor
  4404  0EB7  0873               	movf	activeMotor@step+1,w
  4405  0EB8  3A80               	xorlw	128
  4406  0EB9  0274               	subwf	??_activeMotor,w
  4407  0EBA  1D03               	skipz
  4408  0EBB  2EBE               	goto	u2295
  4409  0EBC  0872               	movf	activeMotor@step,w
  4410  0EBD  0270               	subwf	activeMotor@i,w
  4411  0EBE                     u2295:	
  4412  0EBE  1803               	skipnc
  4413  0EBF  2EC5               	goto	l2351
  4414                           
  4415                           ;stepMotor.h: 239: return 1;
  4416  0EC0  3001               	movlw	1
  4417  0EC1  00F0               	movwf	?_activeMotor
  4418  0EC2  3000               	movlw	0
  4419  0EC3  00F1               	movwf	?_activeMotor+1
  4420  0EC4  0008               	return
  4421  0EC5                     l2351:	
  4422                           
  4423                           ;stepMotor.h: 240: else return 0;
  4424  0EC5  01F0               	clrf	?_activeMotor
  4425  0EC6  01F1               	clrf	?_activeMotor+1
  4426  0EC7  0008               	return
  4427  0EC8                     __end_of_activeMotor:	
  4428                           
  4429                           	psect	text23
  4430  04C9                     __ptext23:	
  4431 ;; *************** function _UART_TxInt *****************
  4432 ;; Defined at:
  4433 ;;		line 102 in file "UART.h"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  val             2    6[COMMON] int 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  cent            1   12[COMMON] unsigned char 
  4438 ;;  dec             1   11[COMMON] unsigned char 
  4439 ;;  uni             1   10[COMMON] unsigned char 
  4440 ;;  sig             1    9[COMMON] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4450 ;;      Params:         2       0       0       0       0
  4451 ;;      Locals:         4       0       0       0       0
  4452 ;;      Temps:          1       0       0       0       0
  4453 ;;      Totals:         7       0       0       0       0
  4454 ;;Total ram usage:        7 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    1
  4457 ;; This function calls:
  4458 ;;		_UART_TxChar
  4459 ;;		___wmul
  4460 ;; This function is called by:
  4461 ;;		_main
  4462 ;;		_UART_TxFloat
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _UART_TxInt
  4468  04C9                     _UART_TxInt:	
  4469                           
  4470                           ;UART.h: 104: char sig=0;
  4471                           
  4472                           ;incstack = 0
  4473                           ; Regs used in _UART_TxInt: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4474  04C9  01F9               	clrf	UART_TxInt@sig
  4475                           
  4476                           ;UART.h: 106: if(val<0)
  4477  04CA  1FF7               	btfss	UART_TxInt@val+1,7
  4478  04CB  2CDF               	goto	l2435
  4479                           
  4480                           ;UART.h: 107: {
  4481                           ;UART.h: 108: sig=1;
  4482  04CC  01F9               	clrf	UART_TxInt@sig
  4483  04CD  0AF9               	incf	UART_TxInt@sig,f
  4484                           
  4485                           ;UART.h: 109: val*=-1;
  4486  04CE  30FF               	movlw	255
  4487  04CF  00F0               	movwf	___wmul@multiplier
  4488  04D0  30FF               	movlw	255
  4489  04D1  00F1               	movwf	___wmul@multiplier+1
  4490  04D2  0877               	movf	UART_TxInt@val+1,w
  4491  04D3  00F3               	movwf	___wmul@multiplicand+1
  4492  04D4  0876               	movf	UART_TxInt@val,w
  4493  04D5  00F2               	movwf	___wmul@multiplicand
  4494  04D6  120A  158A  26F1  120A  118A  	fcall	___wmul
  4495  04DB  0871               	movf	?___wmul+1,w
  4496  04DC  00F7               	movwf	UART_TxInt@val+1
  4497  04DD  0870               	movf	?___wmul,w
  4498  04DE  00F6               	movwf	UART_TxInt@val
  4499  04DF                     l2435:	
  4500                           
  4501                           ;UART.h: 110: }
  4502                           ;UART.h: 112: char cent=0, dec=0, uni=0;
  4503  04DF  01FC               	clrf	UART_TxInt@cent
  4504  04E0  01FB               	clrf	UART_TxInt@dec
  4505  04E1  01FA               	clrf	UART_TxInt@uni
  4506  04E2                     l2445:	
  4507                           ;UART.h: 116: while (val>=100) {
  4508                           
  4509  04E2  0877               	movf	UART_TxInt@val+1,w
  4510  04E3  3A80               	xorlw	128
  4511  04E4  00FF               	movwf	127
  4512  04E5  3080               	movlw	128
  4513  04E6  027F               	subwf	127,w
  4514  04E7  1D03               	skipz
  4515  04E8  2CEB               	goto	u2375
  4516  04E9  3064               	movlw	100
  4517  04EA  0276               	subwf	UART_TxInt@val,w
  4518  04EB                     u2375:	
  4519  04EB  1C03               	btfss	3,0
  4520  04EC  2D02               	goto	l2451
  4521                           
  4522                           ;UART.h: 117: val-=100;
  4523  04ED  309C               	movlw	156
  4524  04EE  07F6               	addwf	UART_TxInt@val,f
  4525  04EF  1803               	skipnc
  4526  04F0  0AF7               	incf	UART_TxInt@val+1,f
  4527  04F1  30FF               	movlw	255
  4528  04F2  07F7               	addwf	UART_TxInt@val+1,f
  4529                           
  4530                           ;UART.h: 118: cent++;
  4531  04F3  3001               	movlw	1
  4532  04F4  00F8               	movwf	??_UART_TxInt
  4533  04F5  0878               	movf	??_UART_TxInt,w
  4534  04F6  07FC               	addwf	UART_TxInt@cent,f
  4535  04F7  2CE2               	goto	l2445
  4536  04F8                     l2447:	
  4537                           ;UART.h: 119: }
  4538                           ;UART.h: 120: while (val>=10) {
  4539                           
  4540                           
  4541                           ;UART.h: 121: val-=10;
  4542  04F8  30F6               	movlw	246
  4543  04F9  07F6               	addwf	UART_TxInt@val,f
  4544  04FA  1803               	skipnc
  4545  04FB  0AF7               	incf	UART_TxInt@val+1,f
  4546  04FC  30FF               	movlw	255
  4547  04FD  07F7               	addwf	UART_TxInt@val+1,f
  4548                           
  4549                           ;UART.h: 122: dec++;
  4550  04FE  3001               	movlw	1
  4551  04FF  00F8               	movwf	??_UART_TxInt
  4552  0500  0878               	movf	??_UART_TxInt,w
  4553  0501  07FB               	addwf	UART_TxInt@dec,f
  4554  0502                     l2451:	
  4555  0502  0877               	movf	UART_TxInt@val+1,w
  4556  0503  3A80               	xorlw	128
  4557  0504  00FF               	movwf	127
  4558  0505  3080               	movlw	128
  4559  0506  027F               	subwf	127,w
  4560  0507  1D03               	skipz
  4561  0508  2D0B               	goto	u2385
  4562  0509  300A               	movlw	10
  4563  050A  0276               	subwf	UART_TxInt@val,w
  4564  050B                     u2385:	
  4565  050B  1803               	skipnc
  4566  050C  2CF8               	goto	l2447
  4567                           
  4568                           ;UART.h: 123: }
  4569                           ;UART.h: 124: uni=val;
  4570  050D  0876               	movf	UART_TxInt@val,w
  4571  050E  00F8               	movwf	??_UART_TxInt
  4572  050F  0878               	movf	??_UART_TxInt,w
  4573  0510  00FA               	movwf	UART_TxInt@uni
  4574                           
  4575                           ;UART.h: 126: if (cent==0 && dec==0) dec=32;
  4576  0511  087C               	movf	UART_TxInt@cent,w
  4577  0512  1D03               	btfss	3,2
  4578  0513  2D1C               	goto	l2461
  4579  0514  087B               	movf	UART_TxInt@dec,w
  4580  0515  1D03               	btfss	3,2
  4581  0516  2D1C               	goto	l2461
  4582  0517  3020               	movlw	32
  4583  0518  00F8               	movwf	??_UART_TxInt
  4584  0519  0878               	movf	??_UART_TxInt,w
  4585  051A  00FB               	movwf	UART_TxInt@dec
  4586  051B  2D20               	goto	l256
  4587  051C                     l2461:	
  4588                           
  4589                           ;UART.h: 127: else dec+=48;
  4590  051C  3030               	movlw	48
  4591  051D  00F8               	movwf	??_UART_TxInt
  4592  051E  0878               	movf	??_UART_TxInt,w
  4593  051F  07FB               	addwf	UART_TxInt@dec,f
  4594  0520                     l256:	
  4595                           
  4596                           ;UART.h: 129: if (cent==0) cent=32;
  4597  0520  087C               	movf	UART_TxInt@cent,w
  4598  0521  1D03               	btfss	3,2
  4599  0522  2D28               	goto	l2465
  4600  0523  3020               	movlw	32
  4601  0524  00F8               	movwf	??_UART_TxInt
  4602  0525  0878               	movf	??_UART_TxInt,w
  4603  0526  00FC               	movwf	UART_TxInt@cent
  4604  0527  2D2C               	goto	l258
  4605  0528                     l2465:	
  4606                           
  4607                           ;UART.h: 130: else cent+=48;
  4608  0528  3030               	movlw	48
  4609  0529  00F8               	movwf	??_UART_TxInt
  4610  052A  0878               	movf	??_UART_TxInt,w
  4611  052B  07FC               	addwf	UART_TxInt@cent,f
  4612  052C                     l258:	
  4613                           
  4614                           ;UART.h: 132: uni+=48;
  4615  052C  3030               	movlw	48
  4616  052D  00F8               	movwf	??_UART_TxInt
  4617  052E  0878               	movf	??_UART_TxInt,w
  4618  052F  07FA               	addwf	UART_TxInt@uni,f
  4619                           
  4620                           ;UART.h: 134: if (sig==1) UART_TxChar('-');
  4621  0530  0379               	decf	UART_TxInt@sig,w
  4622  0531  1D03               	btfss	3,2
  4623  0532  2D39               	goto	l2469
  4624  0533  302D               	movlw	45
  4625  0534  120A  158A  2684  120A  118A  	fcall	_UART_TxChar
  4626  0539                     l2469:	
  4627                           
  4628                           ;UART.h: 136: if (cent!=32) UART_TxChar(cent);
  4629  0539  3020               	movlw	32
  4630  053A  067C               	xorwf	UART_TxInt@cent,w
  4631  053B  1903               	btfsc	3,2
  4632  053C  2D43               	goto	l2473
  4633  053D  087C               	movf	UART_TxInt@cent,w
  4634  053E  120A  158A  2684  120A  118A  	fcall	_UART_TxChar
  4635  0543                     l2473:	
  4636                           
  4637                           ;UART.h: 137: if (dec!=32) UART_TxChar(dec);
  4638  0543  3020               	movlw	32
  4639  0544  067B               	xorwf	UART_TxInt@dec,w
  4640  0545  1903               	btfsc	3,2
  4641  0546  2D4D               	goto	l261
  4642  0547  087B               	movf	UART_TxInt@dec,w
  4643  0548  120A  158A  2684  120A  118A  	fcall	_UART_TxChar
  4644  054D                     l261:	
  4645                           
  4646                           ;UART.h: 138: UART_TxChar(uni);
  4647  054D  087A               	movf	UART_TxInt@uni,w
  4648  054E  120A  158A  2684   	fcall	_UART_TxChar
  4649  0551  0008               	return
  4650  0552                     __end_of_UART_TxInt:	
  4651                           
  4652                           	psect	text24
  4653  0EF1                     __ptext24:	
  4654 ;; *************** function ___wmul *****************
  4655 ;; Defined at:
  4656 ;;		line 15 in file "/opt/microchip/xc8/v1.36/sources/common/Umul16.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  multiplier      2    0[COMMON] unsigned int 
  4659 ;;  multiplicand    2    2[COMMON] unsigned int 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  product         2    4[COMMON] unsigned int 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  2    0[COMMON] unsigned int 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4671 ;;      Params:         4       0       0       0       0
  4672 ;;      Locals:         2       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0
  4674 ;;      Totals:         6       0       0       0       0
  4675 ;;Total ram usage:        6 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_UART_TxInt
  4681 ;;		_equivVal
  4682 ;;		_toint
  4683 ;;		_UART_TxFloat
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function ___wmul
  4689  0EF1                     ___wmul:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4693  0EF1  01F4               	clrf	___wmul@product
  4694  0EF2  01F5               	clrf	___wmul@product+1
  4695  0EF3                     l2203:	
  4696  0EF3  1C70               	btfss	___wmul@multiplier,0
  4697  0EF4  2EFB               	goto	l591
  4698  0EF5  0872               	movf	___wmul@multiplicand,w
  4699  0EF6  07F4               	addwf	___wmul@product,f
  4700  0EF7  1803               	skipnc
  4701  0EF8  0AF5               	incf	___wmul@product+1,f
  4702  0EF9  0873               	movf	___wmul@multiplicand+1,w
  4703  0EFA  07F5               	addwf	___wmul@product+1,f
  4704  0EFB                     l591:	
  4705  0EFB  3001               	movlw	1
  4706  0EFC                     u2075:	
  4707  0EFC  1003               	clrc
  4708  0EFD  0DF2               	rlf	___wmul@multiplicand,f
  4709  0EFE  0DF3               	rlf	___wmul@multiplicand+1,f
  4710  0EFF  3EFF               	addlw	-1
  4711  0F00  1D03               	skipz
  4712  0F01  2EFC               	goto	u2075
  4713  0F02  3001               	movlw	1
  4714  0F03                     u2085:	
  4715  0F03  1003               	clrc
  4716  0F04  0CF1               	rrf	___wmul@multiplier+1,f
  4717  0F05  0CF0               	rrf	___wmul@multiplier,f
  4718  0F06  3EFF               	addlw	-1
  4719  0F07  1D03               	skipz
  4720  0F08  2F03               	goto	u2085
  4721  0F09  0870               	movf	___wmul@multiplier,w
  4722  0F0A  0471               	iorwf	___wmul@multiplier+1,w
  4723  0F0B  1D03               	btfss	3,2
  4724  0F0C  2EF3               	goto	l2203
  4725  0F0D  0875               	movf	___wmul@product+1,w
  4726  0F0E  00F1               	movwf	?___wmul+1
  4727  0F0F  0874               	movf	___wmul@product,w
  4728  0F10  00F0               	movwf	?___wmul
  4729  0F11  0008               	return
  4730  0F12                     __end_of___wmul:	
  4731                           
  4732                           	psect	text25
  4733  0EDC                     __ptext25:	
  4734 ;; *************** function _UART_Init *****************
  4735 ;; Defined at:
  4736 ;;		line 4 in file "UART.h"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4750 ;;      Params:         0       0       0       0       0
  4751 ;;      Locals:         0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0
  4753 ;;      Totals:         0       0       0       0       0
  4754 ;;Total ram usage:        0 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_main
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           
  4764                           ;psect for function _UART_Init
  4765  0EDC                     _UART_Init:	
  4766                           
  4767                           ;UART.h: 8: SPBRG=12;
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _UART_Init: [wreg+status,2]
  4771  0EDC  300C               	movlw	12
  4772  0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  4773  0EDE  1303               	bcf	3,6	;RP1=0, select bank1
  4774  0EDF  0099               	movwf	25	;volatile
  4775                           
  4776                           ;UART.h: 9: SPBRGH=0;
  4777  0EE0  019A               	clrf	26	;volatile
  4778                           
  4779                           ;UART.h: 11: BAUDCTLbits.BRG16=0;
  4780  0EE1  1683               	bsf	3,5	;RP0=1, select bank3
  4781  0EE2  1703               	bsf	3,6	;RP1=1, select bank3
  4782  0EE3  1187               	bcf	7,3	;volatile
  4783                           
  4784                           ;UART.h: 14: TXSTAbits.BRGH=0;
  4785  0EE4  1683               	bsf	3,5	;RP0=1, select bank1
  4786  0EE5  1303               	bcf	3,6	;RP1=0, select bank1
  4787  0EE6  1118               	bcf	24,2	;volatile
  4788                           
  4789                           ;UART.h: 15: TXSTAbits.TX9=0;
  4790  0EE7  1318               	bcf	24,6	;volatile
  4791                           
  4792                           ;UART.h: 16: TXSTAbits.TXEN=1;
  4793  0EE8  1698               	bsf	24,5	;volatile
  4794                           
  4795                           ;UART.h: 17: TXSTAbits.SYNC=0;
  4796  0EE9  1218               	bcf	24,4	;volatile
  4797                           
  4798                           ;UART.h: 20: RCSTAbits.SPEN=1;
  4799  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  4800  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  4801  0EEC  1798               	bsf	24,7	;volatile
  4802                           
  4803                           ;UART.h: 21: RCSTAbits.RX9=0;
  4804  0EED  1318               	bcf	24,6	;volatile
  4805                           
  4806                           ;UART.h: 22: RCSTAbits.CREN=1;
  4807  0EEE  1618               	bsf	24,4	;volatile
  4808                           
  4809                           ;UART.h: 23: RCSTAbits.ADDEN=0;
  4810  0EEF  1198               	bcf	24,3	;volatile
  4811  0EF0  0008               	return
  4812  0EF1                     __end_of_UART_Init:	
  4813                           
  4814                           	psect	text26
  4815  0E8D                     __ptext26:	
  4816 ;; *************** function _UART_GotoNewLine *****************
  4817 ;; Defined at:
  4818 ;;		line 95 in file "UART.h"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0, pclath, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4832 ;;      Params:         0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0
  4835 ;;      Totals:         0       0       0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    1
  4839 ;; This function calls:
  4840 ;;		_UART_TxChar
  4841 ;; This function is called by:
  4842 ;;		_main
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _UART_GotoNewLine
  4848  0E8D                     _UART_GotoNewLine:	
  4849                           
  4850                           ;UART.h: 97: UART_TxChar('\r');
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _UART_GotoNewLine: [wreg+status,2+status,0+pclath+cstack]
  4854  0E8D  300D               	movlw	13
  4855  0E8E  120A  158A  2684  120A  158A  	fcall	_UART_TxChar
  4856                           
  4857                           ;UART.h: 98: UART_TxChar('\n');
  4858  0E93  300A               	movlw	10
  4859  0E94  120A  158A  2684   	fcall	_UART_TxChar
  4860  0E97  0008               	return
  4861  0E98                     __end_of_UART_GotoNewLine:	
  4862                           
  4863                           	psect	text27
  4864  0E84                     __ptext27:	
  4865 ;; *************** function _UART_TxChar *****************
  4866 ;; Defined at:
  4867 ;;		line 35 in file "UART.h"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  ch              1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  ch              1    0[COMMON] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4881 ;;      Params:         0       0       0       0       0
  4882 ;;      Locals:         1       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0
  4884 ;;      Totals:         1       0       0       0       0
  4885 ;;Total ram usage:        1 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_UART_TxString
  4891 ;;		_UART_GotoNewLine
  4892 ;;		_UART_TxInt
  4893 ;;		_UART_TxDeci
  4894 ;;		_UART_TxFloat
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _UART_TxChar
  4900  0E84                     _UART_TxChar:	
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _UART_TxChar: [wreg]
  4904                           ;UART_TxChar@ch stored from wreg
  4905  0E84  00F0               	movwf	UART_TxChar@ch
  4906  0E85                     l214:	
  4907                           ;UART.h: 36: while (!TXIF);
  4908                           
  4909  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0E87  1E0C               	btfss	12,4	;volatile
  4912  0E88  2E85               	goto	l214
  4913                           
  4914                           ;UART.h: 37: TXIF = 0;
  4915  0E89  120C               	bcf	12,4	;volatile
  4916                           
  4917                           ;UART.h: 38: TXREG = ch;
  4918  0E8A  0870               	movf	UART_TxChar@ch,w
  4919  0E8B  0099               	movwf	25	;volatile
  4920  0E8C  0008               	return
  4921  0E8D                     __end_of_UART_TxChar:	
  4922  007E                     btemp	set	126	;btemp
  4923  007E                     wtemp	set	126
  4924  007E                     wtemp0	set	126
  4925  0080                     wtemp1	set	128
  4926  0082                     wtemp2	set	130
  4927  0084                     wtemp3	set	132
  4928  0086                     wtemp4	set	134
  4929  0088                     wtemp5	set	136
  4930  007F                     wtemp6	set	127
  4931  007E                     ttemp	set	126
  4932  007E                     ttemp0	set	126
  4933  0081                     ttemp1	set	129
  4934  0084                     ttemp2	set	132
  4935  0087                     ttemp3	set	135
  4936  007F                     ttemp4	set	127
  4937  007E                     ltemp	set	126
  4938  007E                     ltemp0	set	126
  4939  0082                     ltemp1	set	130
  4940  0086                     ltemp2	set	134
  4941  0080                     ltemp3	set	128


Data Sizes:
    Strings     74
    Constant    0
    Data        44
    BSS         69
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     32      80
    BANK1            80      0      65
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK1[3]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK1[3]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), 

    toint@c	PTR unsigned char  size(1) Largest target is 7
		 -> stepZ(BANK1[7]), stepY(BANK1[7]), stepX(BANK1[7]), canvasY(BANK1[3]), 
		 -> canvasX(BANK1[3]), 

    getCoords@coords	PTR unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), 

    getCanvasDim@canvas	PTR unsigned char  size(1) Largest target is 7
		 -> canvas(BANK1[7]), 

    UART_RxString@stringa	PTR unsigned char  size(1) Largest target is 9
		 -> coords(BANK1[9]), canvas(BANK1[7]), 

    UART_TxString@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[6]), 
		 -> STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_1(CODE[6]), coords(BANK1[9]), canvasY(BANK1[3]), 
		 -> canvasX(BANK1[3]), 


Critical Paths under _main in COMMON

    _main->_UART_TxInt
    _main->_maxStep
    _toint->_strlen
    _stepMotorZ->_ms_delay
    _stepMotorY->_ms_delay
    _stepMotorX->_ms_delay
    _getCoords->_UART_RxString
    _getCanvasDim->_UART_RxString
    _UART_TxString->_UART_TxChar
    _equivVal->___awdiv
    _equivVal->_toint
    ___awdiv->___wmul
    _UART_TxInt->___wmul
    _UART_GotoNewLine->_UART_TxChar

Critical Paths under _main in BANK0

    _main->_equivVal
    _equivVal->_toint

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   12571
                                             15 BANK0     17    17      0
                   _UART_GotoNewLine
                          _UART_Init
                      _UART_RxString
                         _UART_TxInt
                      _UART_TxString
                        _activeMotor
                         _constSpeed
                          _contStepX
                          _contStepY
                           _equivVal
                       _getCanvasDim
                          _getCoords
                            _maxStep
                         _stepMotorX
                         _stepMotorY
                         _stepMotorZ
                             _strcmp
                              _toint
 ---------------------------------------------------------------------------------
 (1) _toint                                               12    10      2    1147
                                              8 COMMON     3     1      2
                                              0 BANK0      9     9      0
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     117
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     251
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _stepMotorZ                                           4     1      3    1171
                                              4 COMMON     4     1      3
                              _modM3
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _modM3                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _stepMotorY                                           4     1      3    1065
                                              4 COMMON     4     1      3
                              _modM2
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _modM2                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _stepMotorX                                           4     1      3    1065
                                              4 COMMON     4     1      3
                              _modM1
                           _ms_delay
 ---------------------------------------------------------------------------------
 (2) _ms_delay                                             4     4      0      46
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _modM1                                                2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _maxStep                                             13     7      6     452
                                              0 COMMON    13     7      6
 ---------------------------------------------------------------------------------
 (1) _getCoords                                            6     6      0    1413
                                              5 COMMON     6     6      0
                      _UART_RxString
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (1) _getCanvasDim                                         5     5      0    1325
                                              5 COMMON     5     5      0
                      _UART_RxString
                      _UART_TxString
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        2     0      2     809
                                              1 COMMON     2     0      2
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_RxString                                        5     5      0     289
                                              0 COMMON     5     5      0
                        _UART_RxChar
 ---------------------------------------------------------------------------------
 (3) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _equivVal                                             6     0      6    1412
                                              9 BANK0      6     0      6
                            ___awdiv
                             ___wmul
                              _toint (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _contStepY                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _contStepX                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _constSpeed                                           9     3      6     248
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) _activeMotor                                          5     1      4     256
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) _UART_TxInt                                           7     5      2    1392
                                              6 COMMON     7     5      2
                        _UART_TxChar
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     622
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_GotoNewLine                                     0     0      0      22
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_GotoNewLine
     _UART_TxChar
   _UART_Init
   _UART_RxString
     _UART_RxChar
   _UART_TxInt
     _UART_TxChar
     ___wmul
   _UART_TxString
     _UART_TxChar
   _activeMotor
   _constSpeed
   _contStepX
   _contStepY
   _equivVal
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _toint (ARG)
       ___wmul
       _strlen
   _getCanvasDim
     _UART_RxString
       _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _getCoords
     _UART_RxString
       _UART_RxChar
     _UART_TxString
       _UART_TxChar
   _maxStep
   _stepMotorX
     _modM1
     _ms_delay
   _stepMotorY
     _modM2
     _ms_delay
   _stepMotorZ
     _modM3
     _ms_delay
   _strcmp
   _toint
     ___wmul
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      41       7       81.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9F      12        0.0%
ABS                  0      0      9F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Jun 11 15:39:03 2021

                                       pc 0002                               __CFG_CP$OFF 0000  
                            ___awdiv@sign 004F                                        fsr 0004  
                     ___wmul@multiplicand 0072                                       l214 0E85  
                                     l403 03A4                                       l227 0E9E  
                                     l261 054D                                       l256 0520  
                                     l408 03CF                                       l353 05B0  
                                     l258 052C                                       l434 043B  
                                     l429 0410                                       l367 07AE  
                                     l591 0EFB                              __CFG_CPD$OFF 0000  
                                     _end 006E                                       fsr0 0004  
                                     indf 0000                              __CFG_FOSC$XT 0000  
                             main@activeX 0068                               main@activeY 006A  
                             main@activeZ 0062                              __CFG_LVP$OFF 0000  
                                    l2101 01D6                                      l2113 01F4  
                                    l2105 01E0                                      l2203 0EF3  
                                    l2061 0172                                      l2117 01FE  
                                    l2109 01EA                                      l2141 023A  
                                    l2133 0226                                      l2125 0212  
                                    l2223 0265                                      l2241 0286  
                                    l2081 01A4                                      l2073 0190  
                                    l2065 017C                                      l2145 0244  
                                    l2137 0230                                      l2129 021C  
                                    l2251 02A7                                      l2171 0FCF  
                                    l2315 0110                                      l2229 0270  
                                    l2181 0FE7                                      l2333 0144  
                                    l2085 01AE                                      l2077 019A  
                                    l2069 0186                                      l2093 01C2  
                                    l2149 024E                                      l2351 0EC5  
                                    l2255 02AF                                      l2247 029C  
                                    l2239 0278                                      l2167 0F55  
                                    l2335 014C                                      l2159 0ECA  
                                    l2271 00A4                                      l2601 03A7  
                                    l2177 0FDF                                      l2097 01CC  
                                    l2451 0502                                      l2435 04DF  
                                    l2611 03D2                                      l2187 0FF1  
                                    l2531 035D                                      l2339 015C  
                                    l2195 0063                                      l2461 051C  
                                    l2445 04E2                                      l2621 0413  
                                    l2525 0332                                      l2293 00DA  
                                    l2197 006E                                      l2447 04F8  
                                    l2631 043E                                      l2551 04B3  
                                    l2543 0488                                      l2473 0543  
                                    l2465 0528                                      l2563 0F82  
                                    l2547 04AC                                      l2469 0539  
                                    l2549 0465                                      l2639 0F48  
                                    l2567 0F9C                                      l2559 0F7A  
                                    l2831 0747                                      l2761 057F  
                                    l2835 075E                                      l2861 07CA  
                                    l2837 06EB                                      l2781 05F2  
                                    l2855 07B0                                      l2847 076B  
                                    l2839 0767                                      l2863 07D4  
                                    l2849 0797                                      l2777 05DE  
                                    l2859 079B                                      STR_1 004A  
                                    STR_2 005A                                      STR_3 0056  
                                    STR_4 0035                                      STR_5 003C  
                                    STR_6 0043                                      STR_7 0023  
                                    STR_8 002C                                      STR_9 0050  
                                    _CREN 00C4                                      u2135 027B  
                                    u2075 0EFC                                      u2155 0287  
                                    u2085 0F03                                      u2165 0293  
                                    u2175 029D                                      u2265 0132  
                                    u2275 013E                               main@largest 0060  
                                    u2525 0330                                      u2285 0156  
                                    u2375 04EB                                      u2295 0EBE  
                                    u2615 038C                                      u2535 035B  
                                    u3407 0ED2                                      u2385 050B  
                                    u3417 02BB                                      u2635 03B3  
                                    u2725 0446                                      u2565 0473  
                                    u2665 03DA                                      u2905 0775  
                                    u2675 03F8                                      u2595 02E5  
                                    u2925 07A5                                      u2695 041F  
                                    _RCIF 0065                                      u2895 06F5  
                                    _OERR 00C1                                      _TXIF 0064  
                            __CFG_WRT$OFF 0000                                      _main 0552  
                                    btemp 007E                                      ltemp 007E  
                                    start 0000                                      ttemp 007E  
                                    wtemp 007E                             __CFG_IESO$OFF 0000  
                           __CFG_MCLRE$ON 0000                                     ?_main 0070  
                         __end_of___awdiv 02B4                                     STR_10 0028  
                                   STR_11 0031                                     STR_12 0013  
                           __CFG_WDTE$OFF 0000                                     _ANSEL 0188  
                         ___awdiv@divisor 0076                           ___awdiv@counter 004E  
                                   _RCREG 001A                                     _SPBRG 0099  
                                   _PORTA 0005                                     _PORTB 0006  
                                   _PORTC 0007                                     _PORTD 0008  
                                   _PORTE 0009                                     _TRISA 0085  
                                   _TRISB 0086                                     _TRISC 0087  
                                   _TRISD 0088                                     _TRISE 0089  
                                   _TXREG 0019                      __end_of_getCanvasDim 0380  
                             ?_UART_TxInt 0076                            __CFG_FCMEN$OFF 0000  
                      __size_of_UART_Init 0015                           __end_of_maxStep 0169  
                                   _modM1 0169                                     _modM2 01B9  
                                   _modM3 0209                                     _speed 004D  
                                   _stepX 00B0                                     _stepY 00B7  
                                   _stepZ 00BE                                     _toint 0458  
                                   _steps 006F                                     main@i 006C  
                                   _stepx 0039                                     _stepy 003D  
                                   _stepz 0041                            __CFG_BOREN$OFF 0000  
                    __size_of_activeMotor 0014                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           __initialization 07D9  
                            __end_of_main 07D9                         ?_UART_GotoNewLine 0070  
                      ??_UART_GotoNewLine 0071                                    ??_main 005D  
                                  ?_modM1 0070                                    ?_modM2 0070  
                                  ?_modM3 0070                          ___awdiv@dividend 0078  
                                  ?_toint 0078                                    _ANSELH 0189  
                                  _SPBRGH 009A                                    _MStepX 00CB  
                                  _MStepY 00CD                                    _MStepZ 00CF  
                            ?_UART_RxChar 0070                            __CFG_PWRTE$OFF 0000  
                            ?_UART_TxChar 0070                         __end_of_UART_Init 0EF1  
                     __size_of_UART_TxInt 0089                                    ___wmul 0EF1  
                               ??___awdiv 007A                                    _canvas 00DA  
                                  _coords 00D1                          __end_of_equivVal 0F33  
                        ___awdiv@quotient 0050                                    _motorX 0020  
                                  _motorY 0025                                    _motorZ 002A  
                        __end_of_ms_delay 0EDC                                    modM1@m 0070  
                                  modM2@m 0070                                    modM3@m 0070  
                                  _strcmp 0F78                                    _strlen 005E  
                               ??_maxStep 0076                                    toint@c 0056  
                                  toint@i 0054                                    toint@r 004E  
                 __end_of__initialization 07FC                     __end_of_UART_RxString 1000  
                   __end_of_UART_TxString 0F78                            __pcstackCOMMON 0070  
                            __pidataBANK0 005D                              __pidataBANK1 0FA2  
                           __end_of_modM1 01B9                             __end_of_modM2 0209  
                           __end_of_modM3 0259                             __end_of_toint 04C9  
                   __size_of_getCanvasDim 006B                        __size_of_getCoords 0061  
                             ms_delay@val 0072                        __size_of_contStepX 006C  
                      __size_of_contStepY 006C                                   ??_modM1 0072  
                                 ??_modM2 0072                                   ??_modM3 0072  
                                 ??_toint 007A                                __pbssBANK0 0020  
                              __pbssBANK1 00CB                              maxStep@stepx 0070  
                            maxStep@stepy 0072                              maxStep@stepz 0074  
                         equivVal@Mcanvas 0057                              _getCanvasDim 0315  
                           stepMotorX@dir 0077                             stepMotorY@dir 0077  
                           stepMotorZ@dir 0077                             stepMotorX@mod 0075  
                              __pmaintext 0552                             stepMotorY@mod 0075  
                           stepMotorZ@mod 0075                           stepMotorX@speed 0074  
                         stepMotorY@speed 0074                           stepMotorZ@speed 0074  
                                 ?___wmul 0070                                   ?_strcmp 0070  
                                 ?_strlen 0070                              ??_UART_TxInt 0078  
                              __stringtab 0003                                _constSpeed 0F33  
                               ?_equivVal 0057                      UART_RxString@stringa 0072  
                       __end_of_getCoords 0315                                 ?_ms_delay 0070  
                    __size_of_UART_RxChar 000B                      __size_of_UART_TxChar 0009  
                      __end_of_UART_TxInt 0552                                   ___awdiv 0259  
                       __end_of_contStepX 03EC                         __end_of_contStepY 0458  
                         __size_of___wmul 0021                                   _canvasX 00C5  
                                 _canvasY 00C8                                   _canvasx 002F  
                                 _canvasy 0031                                   __ptext1 0458  
                                 __ptext2 005E                                   __ptext3 0F78  
                                 __ptext4 00F0                                   __ptext5 0209  
                                 __ptext6 00BA                                   __ptext7 01B9  
                                 __ptext8 0084                                   __ptext9 0EC8  
                          UART_TxInt@cent 007C                           __size_of_strcmp 002A  
                         __size_of_strlen 0026                                   _maxStep 0126  
                                 _limitX0 0047                                   _limitX1 0048  
                                 _limitY0 0049                                   _limitY1 004A  
                                 _limitZ0 004B                                   _limitZ1 004C  
                           ??_activeMotor 0074                 __size_of_UART_GotoNewLine 000B  
                                 clrloop0 0E7D                      end_of_initialization 07FC  
                              ??_equivVal 007B                                ??_ms_delay 0070  
                              getCoords@i 0079                                 _RCSTAbits 0018  
                         activeMotor@step 0072                                   strcmp@r 0074  
                                 strlen@s 0076                                 _UART_Init 0EDC  
                               _PORTAbits 0005                                 _PORTBbits 0006  
                               _PORTCbits 0007                                 _PORTDbits 0008  
                               _PORTEbits 0009                                _stepMotorX 0084  
                              _stepMotorY 00BA                                _stepMotorZ 00F0  
                             ?_constSpeed 0070                       __end_of_activeMotor 0EC8  
                               _TXSTAbits 0098                            __end_of___wmul 0F12  
                              ?_UART_Init 0070                               _BAUDCTLbits 0187  
                          __end_of_strcmp 0FA2                            __end_of_strlen 0084  
                     start_initialization 07D9                             getCanvasDim@j 0078  
                                ??___wmul 0074                                init_fetch0 0EA3  
                             __pdataBANK0 006F                               __pdataBANK1 00A0  
                     __size_of_constSpeed 0022                                  ??_strcmp 0072  
                                ??_strlen 0072                    __size_of_UART_RxString 0033  
                             __pbssCOMMON 007D                                 ___latbits 0002  
                  __size_of_UART_TxString 0023                             __pcstackBANK0 004E  
                        _UART_GotoNewLine 0E8D                               _defaultDirx 007D  
                             _defaultDiry 0045                               _defaultDirz 0046  
                             ?_stepMotorX 0074                               ?_stepMotorY 0074  
                             ?_stepMotorZ 0074                               _activeMotor 0EB4  
                               __pnvBANK0 006E                         __size_of_equivVal 0021  
                       __size_of_ms_delay 0014                                 _getCoords 02B4  
                                ?___awdiv 0076                            equivVal@canvas 005B  
                             ??_UART_Init 0070                              activeMotor@i 0070  
                               __pstrings 0003                                 _contStepX 0380  
                               _contStepY 03EC                                  ?_maxStep 0070  
                           UART_TxChar@ch 0070                            __size_of_modM1 0050  
                          __size_of_modM2 0050                            __size_of_modM3 0050  
                          __size_of_toint 0071                             UART_TxInt@dec 007B  
                           UART_TxInt@sig 0079                             UART_TxInt@val 0076  
                           UART_TxInt@uni 007A                            ___wmul@product 0074  
                               clear_ram0 0E7C                             ??_UART_RxChar 0070  
                           _UART_RxString 0FCD                             ??_UART_TxChar 0070  
                           _UART_TxString 0F55                                ?_getCoords 0070  
                     __size_of_stepMotorX 0036                       __size_of_stepMotorY 0036  
                     __size_of_stepMotorZ 0036                               __stringbase 0012  
                              ?_contStepX 0070                                ?_contStepY 0070  
                               main@i_511 0064                                 main@i_513 0066  
                       ___wmul@multiplier 0070                                 _stepXprec 0033  
                               _stepYprec 0035                                 _stepZprec 0037  
                               _stepxTodo 003B                                 _stepyTodo 003F  
                               _stepzTodo 0043                          UART_RxString@len 0073  
                            ??_constSpeed 0076                               _maxStep$382 0077  
                             _maxStep$383 0079                            ?_UART_RxString 0070  
                          ?_UART_TxString 0071                                toint@value 0052  
                     __end_of_UART_RxChar 0EA3                       __end_of_UART_TxChar 0E8D  
                        __size_of___awdiv 005B                        __end_of__stringtab 0013  
                      __end_of_constSpeed 0F55                                 ms_delay@i 0073  
                        __size_of_maxStep 0043                             equivVal@Mstep 0059  
                                __ptext10 0169                                  __ptext11 0126  
                                __ptext20 0380                                  __ptext12 02B4  
                                __ptext21 0F33                                  __ptext13 0315  
                                __ptext22 0EB4                                  __ptext14 0F55  
                                __ptext23 04C9                                  __ptext15 0FCD  
                                __ptext24 0EF1                                  __ptext16 0E98  
                                __ptext25 0EDC                                  __ptext17 0F12  
                                __ptext26 0E8D                                  __ptext18 0259  
                                __ptext27 0E84                                  __ptext19 03EC  
                       __CFG_BOR4V$BOR40V 0000                           getCoords@coords 0078  
                        UART_TxString@str 0071                                  _equivVal 0F12  
                           __size_of_main 0287                                  _ms_delay 0EC8  
                           ?_getCanvasDim 0070                  __end_of_UART_GotoNewLine 0E98  
                             ??_getCoords 0075                               ??_contStepX 0070  
                             ??_contStepY 0070                           UART_RxString@ch 0074  
modConversionFormNumberToMultiplier@F1996 00A0                                  maxStep@l 007B  
                               toint@flag 0050                                  init_ram0 0EA7  
                            ??_stepMotorX 0077                              ??_stepMotorY 0077  
                            ??_stepMotorZ 0077                              ?_activeMotor 0070  
                         ??_UART_RxString 0070                           ??_UART_TxString 0073  
                          ??_getCanvasDim 0075                               _UART_RxChar 0E98  
                               stringcode 000D                               _UART_TxChar 0E84  
                      __end_of_stepMotorX 00BA                        __end_of_stepMotorY 00F0  
                      __end_of_stepMotorZ 0126                         constSpeed@activeX 0070  
                       constSpeed@activeY 0072                         constSpeed@activeZ 0074  
                                strcmp@s1 0075                                  strcmp@s2 0070  
                                strlen@cp 0077                        getCanvasDim@canvas 0077  
                                stringdir 000D                                  stringtab 0003  
                              _UART_TxInt 04C9                          constSpeed@nMotor 0077  
